2025-02-15 15:52:44:065 grammar LogManager.java:25 load Cadl14Lexer from grammar/AqlLexer.g4
2025-02-15 15:52:44:067 grammar LogManager.java:25 load OpenehrPatterns from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14Lexer.g4
2025-02-15 15:52:44:068 grammar LogManager.java:25 load BaseLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/OpenehrPatterns.g4
2025-02-15 15:52:44:072 grammar LogManager.java:25 load Cadl14PrimitiveValuesLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14Lexer.g4
2025-02-15 15:52:44:072 grammar LogManager.java:25 load Cadl2PrimitiveValuesLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14PrimitiveValuesLexer.g4
2025-02-15 15:52:44:073 grammar LogManager.java:25 load PrimitiveValuesLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl2PrimitiveValuesLexer.g4
2025-02-15 15:52:44:074 grammar LogManager.java:25 load GeneralLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14PrimitiveValuesLexer.g4
2025-02-15 15:52:44:074 grammar LogManager.java:25 load OdinLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14Lexer.g4
2025-02-15 15:52:44:074 grammar LogManager.java:25 load OdinValuesLexer from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/OdinLexer.g4
2025-02-15 15:52:44:075 grammar LogManager.java:25 load AqlGeneral from grammar/AqlLexer.g4
2025-02-15 15:52:44:076 grammar LogManager.java:25 before: (LEXER_GRAMMAR AqlLexer (import Cadl14Lexer OpenehrPatterns BaseLexer AqlGeneral GeneralLexer) (channels { COMMENT) (RULES (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE UNICODE_BOM (BLOCK (LEXER_ALT_ACTION (ALT (BLOCK (ALT '\uEFBBBF') (ALT '\uFEFF') (ALT '\u0000FEFF'))) skip))) (RULE CMT_LINE (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE SYM_SELECT (BLOCK (ALT 'SELECT'))) (RULE SYM_AS (BLOCK (ALT 'AS') (ALT 'as'))) (RULE SYM_FROM (BLOCK (ALT 'FROM'))) (RULE SYM_WHERE (BLOCK (ALT 'WHERE'))) (RULE SYM_ORDER (BLOCK (ALT 'ORDER'))) (RULE SYM_BY (BLOCK (ALT 'BY') (ALT 'by'))) (RULE SYM_DESC (BLOCK (ALT 'DESC'))) (RULE SYM_DESCENDING (BLOCK (ALT 'DESCENDING'))) (RULE SYM_ASC (BLOCK (ALT 'ASC'))) (RULE SYM_ASCENDING (BLOCK (ALT 'ASCENDING'))) (RULE SYM_LIMIT (BLOCK (ALT 'LIMIT'))) (RULE SYM_OFFSET (BLOCK (ALT 'OFFSET'))) (RULE SYM_DISTINCT (BLOCK (ALT 'DISTINCT'))) (RULE SYM_VERSION (BLOCK (ALT 'VERSION'))) (RULE SYM_LATEST_VERSION (BLOCK (ALT 'LATEST_VERSION'))) (RULE SYM_ALL_VERSIONS (BLOCK (ALT 'ALL_VERSIONS'))) (RULE SYM_NULL (BLOCK (ALT 'NULL'))) (RULE SYM_TOP (BLOCK (ALT 'TOP'))) (RULE SYM_FORWARD (BLOCK (ALT 'FORWARD'))) (RULE SYM_BACKWARD (BLOCK (ALT 'BACKWARD'))) (RULE SYM_CONTAINS (BLOCK (ALT 'CONTAINS'))) (RULE SYM_AND (BLOCK (ALT 'AND') (ALT 'and'))) (RULE SYM_OR (BLOCK (ALT 'OR') (ALT 'or'))) (RULE SYM_NOT (BLOCK (ALT 'NOT') (ALT 'not'))) (RULE SYM_EXISTS (BLOCK (ALT 'EXISTS') (ALT 'exists'))) (RULE SYM_LIKE (BLOCK (ALT 'LIKE') (ALT 'like'))) (RULE SYM_MATCHES (BLOCK (ALT 'matches'))) (RULE SYM_LENGTH (BLOCK (ALT 'LENGTH'))) (RULE SYM_POSITION (BLOCK (ALT 'POSITION'))) (RULE SYM_SUBSTRING (BLOCK (ALT 'SUBSTRING'))) (RULE SYM_CONCAT (BLOCK (ALT 'CONCAT'))) (RULE SYM_CONCAT_WS (BLOCK (ALT 'CONCAT_WS'))) (RULE SYM_ABS (BLOCK (ALT 'ABS'))) (RULE SYM_MOD (BLOCK (ALT 'MOD'))) (RULE SYM_CEIL (BLOCK (ALT 'CEIL'))) (RULE SYM_FLOOR (BLOCK (ALT 'FLOOR'))) (RULE SYM_ROUND (BLOCK (ALT 'ROUND'))) (RULE SYM_CURRENT_DATE (BLOCK (ALT 'CURRENT_DATE') (ALT 'current_date'))) (RULE SYM_CURRENT_TIME (BLOCK (ALT 'CURRENT_TIME') (ALT 'current_time'))) (RULE SYM_CURRENT_DATE_TIME (BLOCK (ALT 'CURRENT_DATE_TIME') (ALT 'current_date_time'))) (RULE SYM_NOW (BLOCK (ALT 'NOW'))) (RULE SYM_CURRENT_TIMEZONE (BLOCK (ALT 'CURRENT_TIMEZONE') (ALT 'current_timezone'))) (RULE SYM_COUNT (BLOCK (ALT 'COUNT') (ALT 'count'))) (RULE SYM_MIN (BLOCK (ALT 'MIN') (ALT 'min'))) (RULE SYM_MAX (BLOCK (ALT 'MAX') (ALT 'max'))) (RULE SYM_SUM (BLOCK (ALT 'SUM') (ALT 'sum'))) (RULE SYM_AVG (BLOCK (ALT 'AVG') (ALT 'avg'))) (RULE SYM_TERMINOLOGY (BLOCK (ALT 'TERMINOLOGY'))) (RULE CONTAINED_REGEX (BLOCK (ALT '{' (* (BLOCK (ALT WS))) SLASH_REGEX (* (BLOCK (ALT WS))) (? (BLOCK (ALT ';' (* (BLOCK (ALT WS))) STRING))) (* (BLOCK (ALT WS))) '}'))) (RULE SLASH_REGEX (RULEMODIFIERS fragment) (BLOCK (ALT '/' (+ (BLOCK (ALT SLASH_REGEX_CHAR))) '/'))) (RULE SLASH_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET [/\n\r]))) (ALT ESCAPE_SEQ) (ALT '\\/'))) (RULE AQL_URI (BLOCK (ALT URI))) (RULE BOOLEAN (BLOCK (ALT SYM_TRUE) (ALT SYM_FALSE))) (RULE DATE_STRING (BLOCK (ALT '\'' DATE_VALUE '\'') (ALT '"' DATE_VALUE '"'))) (RULE DATE_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_DATE_EXTENDED) (ALT ISO8601_DATE_COMPACT))) (RULE TIME_STRING (BLOCK (ALT '\'' TIME_VALUE '\'') (ALT '"' TIME_VALUE '"'))) (RULE TIME_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_TIME_EXTENDED) (ALT ISO8601_TIME_COMPACT))) (RULE DATE_TIME_STRING (BLOCK (ALT '\'' DATE_TIME_VALUE '\'') (ALT '"' DATE_TIME_VALUE '"'))) (RULE DATE_TIME_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_DATE_TIME_EXTENDED) (ALT ISO8601_DATE_TIME_COMPACT))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT ESCAPE_SEQ) (ALT UTF8CHAR) (ALT OCTAL_ESC) (ALT (~ (SET '\\' '\''))))) '\'') (ALT '"' (* (BLOCK (ALT ESCAPE_SEQ) (ALT UTF8CHAR) (ALT OCTAL_ESC) (ALT (~ (SET '\\' '"'))))) '"'))) (RULE QUALIFIED_TERM_CODE (BLOCK (ALT COMPACT_QUALIFIED_TERM_CODE))) (RULE SYM_NE (BLOCK (ALT '/=') (ALT '!=') (ALT 'â‰ '))) (RULE SYM_EQ (BLOCK (ALT '='))) (RULE SYM_DOUBLE_DASH (BLOCK (ALT '--'))) (RULE SYM_SINGLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '\''))) (RULE SYM_DOUBLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '"'))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT [aA]))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT [bB]))) (RULE C (RULEMODIFIERS fragment) (BLOCK (ALT [cC]))) (RULE D (RULEMODIFIERS fragment) (BLOCK (ALT [dD]))) (RULE E (RULEMODIFIERS fragment) (BLOCK (ALT [eE]))) (RULE F (RULEMODIFIERS fragment) (BLOCK (ALT [fF]))) (RULE G (RULEMODIFIERS fragment) (BLOCK (ALT [gG]))) (RULE H (RULEMODIFIERS fragment) (BLOCK (ALT [hH]))) (RULE I (RULEMODIFIERS fragment) (BLOCK (ALT [iI]))) (RULE J (RULEMODIFIERS fragment) (BLOCK (ALT [jJ]))) (RULE K (RULEMODIFIERS fragment) (BLOCK (ALT [kK]))) (RULE L (RULEMODIFIERS fragment) (BLOCK (ALT [lL]))) (RULE M (RULEMODIFIERS fragment) (BLOCK (ALT [mM]))) (RULE N (RULEMODIFIERS fragment) (BLOCK (ALT [nN]))) (RULE O (RULEMODIFIERS fragment) (BLOCK (ALT [oO]))) (RULE P (RULEMODIFIERS fragment) (BLOCK (ALT [pP]))) (RULE Q (RULEMODIFIERS fragment) (BLOCK (ALT [qQ]))) (RULE R (RULEMODIFIERS fragment) (BLOCK (ALT [rR]))) (RULE S (RULEMODIFIERS fragment) (BLOCK (ALT [sS]))) (RULE T (RULEMODIFIERS fragment) (BLOCK (ALT [tT]))) (RULE U (RULEMODIFIERS fragment) (BLOCK (ALT [uU]))) (RULE V (RULEMODIFIERS fragment) (BLOCK (ALT [vV]))) (RULE W (RULEMODIFIERS fragment) (BLOCK (ALT [wW]))) (RULE X (RULEMODIFIERS fragment) (BLOCK (ALT [xX]))) (RULE Y (RULEMODIFIERS fragment) (BLOCK (ALT [yY]))) (RULE Z (RULEMODIFIERS fragment) (BLOCK (ALT [zZ])))))
2025-02-15 15:52:44:078 grammar LogManager.java:25 imported channels: [COMMENT]
2025-02-15 15:52:44:078 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported mode: (mode ODIN14_BLOCK (RULE ODIN14_BLOCK_POST (BLOCK (LEXER_ALT_ACTION (ALT WS '}' (? (BLOCK (ALT WS))) EOL { setText ("}"); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RCURLY)))) (RULE ODIN14_BLOCK_POST2 (BLOCK (LEXER_ALT_ACTION (ALT WS UC_ID { setText (getText().trim()); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type UC_ID)))) (RULE ODIN14_BLOCK_LINE (BLOCK (ALT WS LC_ID WS (+ (BLOCK (ALT NON_EOL))) EOL))) (RULE ODIN14_BLOCK_LINE2 (BLOCK (LEXER_ALT_ACTION (ALT WS [<[] (? (BLOCK (ALT WS))) (+ (BLOCK (ALT NON_EOL))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE)))) (RULE ODIN14_BLOCK_LINE3 (BLOCK (LEXER_ALT_ACTION (ALT WS '>' (? (BLOCK (ALT WS))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE)))) (RULE WS_ODIN (BLOCK (LEXER_ALT_ACTION (ALT WS EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE NON_EOL (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET '\n'))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_POST (BLOCK (LEXER_ALT_ACTION (ALT WS '}' (? (BLOCK (ALT WS))) EOL { setText ("}"); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RCURLY))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_POST2 (BLOCK (LEXER_ALT_ACTION (ALT WS UC_ID { setText (getText().trim()); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type UC_ID))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_LINE (BLOCK (ALT WS LC_ID WS (+ (BLOCK (ALT NON_EOL))) EOL)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_LINE2 (BLOCK (LEXER_ALT_ACTION (ALT WS [<[] (? (BLOCK (ALT WS))) (+ (BLOCK (ALT NON_EOL))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_LINE3 (BLOCK (LEXER_ALT_ACTION (ALT WS '>' (? (BLOCK (ALT WS))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE WS_ODIN (BLOCK (LEXER_ALT_ACTION (ALT WS EOL) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE NON_EOL (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET '\n')))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE CMT_LINE (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE EOL (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r])))) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_EXISTENCE (BLOCK (ALT 'existence')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_OCCURRENCES (BLOCK (ALT 'occurrences')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_CARDINALITY (BLOCK (ALT 'cardinality')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_ORDERED (BLOCK (ALT 'ordered')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_UNORDERED (BLOCK (ALT 'unordered')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_UNIQUE (BLOCK (ALT 'unique')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_USE_NODE (BLOCK (ALT 'use_node')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_USE_ARCHETYPE (BLOCK (ALT 'use_archetype')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_ALLOW_ARCHETYPE (BLOCK (ALT 'allow_archetype')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_INCLUDE (BLOCK (ALT 'include')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_EXCLUDE (BLOCK (ALT 'exclude')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_CLOSED (BLOCK (ALT 'closed')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_MATCHES (BLOCK (ALT 'matches') (ALT 'is_in') (ALT 'âˆˆ')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_ASTERISK (BLOCK (ALT '*')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_LE (BLOCK (ALT '<=') (ALT 'â‰¤')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_GE (BLOCK (ALT '>=') (ALT 'â‰¥')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_GT (BLOCK (ALT '>')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_LT (BLOCK (ALT '<')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_SLASH (BLOCK (ALT '/')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_IVL_DELIM (BLOCK (ALT '|')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE SYM_IVL_SEP (BLOCK (ALT '..')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_START (BLOCK (LEXER_ALT_ACTION (ALT UC_ID (? (BLOCK (ALT WS))) '<' (? (BLOCK (ALT WS))) EOL {
        String origText = getText();
        String typeId = origText.substring (0, origText.indexOf("<")-1);
        typeId.trim();
        setText ("(" + typeId + ") <");
    }) (LEXER_ACTION_CALL mode ODIN14_BLOCK))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_POST (BLOCK (LEXER_ALT_ACTION (ALT WS '}' (? (BLOCK (ALT WS))) EOL { setText ("}"); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RCURLY))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_POST2 (BLOCK (LEXER_ALT_ACTION (ALT WS UC_ID { setText (getText().trim()); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type UC_ID))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_LINE (BLOCK (ALT WS LC_ID WS (+ (BLOCK (ALT NON_EOL))) EOL)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_LINE2 (BLOCK (LEXER_ALT_ACTION (ALT WS [<[] (? (BLOCK (ALT WS))) (+ (BLOCK (ALT NON_EOL))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ODIN14_BLOCK_LINE3 (BLOCK (LEXER_ALT_ACTION (ALT WS '>' (? (BLOCK (ALT WS))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE WS_ODIN (BLOCK (LEXER_ALT_ACTION (ALT WS EOL) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE NON_EOL (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET '\n')))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE UID (RULEMODIFIERS fragment) (BLOCK (ALT UUID) (ALT INTERNET_ID) (ALT ISO_OID)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE INTERNET_ID (RULEMODIFIERS fragment) (BLOCK (ALT LABEL (+ (BLOCK (ALT '.' LABEL))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ISO_OID (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (+ (BLOCK (ALT '.' NUMBER))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE HIER_OBJECT_HRID (RULEMODIFIERS fragment) (BLOCK (ALT UID_BASED_ID)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE UID_BASED_ID (RULEMODIFIERS fragment) (BLOCK (ALT UID (? (BLOCK (ALT '::' UID_EXTENSION))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE UID_EXTENSION (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_UNRESERVED) (ALT URI_RESERVED))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE OBJECT_VERSION_ID (BLOCK (ALT UID '::' UID '::' VERSION_TREE_ID)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE VERSION_TREE_ID (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (? (BLOCK (ALT '.' NUMBER '.' NUMBER))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ARCHETYPE_HRID (BLOCK (ALT FULLY_QUALIFIED_RM_ENTITY '.v' VERSION_ID)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ARCHETYPE_REF (BLOCK (ALT FULLY_QUALIFIED_RM_ENTITY '.v' VERSION_REF)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE VERSION_ID (BLOCK (ALT NUMBER '.' NUMBER '.' NUMBER (? (BLOCK (ALT VERSION_MOD))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE FULLY_QUALIFIED_RM_ENTITY (BLOCK (ALT (? (BLOCK (ALT NAMESPACE '::'))) QUALIFIED_RM_ENTITY)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE QUALIFIED_RM_ENTITY (RULEMODIFIERS fragment) (BLOCK (ALT WORD_ID '-' WORD_ID '-' WORD_ID '.' NAME_ID)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE VERSION_REF (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (? (BLOCK (ALT '.' NUMBER (? (BLOCK (ALT '.' NUMBER VERSION_MOD)))))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE VERSION_MOD (RULEMODIFIERS fragment) (BLOCK (ALT (? (BLOCK (ALT VERSION_PREREL))) (? (BLOCK (ALT VERSION_BUILD))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE VERSION_PREREL (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT '-rc') (ALT '-alpha') (ALT '-beta')) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT)))))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE VERSION_BUILD (RULEMODIFIERS fragment) (BLOCK (ALT '+' (+ (BLOCK (ALT DIGIT))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE WORD_ID (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR (* (BLOCK (ALT ALPHANUM_US_CHAR))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE NAME_ID (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR (* (BLOCK (ALT ALPHANUM_US_HYP_CHAR))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE NAMESPACE (RULEMODIFIERS fragment) (BLOCK (ALT LABEL (* (BLOCK (ALT '.' LABEL))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE LABEL (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR (* (BLOCK (ALT ALPHANUM_CHAR) (ALT '_') (ALT '-') (ALT PCT_ENCODED))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE PCT_ENCODED (RULEMODIFIERS fragment) (BLOCK (ALT '%' HEX_DIGIT HEX_DIGIT)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE TERMINOLOGY_ID (RULEMODIFIERS fragment) (BLOCK (ALT NAME_ID) (ALT URI)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE QUALIFIED_TERM_CODE_ID (BLOCK (ALT '#' COMPACT_QUALIFIED_TERM_CODE)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE LOCAL_TERM_CODE_ID (BLOCK (ALT '#' TERM_CODE_STRING)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE QUALIFIED_TERM_CODE_REF (BLOCK (ALT '[' COMPACT_QUALIFIED_TERM_CODE ']')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE COMPACT_QUALIFIED_TERM_CODE (RULEMODIFIERS fragment) (BLOCK (ALT TERM_CODE_STRING (? (BLOCK (ALT '(' TERM_CODE_STRING ')'))) '::' TERM_CODE_STRING (? (BLOCK (ALT '|' (+ (BLOCK (ALT .))) '|'))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE TERM_CODE_STRING (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT TERM_CODE_CHAR))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE TERM_CODE_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_US_HYP_CHAR) (ALT '.')))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ROOT_ID_CODE (BLOCK (ALT 'id1' (* (BLOCK (ALT '.1'))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ID_CODE (BLOCK (ALT 'id' CODE_STR)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE AT_CODE (BLOCK (ALT 'at' CODE_STR)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE AC_CODE (BLOCK (ALT 'ac' CODE_STR)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE CODE_STR (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (* (BLOCK (ALT '.' NUMBER))))))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ADL14_AT_CODE (BLOCK (ALT 'at' ADL14_CODE_STR)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ADL14_AC_CODE (BLOCK (ALT 'ac' ADL14_CODE_STR)))
2025-02-15 15:52:44:079 grammar LogManager.java:25 imported rule: (RULE ADL14_CODE_STR (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (* (BLOCK (ALT '.' NUMBER))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DATE_AUGMENTED (BLOCK (ALT ISO8601_DATE_EXTENDED) (ALT YEAR '-' MONTH '-' UNKNOWN_DT) (ALT YEAR '-' UNKNOWN_DT '-' UNKNOWN_DT)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_TIME_AUGMENTED (BLOCK (ALT ISO8601_TIME_EXTENDED) (ALT (BLOCK (ALT (BLOCK (ALT HOUR ':' MINUTE ':' UNKNOWN_DT) (ALT HOUR ':' UNKNOWN_DT ':' UNKNOWN_DT)) (? (BLOCK (ALT TIMEZONE))))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DATE_TIME_AUGMENTED (BLOCK (ALT ISO8601_DATE_TIME_EXTENDED) (ALT (BLOCK (ALT (BLOCK (ALT YEAR '-' MONTH '-' DAY 'T' HOUR ':' MINUTE ':' UNKNOWN_DT) (ALT YEAR '-' MONTH '-' DAY 'T' HOUR ':' UNKNOWN_DT ':' UNKNOWN_DT)) (? (BLOCK (ALT TIMEZONE))))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE UNKNOWN_DT (RULEMODIFIERS fragment) (BLOCK (ALT '??')))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DATE_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT YEAR '-' MONTH (? (BLOCK (ALT '-' DAY)))) (ALT YEAR '-' MONTH)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_TIME_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT HOUR ':' MINUTE (? (BLOCK (ALT ':' SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT))))))))) (? (BLOCK (ALT TIMEZONE))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DATE_TIME_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT YEAR '-' MONTH '-' DAY 'T' HOUR (? (BLOCK (ALT ':' MINUTE (? (BLOCK (ALT ':' SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))))))))) (? (BLOCK (ALT TIMEZONE))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DATE_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT YEAR MONTH (? (BLOCK (ALT DAY))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_TIME_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT HOUR MINUTE (? (BLOCK (ALT SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT))))))))) (? (BLOCK (ALT TIMEZONE))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DATE_TIME_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT YEAR MONTH DAY 'T' HOUR (? (BLOCK (ALT MINUTE (? (BLOCK (ALT SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))))))))) (? (BLOCK (ALT TIMEZONE))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE TIMEZONE (RULEMODIFIERS fragment) (BLOCK (ALT 'Z') (ALT (BLOCK (ALT '+') (ALT '-')) HOUR_MIN)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE YEAR (RULEMODIFIERS fragment) (BLOCK (ALT [0-9] [0-9] [0-9] [0-9])))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE MONTH (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT [0] [1-9]) (ALT [1] [0-2])))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE DAY (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT [0] [1-9]) (ALT [12] [0-9]) (ALT [3] [0-1])))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE HOUR (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT [01]))) [0-9]) (ALT [2] [0-3])))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE MINUTE (RULEMODIFIERS fragment) (BLOCK (ALT [0-5] [0-9])))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE HOUR_MIN (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT [01]))) [0-9]) (ALT [2] [0-3])) [0-5] [0-9])))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE SECOND (RULEMODIFIERS fragment) (BLOCK (ALT [0-5] [0-9])))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE SECOND_DEC_SEP (RULEMODIFIERS fragment) (BLOCK (ALT '.') (ALT ',')))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE ISO8601_DURATION (BLOCK (ALT (? (BLOCK (ALT '-'))) 'P' (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [yY]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [mM]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [wW]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [dD]))) (? (BLOCK (ALT 'T' (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [hH]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [mM]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))) [sS])))))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI (RULEMODIFIERS fragment) (BLOCK (ALT URI_SCHEME ':' URI_HIER_PART (? (BLOCK (ALT '?' URI_QUERY))) (? (BLOCK (ALT '#' URI_FRAGMENT))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_HIER_PART (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT '//' URI_AUTHORITY)) URI_PATH_ABEMPTY) (ALT URI_PATH_ABSOLUTE) (ALT URI_PATH_ROOTLESS) (ALT URI_PATH_EMPTY)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_SCHEME (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR (* (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT) (ALT '+') (ALT '-') (ALT '.'))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_AUTHORITY (RULEMODIFIERS fragment) (BLOCK (ALT (? (BLOCK (ALT URI_USERINFO '@'))) URI_HOST (? (BLOCK (ALT ':' URI_PORT))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_USERINFO (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT ':'))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_HOST (RULEMODIFIERS fragment) (BLOCK (ALT URI_IP_LITERAL) (ALT URI_IPV4_ADDRESS) (ALT URI_REG_NAME)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PORT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT DIGIT))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_IP_LITERAL (RULEMODIFIERS fragment) (BLOCK (ALT '[' URI_IPV6_LITERAL ']')))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_IPV4_ADDRESS (RULEMODIFIERS fragment) (BLOCK (ALT URI_DEC_OCTET '.' URI_DEC_OCTET '.' URI_DEC_OCTET '.' URI_DEC_OCTET)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_IPV6_LITERAL (RULEMODIFIERS fragment) (BLOCK (ALT HEX_QUAD (* (BLOCK (ALT ':' HEX_QUAD))) '::' HEX_QUAD (* (BLOCK (ALT ':' HEX_QUAD))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_DEC_OCTET (RULEMODIFIERS fragment) (BLOCK (ALT DIGIT) (ALT [1-9] DIGIT) (ALT '1' DIGIT DIGIT) (ALT '2' [0-4] DIGIT) (ALT '25' [0-5])))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_REG_NAME (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE HEX_QUAD (RULEMODIFIERS fragment) (BLOCK (ALT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PATH_ABEMPTY (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT '/' URI_SEGMENT))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PATH_ABSOLUTE (RULEMODIFIERS fragment) (BLOCK (ALT '/' (? (BLOCK (ALT URI_SEGMENT_NZ (* (BLOCK (ALT '/' URI_SEGMENT)))))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PATH_NOSCHEME (RULEMODIFIERS fragment) (BLOCK (ALT URI_SEGMENT_NZ_NC (* (BLOCK (ALT '/' URI_SEGMENT))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PATH_ROOTLESS (RULEMODIFIERS fragment) (BLOCK (ALT URI_SEGMENT_NZ (* (BLOCK (ALT '/' URI_SEGMENT))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PATH_EMPTY (RULEMODIFIERS fragment) (BLOCK (ALT EPSILON)))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_SEGMENT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_SEGMENT_NZ (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_PCHAR))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_SEGMENT_NZ_NC (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT '@'))))))
2025-02-15 15:52:44:080 grammar LogManager.java:25 imported rule: (RULE URI_PCHAR (RULEMODIFIERS fragment) (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT ':') (ALT '@')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_QUERY (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR) (ALT '/') (ALT '?'))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_FRAGMENT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR) (ALT '/') (ALT '?'))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_PCT_ENCODED (RULEMODIFIERS fragment) (BLOCK (ALT '%' HEX_DIGIT HEX_DIGIT)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_UNRESERVED (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT) (ALT '-') (ALT '.') (ALT '_') (ALT '~')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_RESERVED (RULEMODIFIERS fragment) (BLOCK (ALT URI_GEN_DELIMS) (ALT URI_SUB_DELIMS)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_GEN_DELIMS (RULEMODIFIERS fragment) (BLOCK (ALT [:/?#[\]@])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE URI_SUB_DELIMS (RULEMODIFIERS fragment) (BLOCK (ALT [!$&'()*+,;=])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_TRUE (BLOCK (ALT [Tt] [Rr] [Uu] [Ee])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_FALSE (BLOCK (ALT [Ff] [Aa] [Ll] [Ss] [Ee])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE GUID (BLOCK (ALT (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE UUID (BLOCK (ALT GUID)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE NUMBER (RULEMODIFIERS fragment) (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT [0-9]))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT DIGIT))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) '.' (+ (BLOCK (ALT DIGIT))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE REAL_PERCENT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT)))))) '%')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SCI_INTEGER (BLOCK (ALT INTEGER (BLOCK (ALT E_SUFFIX) (ALT P10_SUFFIX)))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SCI_REAL (BLOCK (ALT REAL (BLOCK (ALT E_SUFFIX) (ALT P10_SUFFIX)))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE E_SUFFIX (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT DIGIT))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE P10_SUFFIX (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT [ ]))) 'x' (* (BLOCK (ALT [ ]))) '10' (* (BLOCK (ALT [ ]))) '^' (* (BLOCK (ALT [ ]))) (+ (BLOCK (ALT DIGIT))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT STRING_CHAR))) '"')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE STRING_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ["\\]))) (ALT ESCAPE_SEQ) (ALT UTF8CHAR)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CHARACTER (BLOCK (ALT '\'' CHAR '\'')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\r\n]))) (ALT ESCAPE_SEQ) (ALT UTF8CHAR)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ESCAPE_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"?abfnrtv\\])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ALPHANUM_US_HYP_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_US_CHAR) (ALT '-')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ALPHANUM_US_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR) (ALT '_')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ALPHANUM_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ALPHA_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ALPHA_UCHAR (RULEMODIFIERS fragment) (BLOCK (ALT [A-Z])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ALPHA_LCHAR (RULEMODIFIERS fragment) (BLOCK (ALT [a-z])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE UTF8CHAR (RULEMODIFIERS fragment) (BLOCK (ALT '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE HEX_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE OCTAL_ESC (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [0-3] OCTAL_DIGIT OCTAL_DIGIT) (ALT '\\' OCTAL_DIGIT OCTAL_DIGIT) (ALT '\\' OCTAL_DIGIT)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE OCTAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7])))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_DOT (BLOCK (ALT '.')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_COMMA (BLOCK (ALT ',')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_SEMI_COLON (BLOCK (ALT ';')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_LPAREN (BLOCK (ALT '(')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_RPAREN (BLOCK (ALT ')')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_LBRACKET (BLOCK (ALT '[')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_RBRACKET (BLOCK (ALT ']')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_LCURLY (BLOCK (ALT '{')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SYM_RCURLY (BLOCK (ALT '}')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported channels: [COMMENT]
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported mode: (mode C_LOCAL_TERM_CODE (RULE C_TERM_CODE_END (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET)))) (RULE ADL14_AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT ADL14_AT_CODE) (LEXER_ACTION_CALL type ADL14_AT_CODE)))) (RULE AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT AT_CODE) (LEXER_ACTION_CALL type AT_CODE)))) (RULE COMMA_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA)))) (RULE SEMI_COLON_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON)))) (RULE CMT_LINE_L (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL_L (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WS_L (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN)))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_TERM_CODE_END (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ADL14_AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT ADL14_AT_CODE) (LEXER_ACTION_CALL type ADL14_AT_CODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT AT_CODE) (LEXER_ACTION_CALL type AT_CODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE COMMA_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SEMI_COLON_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CMT_LINE_L (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE EOL_L (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE WS_L (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported mode: (mode C_EXTERNAL_TERM_CODE (RULE C_TERM_CODE_END_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET)))) (RULE C_EXTERNAL_TERM_CODE_STRING (BLOCK (ALT TERM_CODE_STRING))) (RULE COMMA_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA)))) (RULE SEMI_COLON_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON)))) (RULE CMT_LINE_X (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT WS))) '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL_X (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WS_X (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN)))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_TERM_CODE_END_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_EXTERNAL_TERM_CODE_STRING (BLOCK (ALT TERM_CODE_STRING)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE COMMA_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SEMI_COLON_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CMT_LINE_X (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT WS))) '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE EOL_X (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE WS_X (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_LOCAL_TERM_CODE_START (BLOCK (LEXER_ALT_ACTION (ALT '[' (? (BLOCK (ALT WS))) 'local' (? (BLOCK (ALT WS))) '::' (? (BLOCK (ALT WS))) (? (BLOCK (ALT EOL)))) (LEXER_ACTION_CALL mode C_LOCAL_TERM_CODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_EXTERNAL_TERM_CODE_START (BLOCK (LEXER_ALT_ACTION (ALT '[' (? (BLOCK (ALT WS))) TERM_CODE_STRING (? (BLOCK (ALT WS))) '::' (? (BLOCK (ALT WS))) (? (BLOCK (ALT EOL)))) (LEXER_ACTION_CALL mode C_EXTERNAL_TERM_CODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE TERM_CODE_STRING (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT TERM_CODE_CHAR))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE EOL (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_TERM_CODE_END (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE ADL14_AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT ADL14_AT_CODE) (LEXER_ACTION_CALL type ADL14_AT_CODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT AT_CODE) (LEXER_ACTION_CALL type AT_CODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE COMMA_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SEMI_COLON_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CMT_LINE_L (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE EOL_L (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE WS_L (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_TERM_CODE_END_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE C_EXTERNAL_TERM_CODE_STRING (BLOCK (ALT TERM_CODE_STRING)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE COMMA_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SEMI_COLON_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CMT_LINE_X (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT WS))) '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE EOL_X (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE WS_X (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported mode: (mode REGEX_CARET (RULE REGEX_END_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE REGEX_SEMI_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE DELIMITED_REGEX (BLOCK (ALT (+ (BLOCK (ALT CARET_REGEX_CHAR))) { setText ("^" + getText() + "^"); }))) (RULE CARET_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\^') (ALT (~ (SET [^\n\r]))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE REGEX_END_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE REGEX_SEMI_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE DELIMITED_REGEX (BLOCK (ALT (+ (BLOCK (ALT CARET_REGEX_CHAR))) { setText ("^" + getText() + "^"); })))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE CARET_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\^') (ALT (~ (SET [^\n\r])))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported mode: (mode REGEX_SLASH (RULE REGEX_END_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE REGEX_SEMI_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE DELIMITED_REGEX_SLASH (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT SLASH_REGEX_CHAR))) { setText ("/" + getText() + "/"); }) (LEXER_ACTION_CALL type DELIMITED_REGEX)))) (RULE SLASH_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\/') (ALT (~ (SET [/\n\r]))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE REGEX_END_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE REGEX_SEMI_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE DELIMITED_REGEX_SLASH (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT SLASH_REGEX_CHAR))) { setText ("/" + getText() + "/"); }) (LEXER_ACTION_CALL type DELIMITED_REGEX))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SLASH_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\/') (ALT (~ (SET [/\n\r])))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE DATE_CONSTRAINT_PATTERN (BLOCK (ALT YEAR_PATTERN '-' MONTH_PATTERN '-' DAY_PATTERN)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE TIME_CONSTRAINT_PATTERN (BLOCK (ALT HOUR_PATTERN ':' MINUTE_PATTERN ':' SECOND_PATTERN (? (BLOCK (ALT TZ_PATTERN))))))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE DATE_TIME_CONSTRAINT_PATTERN (BLOCK (ALT DATE_CONSTRAINT_PATTERN 'T' TIME_CONSTRAINT_PATTERN)))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE YEAR_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'yyyy') (ALT 'YYYY') (ALT 'yyy') (ALT 'YYY')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE MONTH_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'mm') (ALT 'MM') (ALT '??') (ALT 'XX') (ALT 'xx')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE DAY_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'dd') (ALT 'DD') (ALT '??') (ALT 'XX') (ALT 'xx')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE HOUR_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'hh') (ALT 'HH') (ALT '??') (ALT 'XX') (ALT 'xx')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE MINUTE_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'mm') (ALT 'MM') (ALT '??') (ALT 'XX') (ALT 'xx')))
2025-02-15 15:52:44:081 grammar LogManager.java:25 imported rule: (RULE SECOND_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'ss') (ALT 'SS') (ALT '??') (ALT 'XX') (ALT 'xx')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE TZ_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'Â±' (BLOCK (ALT 'hh') (ALT 'HH')) (? (BLOCK (ALT (? (BLOCK (ALT ':'))) (BLOCK (ALT 'mm') (ALT 'MM')))))) (ALT 'Z')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE DURATION_CONSTRAINT_PATTERN (BLOCK (ALT 'P' (? (BLOCK (ALT [yY]))) (? (BLOCK (ALT [mM]))) (? (BLOCK (ALT [Ww]))) (? (BLOCK (ALT [dD]))) (? (BLOCK (ALT 'T' (? (BLOCK (ALT [hH]))) (? (BLOCK (ALT [mM]))) (? (BLOCK (ALT [sS])))))))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_SLASH (BLOCK (ALT '/')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE REGEX_START_CARET (BLOCK (LEXER_ALT_ACTION (ALT '{^') (LEXER_ACTION_CALL type SYM_LCURLY) (LEXER_ACTION_CALL mode REGEX_CARET))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE REGEX_START_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '{/') (LEXER_ACTION_CALL type SYM_LCURLY) (LEXER_ACTION_CALL mode REGEX_SLASH))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE REGEX_END_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE REGEX_SEMI_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE DELIMITED_REGEX (BLOCK (ALT (+ (BLOCK (ALT CARET_REGEX_CHAR))) { setText ("^" + getText() + "^"); })))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE CARET_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\^') (ALT (~ (SET [^\n\r])))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE REGEX_END_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE REGEX_SEMI_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE DELIMITED_REGEX_SLASH (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT SLASH_REGEX_CHAR))) { setText ("/" + getText() + "/"); }) (LEXER_ACTION_CALL type DELIMITED_REGEX))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SLASH_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\/') (ALT (~ (SET [/\n\r])))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r])))) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_NAMESPACE_SEP (BLOCK (ALT '::')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LIST_CONTINUE (BLOCK (ALT '...')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_COMMA (BLOCK (ALT ',')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LE (BLOCK (ALT '<=') (ALT 'â‰¤')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_GE (BLOCK (ALT '>=') (ALT 'â‰¥')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_GT (BLOCK (ALT '>')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LT (BLOCK (ALT '<')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_PLUS_OR_MINUS (BLOCK (ALT '+/-') (ALT 'Â±')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_PLUS (BLOCK (ALT '+')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_MINUS (BLOCK (ALT '-')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_PERCENT (BLOCK (ALT '%')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_CARET (BLOCK (ALT '^')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_IVL_DELIM (BLOCK (ALT '|')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_IVL_SEP (BLOCK (ALT '..')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE UC_ID (BLOCK (ALT ALPHA_UCHAR (* (BLOCK (ALT ALPHANUM_US_CHAR))))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE LC_ID (BLOCK (ALT (? (BLOCK (ALT '_'))) ALPHA_LCHAR (* (BLOCK (ALT ALPHANUM_US_CHAR))))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported channels: [COMMENT]
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE CMT_LINE (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE EOL (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r])))) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE ODIN_URI (BLOCK (ALT URI)))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LIST_CONTINUE (BLOCK (ALT '...')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_EQ (BLOCK (ALT '=')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_SLASH (BLOCK (ALT '/')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r])))) (LEXER_ACTION_CALL channel HIDDEN))))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_NAMESPACE_SEP (BLOCK (ALT '::')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LIST_CONTINUE (BLOCK (ALT '...')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_COMMA (BLOCK (ALT ',')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LE (BLOCK (ALT '<=') (ALT 'â‰¤')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_GE (BLOCK (ALT '>=') (ALT 'â‰¥')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_GT (BLOCK (ALT '>')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_LT (BLOCK (ALT '<')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_PLUS_OR_MINUS (BLOCK (ALT '+/-') (ALT 'Â±')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_PLUS (BLOCK (ALT '+')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_MINUS (BLOCK (ALT '-')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_PERCENT (BLOCK (ALT '%')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_CARET (BLOCK (ALT '^')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_IVL_DELIM (BLOCK (ALT '|')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE SYM_IVL_SEP (BLOCK (ALT '..')))
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:082 grammar LogManager.java:25 imported rule: (RULE PARAMETER (BLOCK (ALT '$' ALPHA_CHAR (* (BLOCK (ALT ALPHANUM_US_CHAR))))))
2025-02-15 15:52:44:083 grammar LogManager.java:25 Grammar: (LEXER_GRAMMAR AqlLexer (import Cadl14Lexer OpenehrPatterns BaseLexer AqlGeneral GeneralLexer) (channels { COMMENT) (RULES (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE UNICODE_BOM (BLOCK (LEXER_ALT_ACTION (ALT (BLOCK (ALT '\uEFBBBF') (ALT '\uFEFF') (ALT '\u0000FEFF'))) skip))) (RULE CMT_LINE (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE SYM_SELECT (BLOCK (ALT 'SELECT'))) (RULE SYM_AS (BLOCK (ALT 'AS') (ALT 'as'))) (RULE SYM_FROM (BLOCK (ALT 'FROM'))) (RULE SYM_WHERE (BLOCK (ALT 'WHERE'))) (RULE SYM_ORDER (BLOCK (ALT 'ORDER'))) (RULE SYM_BY (BLOCK (ALT 'BY') (ALT 'by'))) (RULE SYM_DESC (BLOCK (ALT 'DESC'))) (RULE SYM_DESCENDING (BLOCK (ALT 'DESCENDING'))) (RULE SYM_ASC (BLOCK (ALT 'ASC'))) (RULE SYM_ASCENDING (BLOCK (ALT 'ASCENDING'))) (RULE SYM_LIMIT (BLOCK (ALT 'LIMIT'))) (RULE SYM_OFFSET (BLOCK (ALT 'OFFSET'))) (RULE SYM_DISTINCT (BLOCK (ALT 'DISTINCT'))) (RULE SYM_VERSION (BLOCK (ALT 'VERSION'))) (RULE SYM_LATEST_VERSION (BLOCK (ALT 'LATEST_VERSION'))) (RULE SYM_ALL_VERSIONS (BLOCK (ALT 'ALL_VERSIONS'))) (RULE SYM_NULL (BLOCK (ALT 'NULL'))) (RULE SYM_TOP (BLOCK (ALT 'TOP'))) (RULE SYM_FORWARD (BLOCK (ALT 'FORWARD'))) (RULE SYM_BACKWARD (BLOCK (ALT 'BACKWARD'))) (RULE SYM_CONTAINS (BLOCK (ALT 'CONTAINS'))) (RULE SYM_AND (BLOCK (ALT 'AND') (ALT 'and'))) (RULE SYM_OR (BLOCK (ALT 'OR') (ALT 'or'))) (RULE SYM_NOT (BLOCK (ALT 'NOT') (ALT 'not'))) (RULE SYM_EXISTS (BLOCK (ALT 'EXISTS') (ALT 'exists'))) (RULE SYM_LIKE (BLOCK (ALT 'LIKE') (ALT 'like'))) (RULE SYM_MATCHES (BLOCK (ALT 'matches'))) (RULE SYM_LENGTH (BLOCK (ALT 'LENGTH'))) (RULE SYM_POSITION (BLOCK (ALT 'POSITION'))) (RULE SYM_SUBSTRING (BLOCK (ALT 'SUBSTRING'))) (RULE SYM_CONCAT (BLOCK (ALT 'CONCAT'))) (RULE SYM_CONCAT_WS (BLOCK (ALT 'CONCAT_WS'))) (RULE SYM_ABS (BLOCK (ALT 'ABS'))) (RULE SYM_MOD (BLOCK (ALT 'MOD'))) (RULE SYM_CEIL (BLOCK (ALT 'CEIL'))) (RULE SYM_FLOOR (BLOCK (ALT 'FLOOR'))) (RULE SYM_ROUND (BLOCK (ALT 'ROUND'))) (RULE SYM_CURRENT_DATE (BLOCK (ALT 'CURRENT_DATE') (ALT 'current_date'))) (RULE SYM_CURRENT_TIME (BLOCK (ALT 'CURRENT_TIME') (ALT 'current_time'))) (RULE SYM_CURRENT_DATE_TIME (BLOCK (ALT 'CURRENT_DATE_TIME') (ALT 'current_date_time'))) (RULE SYM_NOW (BLOCK (ALT 'NOW'))) (RULE SYM_CURRENT_TIMEZONE (BLOCK (ALT 'CURRENT_TIMEZONE') (ALT 'current_timezone'))) (RULE SYM_COUNT (BLOCK (ALT 'COUNT') (ALT 'count'))) (RULE SYM_MIN (BLOCK (ALT 'MIN') (ALT 'min'))) (RULE SYM_MAX (BLOCK (ALT 'MAX') (ALT 'max'))) (RULE SYM_SUM (BLOCK (ALT 'SUM') (ALT 'sum'))) (RULE SYM_AVG (BLOCK (ALT 'AVG') (ALT 'avg'))) (RULE SYM_TERMINOLOGY (BLOCK (ALT 'TERMINOLOGY'))) (RULE CONTAINED_REGEX (BLOCK (ALT '{' (* (BLOCK (ALT WS))) SLASH_REGEX (* (BLOCK (ALT WS))) (? (BLOCK (ALT ';' (* (BLOCK (ALT WS))) STRING))) (* (BLOCK (ALT WS))) '}'))) (RULE SLASH_REGEX (RULEMODIFIERS fragment) (BLOCK (ALT '/' (+ (BLOCK (ALT SLASH_REGEX_CHAR))) '/'))) (RULE SLASH_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET [/\n\r]))) (ALT ESCAPE_SEQ) (ALT '\\/'))) (RULE AQL_URI (BLOCK (ALT URI))) (RULE BOOLEAN (BLOCK (ALT SYM_TRUE) (ALT SYM_FALSE))) (RULE DATE_STRING (BLOCK (ALT '\'' DATE_VALUE '\'') (ALT '"' DATE_VALUE '"'))) (RULE DATE_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_DATE_EXTENDED) (ALT ISO8601_DATE_COMPACT))) (RULE TIME_STRING (BLOCK (ALT '\'' TIME_VALUE '\'') (ALT '"' TIME_VALUE '"'))) (RULE TIME_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_TIME_EXTENDED) (ALT ISO8601_TIME_COMPACT))) (RULE DATE_TIME_STRING (BLOCK (ALT '\'' DATE_TIME_VALUE '\'') (ALT '"' DATE_TIME_VALUE '"'))) (RULE DATE_TIME_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_DATE_TIME_EXTENDED) (ALT ISO8601_DATE_TIME_COMPACT))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT ESCAPE_SEQ) (ALT UTF8CHAR) (ALT OCTAL_ESC) (ALT (~ (SET '\\' '\''))))) '\'') (ALT '"' (* (BLOCK (ALT ESCAPE_SEQ) (ALT UTF8CHAR) (ALT OCTAL_ESC) (ALT (~ (SET '\\' '"'))))) '"'))) (RULE QUALIFIED_TERM_CODE (BLOCK (ALT COMPACT_QUALIFIED_TERM_CODE))) (RULE SYM_NE (BLOCK (ALT '/=') (ALT '!=') (ALT 'â‰ '))) (RULE SYM_EQ (BLOCK (ALT '='))) (RULE SYM_DOUBLE_DASH (BLOCK (ALT '--'))) (RULE SYM_SINGLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '\''))) (RULE SYM_DOUBLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '"'))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT [aA]))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT [bB]))) (RULE C (RULEMODIFIERS fragment) (BLOCK (ALT [cC]))) (RULE D (RULEMODIFIERS fragment) (BLOCK (ALT [dD]))) (RULE E (RULEMODIFIERS fragment) (BLOCK (ALT [eE]))) (RULE F (RULEMODIFIERS fragment) (BLOCK (ALT [fF]))) (RULE G (RULEMODIFIERS fragment) (BLOCK (ALT [gG]))) (RULE H (RULEMODIFIERS fragment) (BLOCK (ALT [hH]))) (RULE I (RULEMODIFIERS fragment) (BLOCK (ALT [iI]))) (RULE J (RULEMODIFIERS fragment) (BLOCK (ALT [jJ]))) (RULE K (RULEMODIFIERS fragment) (BLOCK (ALT [kK]))) (RULE L (RULEMODIFIERS fragment) (BLOCK (ALT [lL]))) (RULE M (RULEMODIFIERS fragment) (BLOCK (ALT [mM]))) (RULE N (RULEMODIFIERS fragment) (BLOCK (ALT [nN]))) (RULE O (RULEMODIFIERS fragment) (BLOCK (ALT [oO]))) (RULE P (RULEMODIFIERS fragment) (BLOCK (ALT [pP]))) (RULE Q (RULEMODIFIERS fragment) (BLOCK (ALT [qQ]))) (RULE R (RULEMODIFIERS fragment) (BLOCK (ALT [rR]))) (RULE S (RULEMODIFIERS fragment) (BLOCK (ALT [sS]))) (RULE T (RULEMODIFIERS fragment) (BLOCK (ALT [tT]))) (RULE U (RULEMODIFIERS fragment) (BLOCK (ALT [uU]))) (RULE V (RULEMODIFIERS fragment) (BLOCK (ALT [vV]))) (RULE W (RULEMODIFIERS fragment) (BLOCK (ALT [wW]))) (RULE X (RULEMODIFIERS fragment) (BLOCK (ALT [xX]))) (RULE Y (RULEMODIFIERS fragment) (BLOCK (ALT [yY]))) (RULE Z (RULEMODIFIERS fragment) (BLOCK (ALT [zZ]))) (RULE SYM_EXISTENCE (BLOCK (ALT 'existence'))) (RULE SYM_OCCURRENCES (BLOCK (ALT 'occurrences'))) (RULE SYM_CARDINALITY (BLOCK (ALT 'cardinality'))) (RULE SYM_ORDERED (BLOCK (ALT 'ordered'))) (RULE SYM_UNORDERED (BLOCK (ALT 'unordered'))) (RULE SYM_UNIQUE (BLOCK (ALT 'unique'))) (RULE SYM_USE_NODE (BLOCK (ALT 'use_node'))) (RULE SYM_USE_ARCHETYPE (BLOCK (ALT 'use_archetype'))) (RULE SYM_ALLOW_ARCHETYPE (BLOCK (ALT 'allow_archetype'))) (RULE SYM_INCLUDE (BLOCK (ALT 'include'))) (RULE SYM_EXCLUDE (BLOCK (ALT 'exclude'))) (RULE SYM_CLOSED (BLOCK (ALT 'closed'))) (RULE SYM_ASTERISK (BLOCK (ALT '*'))) (RULE SYM_LE (BLOCK (ALT '<=') (ALT 'â‰¤'))) (RULE SYM_GE (BLOCK (ALT '>=') (ALT 'â‰¥'))) (RULE SYM_GT (BLOCK (ALT '>'))) (RULE SYM_LT (BLOCK (ALT '<'))) (RULE SYM_SLASH (BLOCK (ALT '/'))) (RULE SYM_IVL_DELIM (BLOCK (ALT '|'))) (RULE SYM_IVL_SEP (BLOCK (ALT '..'))) (RULE ODIN14_BLOCK_START (BLOCK (LEXER_ALT_ACTION (ALT UC_ID (? (BLOCK (ALT WS))) '<' (? (BLOCK (ALT WS))) EOL {
        String origText = getText();
        String typeId = origText.substring (0, origText.indexOf("<")-1);
        typeId.trim();
        setText ("(" + typeId + ") <");
    }) (LEXER_ACTION_CALL mode ODIN14_BLOCK)))) (RULE UID (RULEMODIFIERS fragment) (BLOCK (ALT UUID) (ALT INTERNET_ID) (ALT ISO_OID))) (RULE INTERNET_ID (RULEMODIFIERS fragment) (BLOCK (ALT LABEL (+ (BLOCK (ALT '.' LABEL)))))) (RULE ISO_OID (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (+ (BLOCK (ALT '.' NUMBER)))))) (RULE HIER_OBJECT_HRID (RULEMODIFIERS fragment) (BLOCK (ALT UID_BASED_ID))) (RULE UID_BASED_ID (RULEMODIFIERS fragment) (BLOCK (ALT UID (? (BLOCK (ALT '::' UID_EXTENSION)))))) (RULE UID_EXTENSION (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_UNRESERVED) (ALT URI_RESERVED)))))) (RULE OBJECT_VERSION_ID (BLOCK (ALT UID '::' UID '::' VERSION_TREE_ID))) (RULE VERSION_TREE_ID (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (? (BLOCK (ALT '.' NUMBER '.' NUMBER)))))) (RULE ARCHETYPE_HRID (BLOCK (ALT FULLY_QUALIFIED_RM_ENTITY '.v' VERSION_ID))) (RULE ARCHETYPE_REF (BLOCK (ALT FULLY_QUALIFIED_RM_ENTITY '.v' VERSION_REF))) (RULE VERSION_ID (BLOCK (ALT NUMBER '.' NUMBER '.' NUMBER (? (BLOCK (ALT VERSION_MOD)))))) (RULE FULLY_QUALIFIED_RM_ENTITY (BLOCK (ALT (? (BLOCK (ALT NAMESPACE '::'))) QUALIFIED_RM_ENTITY))) (RULE QUALIFIED_RM_ENTITY (RULEMODIFIERS fragment) (BLOCK (ALT WORD_ID '-' WORD_ID '-' WORD_ID '.' NAME_ID))) (RULE VERSION_REF (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (? (BLOCK (ALT '.' NUMBER (? (BLOCK (ALT '.' NUMBER VERSION_MOD))))))))) (RULE VERSION_MOD (RULEMODIFIERS fragment) (BLOCK (ALT (? (BLOCK (ALT VERSION_PREREL))) (? (BLOCK (ALT VERSION_BUILD)))))) (RULE VERSION_PREREL (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT '-rc') (ALT '-alpha') (ALT '-beta')) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT))))))))) (RULE VERSION_BUILD (RULEMODIFIERS fragment) (BLOCK (ALT '+' (+ (BLOCK (ALT DIGIT)))))) (RULE WORD_ID (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR (* (BLOCK (ALT ALPHANUM_US_CHAR)))))) (RULE NAME_ID (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR (* (BLOCK (ALT ALPHANUM_US_HYP_CHAR)))))) (RULE NAMESPACE (RULEMODIFIERS fragment) (BLOCK (ALT LABEL (* (BLOCK (ALT '.' LABEL)))))) (RULE LABEL (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR (* (BLOCK (ALT ALPHANUM_CHAR) (ALT '_') (ALT '-') (ALT PCT_ENCODED)))))) (RULE PCT_ENCODED (RULEMODIFIERS fragment) (BLOCK (ALT '%' HEX_DIGIT HEX_DIGIT))) (RULE TERMINOLOGY_ID (RULEMODIFIERS fragment) (BLOCK (ALT NAME_ID) (ALT URI))) (RULE QUALIFIED_TERM_CODE_ID (BLOCK (ALT '#' COMPACT_QUALIFIED_TERM_CODE))) (RULE LOCAL_TERM_CODE_ID (BLOCK (ALT '#' TERM_CODE_STRING))) (RULE QUALIFIED_TERM_CODE_REF (BLOCK (ALT '[' COMPACT_QUALIFIED_TERM_CODE ']'))) (RULE COMPACT_QUALIFIED_TERM_CODE (RULEMODIFIERS fragment) (BLOCK (ALT TERM_CODE_STRING (? (BLOCK (ALT '(' TERM_CODE_STRING ')'))) '::' TERM_CODE_STRING (? (BLOCK (ALT '|' (+ (BLOCK (ALT .))) '|')))))) (RULE TERM_CODE_STRING (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT TERM_CODE_CHAR)))))) (RULE TERM_CODE_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_US_HYP_CHAR) (ALT '.'))) (RULE ROOT_ID_CODE (BLOCK (ALT 'id1' (* (BLOCK (ALT '.1')))))) (RULE ID_CODE (BLOCK (ALT 'id' CODE_STR))) (RULE AT_CODE (BLOCK (ALT 'at' CODE_STR))) (RULE AC_CODE (BLOCK (ALT 'ac' CODE_STR))) (RULE CODE_STR (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (* (BLOCK (ALT '.' NUMBER)))))) (RULE ADL14_AT_CODE (BLOCK (ALT 'at' ADL14_CODE_STR))) (RULE ADL14_AC_CODE (BLOCK (ALT 'ac' ADL14_CODE_STR))) (RULE ADL14_CODE_STR (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (* (BLOCK (ALT '.' NUMBER)))))) (RULE ISO8601_DATE_AUGMENTED (BLOCK (ALT ISO8601_DATE_EXTENDED) (ALT YEAR '-' MONTH '-' UNKNOWN_DT) (ALT YEAR '-' UNKNOWN_DT '-' UNKNOWN_DT))) (RULE ISO8601_TIME_AUGMENTED (BLOCK (ALT ISO8601_TIME_EXTENDED) (ALT (BLOCK (ALT (BLOCK (ALT HOUR ':' MINUTE ':' UNKNOWN_DT) (ALT HOUR ':' UNKNOWN_DT ':' UNKNOWN_DT)) (? (BLOCK (ALT TIMEZONE)))))))) (RULE ISO8601_DATE_TIME_AUGMENTED (BLOCK (ALT ISO8601_DATE_TIME_EXTENDED) (ALT (BLOCK (ALT (BLOCK (ALT YEAR '-' MONTH '-' DAY 'T' HOUR ':' MINUTE ':' UNKNOWN_DT) (ALT YEAR '-' MONTH '-' DAY 'T' HOUR ':' UNKNOWN_DT ':' UNKNOWN_DT)) (? (BLOCK (ALT TIMEZONE)))))))) (RULE UNKNOWN_DT (RULEMODIFIERS fragment) (BLOCK (ALT '??'))) (RULE ISO8601_DATE_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT YEAR '-' MONTH (? (BLOCK (ALT '-' DAY)))) (ALT YEAR '-' MONTH))) (RULE ISO8601_TIME_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT HOUR ':' MINUTE (? (BLOCK (ALT ':' SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE ISO8601_DATE_TIME_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT YEAR '-' MONTH '-' DAY 'T' HOUR (? (BLOCK (ALT ':' MINUTE (? (BLOCK (ALT ':' SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE ISO8601_DATE_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT YEAR MONTH (? (BLOCK (ALT DAY)))))) (RULE ISO8601_TIME_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT HOUR MINUTE (? (BLOCK (ALT SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE ISO8601_DATE_TIME_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT YEAR MONTH DAY 'T' HOUR (? (BLOCK (ALT MINUTE (? (BLOCK (ALT SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE TIMEZONE (RULEMODIFIERS fragment) (BLOCK (ALT 'Z') (ALT (BLOCK (ALT '+') (ALT '-')) HOUR_MIN))) (RULE YEAR (RULEMODIFIERS fragment) (BLOCK (ALT [0-9] [0-9] [0-9] [0-9]))) (RULE MONTH (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT [0] [1-9]) (ALT [1] [0-2]))))) (RULE DAY (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT [0] [1-9]) (ALT [12] [0-9]) (ALT [3] [0-1]))))) (RULE HOUR (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT [01]))) [0-9]) (ALT [2] [0-3]))))) (RULE MINUTE (RULEMODIFIERS fragment) (BLOCK (ALT [0-5] [0-9]))) (RULE HOUR_MIN (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT [01]))) [0-9]) (ALT [2] [0-3])) [0-5] [0-9]))) (RULE SECOND (RULEMODIFIERS fragment) (BLOCK (ALT [0-5] [0-9]))) (RULE SECOND_DEC_SEP (RULEMODIFIERS fragment) (BLOCK (ALT '.') (ALT ','))) (RULE ISO8601_DURATION (BLOCK (ALT (? (BLOCK (ALT '-'))) 'P' (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [yY]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [mM]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [wW]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [dD]))) (? (BLOCK (ALT 'T' (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [hH]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [mM]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))) [sS]))))))))) (RULE URI (RULEMODIFIERS fragment) (BLOCK (ALT URI_SCHEME ':' URI_HIER_PART (? (BLOCK (ALT '?' URI_QUERY))) (? (BLOCK (ALT '#' URI_FRAGMENT)))))) (RULE URI_HIER_PART (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT '//' URI_AUTHORITY)) URI_PATH_ABEMPTY) (ALT URI_PATH_ABSOLUTE) (ALT URI_PATH_ROOTLESS) (ALT URI_PATH_EMPTY))) (RULE URI_SCHEME (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR (* (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT) (ALT '+') (ALT '-') (ALT '.')))))) (RULE URI_AUTHORITY (RULEMODIFIERS fragment) (BLOCK (ALT (? (BLOCK (ALT URI_USERINFO '@'))) URI_HOST (? (BLOCK (ALT ':' URI_PORT)))))) (RULE URI_USERINFO (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT ':')))))) (RULE URI_HOST (RULEMODIFIERS fragment) (BLOCK (ALT URI_IP_LITERAL) (ALT URI_IPV4_ADDRESS) (ALT URI_REG_NAME))) (RULE URI_PORT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT DIGIT)))))) (RULE URI_IP_LITERAL (RULEMODIFIERS fragment) (BLOCK (ALT '[' URI_IPV6_LITERAL ']'))) (RULE URI_IPV4_ADDRESS (RULEMODIFIERS fragment) (BLOCK (ALT URI_DEC_OCTET '.' URI_DEC_OCTET '.' URI_DEC_OCTET '.' URI_DEC_OCTET))) (RULE URI_IPV6_LITERAL (RULEMODIFIERS fragment) (BLOCK (ALT HEX_QUAD (* (BLOCK (ALT ':' HEX_QUAD))) '::' HEX_QUAD (* (BLOCK (ALT ':' HEX_QUAD)))))) (RULE URI_DEC_OCTET (RULEMODIFIERS fragment) (BLOCK (ALT DIGIT) (ALT [1-9] DIGIT) (ALT '1' DIGIT DIGIT) (ALT '2' [0-4] DIGIT) (ALT '25' [0-5]))) (RULE URI_REG_NAME (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS)))))) (RULE HEX_QUAD (RULEMODIFIERS fragment) (BLOCK (ALT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT))) (RULE URI_PATH_ABEMPTY (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT '/' URI_SEGMENT)))))) (RULE URI_PATH_ABSOLUTE (RULEMODIFIERS fragment) (BLOCK (ALT '/' (? (BLOCK (ALT URI_SEGMENT_NZ (* (BLOCK (ALT '/' URI_SEGMENT))))))))) (RULE URI_PATH_NOSCHEME (RULEMODIFIERS fragment) (BLOCK (ALT URI_SEGMENT_NZ_NC (* (BLOCK (ALT '/' URI_SEGMENT)))))) (RULE URI_PATH_ROOTLESS (RULEMODIFIERS fragment) (BLOCK (ALT URI_SEGMENT_NZ (* (BLOCK (ALT '/' URI_SEGMENT)))))) (RULE URI_PATH_EMPTY (RULEMODIFIERS fragment) (BLOCK (ALT EPSILON))) (RULE URI_SEGMENT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR)))))) (RULE URI_SEGMENT_NZ (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_PCHAR)))))) (RULE URI_SEGMENT_NZ_NC (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT '@')))))) (RULE URI_PCHAR (RULEMODIFIERS fragment) (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT ':') (ALT '@'))) (RULE URI_QUERY (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR) (ALT '/') (ALT '?')))))) (RULE URI_FRAGMENT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR) (ALT '/') (ALT '?')))))) (RULE URI_PCT_ENCODED (RULEMODIFIERS fragment) (BLOCK (ALT '%' HEX_DIGIT HEX_DIGIT))) (RULE URI_UNRESERVED (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT) (ALT '-') (ALT '.') (ALT '_') (ALT '~'))) (RULE URI_RESERVED (RULEMODIFIERS fragment) (BLOCK (ALT URI_GEN_DELIMS) (ALT URI_SUB_DELIMS))) (RULE URI_GEN_DELIMS (RULEMODIFIERS fragment) (BLOCK (ALT [:/?#[\]@]))) (RULE URI_SUB_DELIMS (RULEMODIFIERS fragment) (BLOCK (ALT [!$&'()*+,;=]))) (RULE SYM_TRUE (BLOCK (ALT [Tt] [Rr] [Uu] [Ee]))) (RULE SYM_FALSE (BLOCK (ALT [Ff] [Aa] [Ll] [Ss] [Ee]))) (RULE GUID (BLOCK (ALT (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT)))))) (RULE UUID (BLOCK (ALT GUID))) (RULE NUMBER (RULEMODIFIERS fragment) (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT [0-9])))))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT DIGIT)))))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) '.' (+ (BLOCK (ALT DIGIT)))))) (RULE REAL_PERCENT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT)))))) '%'))) (RULE SCI_INTEGER (BLOCK (ALT INTEGER (BLOCK (ALT E_SUFFIX) (ALT P10_SUFFIX))))) (RULE SCI_REAL (BLOCK (ALT REAL (BLOCK (ALT E_SUFFIX) (ALT P10_SUFFIX))))) (RULE E_SUFFIX (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT DIGIT)))))) (RULE P10_SUFFIX (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT [ ]))) 'x' (* (BLOCK (ALT [ ]))) '10' (* (BLOCK (ALT [ ]))) '^' (* (BLOCK (ALT [ ]))) (+ (BLOCK (ALT DIGIT)))))) (RULE STRING_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ["\\]))) (ALT ESCAPE_SEQ) (ALT UTF8CHAR))) (RULE CHARACTER (BLOCK (ALT '\'' CHAR '\''))) (RULE CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\r\n]))) (ALT ESCAPE_SEQ) (ALT UTF8CHAR))) (RULE ESCAPE_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"?abfnrtv\\]))) (RULE ALPHANUM_US_HYP_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_US_CHAR) (ALT '-'))) (RULE ALPHANUM_US_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR) (ALT '_'))) (RULE ALPHANUM_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT))) (RULE ALPHA_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE ALPHA_UCHAR (RULEMODIFIERS fragment) (BLOCK (ALT [A-Z]))) (RULE ALPHA_LCHAR (RULEMODIFIERS fragment) (BLOCK (ALT [a-z]))) (RULE UTF8CHAR (RULEMODIFIERS fragment) (BLOCK (ALT '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE HEX_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE OCTAL_ESC (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [0-3] OCTAL_DIGIT OCTAL_DIGIT) (ALT '\\' OCTAL_DIGIT OCTAL_DIGIT) (ALT '\\' OCTAL_DIGIT))) (RULE OCTAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE SYM_DOT (BLOCK (ALT '.'))) (RULE SYM_COMMA (BLOCK (ALT ','))) (RULE SYM_SEMI_COLON (BLOCK (ALT ';'))) (RULE SYM_LPAREN (BLOCK (ALT '('))) (RULE SYM_RPAREN (BLOCK (ALT ')'))) (RULE SYM_LBRACKET (BLOCK (ALT '['))) (RULE SYM_RBRACKET (BLOCK (ALT ']'))) (RULE SYM_LCURLY (BLOCK (ALT '{'))) (RULE SYM_RCURLY (BLOCK (ALT '}'))) (RULE C_LOCAL_TERM_CODE_START (BLOCK (LEXER_ALT_ACTION (ALT '[' (? (BLOCK (ALT WS))) 'local' (? (BLOCK (ALT WS))) '::' (? (BLOCK (ALT WS))) (? (BLOCK (ALT EOL)))) (LEXER_ACTION_CALL mode C_LOCAL_TERM_CODE)))) (RULE C_EXTERNAL_TERM_CODE_START (BLOCK (LEXER_ALT_ACTION (ALT '[' (? (BLOCK (ALT WS))) TERM_CODE_STRING (? (BLOCK (ALT WS))) '::' (? (BLOCK (ALT WS))) (? (BLOCK (ALT EOL)))) (LEXER_ACTION_CALL mode C_EXTERNAL_TERM_CODE)))) (RULE DATE_CONSTRAINT_PATTERN (BLOCK (ALT YEAR_PATTERN '-' MONTH_PATTERN '-' DAY_PATTERN))) (RULE TIME_CONSTRAINT_PATTERN (BLOCK (ALT HOUR_PATTERN ':' MINUTE_PATTERN ':' SECOND_PATTERN (? (BLOCK (ALT TZ_PATTERN)))))) (RULE DATE_TIME_CONSTRAINT_PATTERN (BLOCK (ALT DATE_CONSTRAINT_PATTERN 'T' TIME_CONSTRAINT_PATTERN))) (RULE YEAR_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'yyyy') (ALT 'YYYY') (ALT 'yyy') (ALT 'YYY'))) (RULE MONTH_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'mm') (ALT 'MM') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE DAY_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'dd') (ALT 'DD') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE HOUR_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'hh') (ALT 'HH') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE MINUTE_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'mm') (ALT 'MM') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE SECOND_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'ss') (ALT 'SS') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE TZ_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'Â±' (BLOCK (ALT 'hh') (ALT 'HH')) (? (BLOCK (ALT (? (BLOCK (ALT ':'))) (BLOCK (ALT 'mm') (ALT 'MM')))))) (ALT 'Z'))) (RULE DURATION_CONSTRAINT_PATTERN (BLOCK (ALT 'P' (? (BLOCK (ALT [yY]))) (? (BLOCK (ALT [mM]))) (? (BLOCK (ALT [Ww]))) (? (BLOCK (ALT [dD]))) (? (BLOCK (ALT 'T' (? (BLOCK (ALT [hH]))) (? (BLOCK (ALT [mM]))) (? (BLOCK (ALT [sS]))))))))) (RULE REGEX_START_CARET (BLOCK (LEXER_ALT_ACTION (ALT '{^') (LEXER_ACTION_CALL type SYM_LCURLY) (LEXER_ACTION_CALL mode REGEX_CARET)))) (RULE REGEX_START_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '{/') (LEXER_ACTION_CALL type SYM_LCURLY) (LEXER_ACTION_CALL mode REGEX_SLASH)))) (RULE SYM_NAMESPACE_SEP (BLOCK (ALT '::'))) (RULE SYM_LIST_CONTINUE (BLOCK (ALT '...'))) (RULE SYM_PLUS_OR_MINUS (BLOCK (ALT '+/-') (ALT 'Â±'))) (RULE SYM_PLUS (BLOCK (ALT '+'))) (RULE SYM_MINUS (BLOCK (ALT '-'))) (RULE SYM_PERCENT (BLOCK (ALT '%'))) (RULE SYM_CARET (BLOCK (ALT '^'))) (RULE UC_ID (BLOCK (ALT ALPHA_UCHAR (* (BLOCK (ALT ALPHANUM_US_CHAR)))))) (RULE LC_ID (BLOCK (ALT (? (BLOCK (ALT '_'))) ALPHA_LCHAR (* (BLOCK (ALT ALPHANUM_US_CHAR)))))) (RULE ODIN_URI (BLOCK (ALT URI))) (RULE PARAMETER (BLOCK (ALT '$' ALPHA_CHAR (* (BLOCK (ALT ALPHANUM_US_CHAR))))))) (mode ODIN14_BLOCK (RULE ODIN14_BLOCK_POST (BLOCK (LEXER_ALT_ACTION (ALT WS '}' (? (BLOCK (ALT WS))) EOL { setText ("}"); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RCURLY)))) (RULE ODIN14_BLOCK_POST2 (BLOCK (LEXER_ALT_ACTION (ALT WS UC_ID { setText (getText().trim()); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type UC_ID)))) (RULE ODIN14_BLOCK_LINE (BLOCK (ALT WS LC_ID WS (+ (BLOCK (ALT NON_EOL))) EOL))) (RULE ODIN14_BLOCK_LINE2 (BLOCK (LEXER_ALT_ACTION (ALT WS [<[] (? (BLOCK (ALT WS))) (+ (BLOCK (ALT NON_EOL))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE)))) (RULE ODIN14_BLOCK_LINE3 (BLOCK (LEXER_ALT_ACTION (ALT WS '>' (? (BLOCK (ALT WS))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE)))) (RULE WS_ODIN (BLOCK (LEXER_ALT_ACTION (ALT WS EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE NON_EOL (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET '\n')))))) (mode C_LOCAL_TERM_CODE (RULE C_TERM_CODE_END (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET)))) (RULE ADL14_AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT ADL14_AT_CODE) (LEXER_ACTION_CALL type ADL14_AT_CODE)))) (RULE AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT AT_CODE) (LEXER_ACTION_CALL type AT_CODE)))) (RULE COMMA_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA)))) (RULE SEMI_COLON_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON)))) (RULE CMT_LINE_L (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL_L (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WS_L (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))) (mode C_EXTERNAL_TERM_CODE (RULE C_TERM_CODE_END_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET)))) (RULE C_EXTERNAL_TERM_CODE_STRING (BLOCK (ALT TERM_CODE_STRING))) (RULE COMMA_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA)))) (RULE SEMI_COLON_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON)))) (RULE CMT_LINE_X (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT WS))) '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL_X (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WS_X (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))) (mode REGEX_CARET (RULE REGEX_END_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE REGEX_SEMI_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE DELIMITED_REGEX (BLOCK (ALT (+ (BLOCK (ALT CARET_REGEX_CHAR))) { setText ("^" + getText() + "^"); }))) (RULE CARET_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\^') (ALT (~ (SET [^\n\r])))))) (mode REGEX_SLASH (RULE REGEX_END_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE REGEX_SEMI_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE DELIMITED_REGEX_SLASH (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT SLASH_REGEX_CHAR))) { setText ("/" + getText() + "/"); }) (LEXER_ACTION_CALL type DELIMITED_REGEX))))))
2025-02-15 15:52:44:108 grammar LogManager.java:25 after: (LEXER_GRAMMAR AqlLexer (import Cadl14Lexer OpenehrPatterns BaseLexer AqlGeneral GeneralLexer) (channels { COMMENT) (RULES (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE UNICODE_BOM (BLOCK (LEXER_ALT_ACTION (ALT (BLOCK (ALT '\uEFBBBF') (ALT '\uFEFF') (ALT '\u0000FEFF'))) skip))) (RULE CMT_LINE (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT '\r'))) '\n') (LEXER_ACTION_CALL channel HIDDEN)))) (RULE SYM_SELECT (BLOCK (ALT 'SELECT'))) (RULE SYM_AS (BLOCK (ALT 'AS') (ALT 'as'))) (RULE SYM_FROM (BLOCK (ALT 'FROM'))) (RULE SYM_WHERE (BLOCK (ALT 'WHERE'))) (RULE SYM_ORDER (BLOCK (ALT 'ORDER'))) (RULE SYM_BY (BLOCK (ALT 'BY') (ALT 'by'))) (RULE SYM_DESC (BLOCK (ALT 'DESC'))) (RULE SYM_DESCENDING (BLOCK (ALT 'DESCENDING'))) (RULE SYM_ASC (BLOCK (ALT 'ASC'))) (RULE SYM_ASCENDING (BLOCK (ALT 'ASCENDING'))) (RULE SYM_LIMIT (BLOCK (ALT 'LIMIT'))) (RULE SYM_OFFSET (BLOCK (ALT 'OFFSET'))) (RULE SYM_DISTINCT (BLOCK (ALT 'DISTINCT'))) (RULE SYM_VERSION (BLOCK (ALT 'VERSION'))) (RULE SYM_LATEST_VERSION (BLOCK (ALT 'LATEST_VERSION'))) (RULE SYM_ALL_VERSIONS (BLOCK (ALT 'ALL_VERSIONS'))) (RULE SYM_NULL (BLOCK (ALT 'NULL'))) (RULE SYM_TOP (BLOCK (ALT 'TOP'))) (RULE SYM_FORWARD (BLOCK (ALT 'FORWARD'))) (RULE SYM_BACKWARD (BLOCK (ALT 'BACKWARD'))) (RULE SYM_CONTAINS (BLOCK (ALT 'CONTAINS'))) (RULE SYM_AND (BLOCK (ALT 'AND') (ALT 'and'))) (RULE SYM_OR (BLOCK (ALT 'OR') (ALT 'or'))) (RULE SYM_NOT (BLOCK (ALT 'NOT') (ALT 'not'))) (RULE SYM_EXISTS (BLOCK (ALT 'EXISTS') (ALT 'exists'))) (RULE SYM_LIKE (BLOCK (ALT 'LIKE') (ALT 'like'))) (RULE SYM_MATCHES (BLOCK (ALT 'matches'))) (RULE SYM_LENGTH (BLOCK (ALT 'LENGTH'))) (RULE SYM_POSITION (BLOCK (ALT 'POSITION'))) (RULE SYM_SUBSTRING (BLOCK (ALT 'SUBSTRING'))) (RULE SYM_CONCAT (BLOCK (ALT 'CONCAT'))) (RULE SYM_CONCAT_WS (BLOCK (ALT 'CONCAT_WS'))) (RULE SYM_ABS (BLOCK (ALT 'ABS'))) (RULE SYM_MOD (BLOCK (ALT 'MOD'))) (RULE SYM_CEIL (BLOCK (ALT 'CEIL'))) (RULE SYM_FLOOR (BLOCK (ALT 'FLOOR'))) (RULE SYM_ROUND (BLOCK (ALT 'ROUND'))) (RULE SYM_CURRENT_DATE (BLOCK (ALT 'CURRENT_DATE') (ALT 'current_date'))) (RULE SYM_CURRENT_TIME (BLOCK (ALT 'CURRENT_TIME') (ALT 'current_time'))) (RULE SYM_CURRENT_DATE_TIME (BLOCK (ALT 'CURRENT_DATE_TIME') (ALT 'current_date_time'))) (RULE SYM_NOW (BLOCK (ALT 'NOW'))) (RULE SYM_CURRENT_TIMEZONE (BLOCK (ALT 'CURRENT_TIMEZONE') (ALT 'current_timezone'))) (RULE SYM_COUNT (BLOCK (ALT 'COUNT') (ALT 'count'))) (RULE SYM_MIN (BLOCK (ALT 'MIN') (ALT 'min'))) (RULE SYM_MAX (BLOCK (ALT 'MAX') (ALT 'max'))) (RULE SYM_SUM (BLOCK (ALT 'SUM') (ALT 'sum'))) (RULE SYM_AVG (BLOCK (ALT 'AVG') (ALT 'avg'))) (RULE SYM_TERMINOLOGY (BLOCK (ALT 'TERMINOLOGY'))) (RULE CONTAINED_REGEX (BLOCK (ALT '{' (* (BLOCK (ALT WS))) SLASH_REGEX (* (BLOCK (ALT WS))) (? (BLOCK (ALT ';' (* (BLOCK (ALT WS))) STRING))) (* (BLOCK (ALT WS))) '}'))) (RULE SLASH_REGEX (RULEMODIFIERS fragment) (BLOCK (ALT '/' (+ (BLOCK (ALT SLASH_REGEX_CHAR))) '/'))) (RULE SLASH_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET [/\n\r]))) (ALT ESCAPE_SEQ) (ALT '\\/'))) (RULE AQL_URI (BLOCK (ALT URI))) (RULE BOOLEAN (BLOCK (ALT SYM_TRUE) (ALT SYM_FALSE))) (RULE DATE_STRING (BLOCK (ALT '\'' DATE_VALUE '\'') (ALT '"' DATE_VALUE '"'))) (RULE DATE_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_DATE_EXTENDED) (ALT ISO8601_DATE_COMPACT))) (RULE TIME_STRING (BLOCK (ALT '\'' TIME_VALUE '\'') (ALT '"' TIME_VALUE '"'))) (RULE TIME_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_TIME_EXTENDED) (ALT ISO8601_TIME_COMPACT))) (RULE DATE_TIME_STRING (BLOCK (ALT '\'' DATE_TIME_VALUE '\'') (ALT '"' DATE_TIME_VALUE '"'))) (RULE DATE_TIME_VALUE (RULEMODIFIERS fragment) (BLOCK (ALT ISO8601_DATE_TIME_EXTENDED) (ALT ISO8601_DATE_TIME_COMPACT))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT ESCAPE_SEQ) (ALT UTF8CHAR) (ALT OCTAL_ESC) (ALT (~ (SET '\\' '\''))))) '\'') (ALT '"' (* (BLOCK (ALT ESCAPE_SEQ) (ALT UTF8CHAR) (ALT OCTAL_ESC) (ALT (~ (SET '\\' '"'))))) '"'))) (RULE QUALIFIED_TERM_CODE (BLOCK (ALT COMPACT_QUALIFIED_TERM_CODE))) (RULE SYM_NE (BLOCK (ALT '/=') (ALT '!=') (ALT 'â‰ '))) (RULE SYM_EQ (BLOCK (ALT '='))) (RULE SYM_DOUBLE_DASH (BLOCK (ALT '--'))) (RULE SYM_SINGLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '\''))) (RULE SYM_DOUBLE_QUOTE (RULEMODIFIERS fragment) (BLOCK (ALT '"'))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT [aA]))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT [bB]))) (RULE C (RULEMODIFIERS fragment) (BLOCK (ALT [cC]))) (RULE D (RULEMODIFIERS fragment) (BLOCK (ALT [dD]))) (RULE E (RULEMODIFIERS fragment) (BLOCK (ALT [eE]))) (RULE F (RULEMODIFIERS fragment) (BLOCK (ALT [fF]))) (RULE G (RULEMODIFIERS fragment) (BLOCK (ALT [gG]))) (RULE H (RULEMODIFIERS fragment) (BLOCK (ALT [hH]))) (RULE I (RULEMODIFIERS fragment) (BLOCK (ALT [iI]))) (RULE J (RULEMODIFIERS fragment) (BLOCK (ALT [jJ]))) (RULE K (RULEMODIFIERS fragment) (BLOCK (ALT [kK]))) (RULE L (RULEMODIFIERS fragment) (BLOCK (ALT [lL]))) (RULE M (RULEMODIFIERS fragment) (BLOCK (ALT [mM]))) (RULE N (RULEMODIFIERS fragment) (BLOCK (ALT [nN]))) (RULE O (RULEMODIFIERS fragment) (BLOCK (ALT [oO]))) (RULE P (RULEMODIFIERS fragment) (BLOCK (ALT [pP]))) (RULE Q (RULEMODIFIERS fragment) (BLOCK (ALT [qQ]))) (RULE R (RULEMODIFIERS fragment) (BLOCK (ALT [rR]))) (RULE S (RULEMODIFIERS fragment) (BLOCK (ALT [sS]))) (RULE T (RULEMODIFIERS fragment) (BLOCK (ALT [tT]))) (RULE U (RULEMODIFIERS fragment) (BLOCK (ALT [uU]))) (RULE V (RULEMODIFIERS fragment) (BLOCK (ALT [vV]))) (RULE W (RULEMODIFIERS fragment) (BLOCK (ALT [wW]))) (RULE X (RULEMODIFIERS fragment) (BLOCK (ALT [xX]))) (RULE Y (RULEMODIFIERS fragment) (BLOCK (ALT [yY]))) (RULE Z (RULEMODIFIERS fragment) (BLOCK (ALT [zZ]))) (RULE SYM_EXISTENCE (BLOCK (ALT 'existence'))) (RULE SYM_OCCURRENCES (BLOCK (ALT 'occurrences'))) (RULE SYM_CARDINALITY (BLOCK (ALT 'cardinality'))) (RULE SYM_ORDERED (BLOCK (ALT 'ordered'))) (RULE SYM_UNORDERED (BLOCK (ALT 'unordered'))) (RULE SYM_UNIQUE (BLOCK (ALT 'unique'))) (RULE SYM_USE_NODE (BLOCK (ALT 'use_node'))) (RULE SYM_USE_ARCHETYPE (BLOCK (ALT 'use_archetype'))) (RULE SYM_ALLOW_ARCHETYPE (BLOCK (ALT 'allow_archetype'))) (RULE SYM_INCLUDE (BLOCK (ALT 'include'))) (RULE SYM_EXCLUDE (BLOCK (ALT 'exclude'))) (RULE SYM_CLOSED (BLOCK (ALT 'closed'))) (RULE SYM_ASTERISK (BLOCK (ALT '*'))) (RULE SYM_LE (BLOCK (ALT '<=') (ALT 'â‰¤'))) (RULE SYM_GE (BLOCK (ALT '>=') (ALT 'â‰¥'))) (RULE SYM_GT (BLOCK (ALT '>'))) (RULE SYM_LT (BLOCK (ALT '<'))) (RULE SYM_SLASH (BLOCK (ALT '/'))) (RULE SYM_IVL_DELIM (BLOCK (ALT '|'))) (RULE SYM_IVL_SEP (BLOCK (ALT '..'))) (RULE ODIN14_BLOCK_START (BLOCK (LEXER_ALT_ACTION (ALT UC_ID (? (BLOCK (ALT WS))) '<' (? (BLOCK (ALT WS))) EOL {
        String origText = getText();
        String typeId = origText.substring (0, origText.indexOf("<")-1);
        typeId.trim();
        setText ("(" + typeId + ") <");
    }) (LEXER_ACTION_CALL mode ODIN14_BLOCK)))) (RULE UID (RULEMODIFIERS fragment) (BLOCK (ALT UUID) (ALT INTERNET_ID) (ALT ISO_OID))) (RULE INTERNET_ID (RULEMODIFIERS fragment) (BLOCK (ALT LABEL (+ (BLOCK (ALT '.' LABEL)))))) (RULE ISO_OID (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (+ (BLOCK (ALT '.' NUMBER)))))) (RULE HIER_OBJECT_HRID (RULEMODIFIERS fragment) (BLOCK (ALT UID_BASED_ID))) (RULE UID_BASED_ID (RULEMODIFIERS fragment) (BLOCK (ALT UID (? (BLOCK (ALT '::' UID_EXTENSION)))))) (RULE UID_EXTENSION (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_UNRESERVED) (ALT URI_RESERVED)))))) (RULE OBJECT_VERSION_ID (BLOCK (ALT UID '::' UID '::' VERSION_TREE_ID))) (RULE VERSION_TREE_ID (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (? (BLOCK (ALT '.' NUMBER '.' NUMBER)))))) (RULE ARCHETYPE_HRID (BLOCK (ALT FULLY_QUALIFIED_RM_ENTITY '.v' VERSION_ID))) (RULE ARCHETYPE_REF (BLOCK (ALT FULLY_QUALIFIED_RM_ENTITY '.v' VERSION_REF))) (RULE VERSION_ID (BLOCK (ALT NUMBER '.' NUMBER '.' NUMBER (? (BLOCK (ALT VERSION_MOD)))))) (RULE FULLY_QUALIFIED_RM_ENTITY (BLOCK (ALT (? (BLOCK (ALT NAMESPACE '::'))) QUALIFIED_RM_ENTITY))) (RULE QUALIFIED_RM_ENTITY (RULEMODIFIERS fragment) (BLOCK (ALT WORD_ID '-' WORD_ID '-' WORD_ID '.' NAME_ID))) (RULE VERSION_REF (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (? (BLOCK (ALT '.' NUMBER (? (BLOCK (ALT '.' NUMBER VERSION_MOD))))))))) (RULE VERSION_MOD (RULEMODIFIERS fragment) (BLOCK (ALT (? (BLOCK (ALT VERSION_PREREL))) (? (BLOCK (ALT VERSION_BUILD)))))) (RULE VERSION_PREREL (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT '-rc') (ALT '-alpha') (ALT '-beta')) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT))))))))) (RULE VERSION_BUILD (RULEMODIFIERS fragment) (BLOCK (ALT '+' (+ (BLOCK (ALT DIGIT)))))) (RULE WORD_ID (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR (* (BLOCK (ALT ALPHANUM_US_CHAR)))))) (RULE NAME_ID (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR (* (BLOCK (ALT ALPHANUM_US_HYP_CHAR)))))) (RULE NAMESPACE (RULEMODIFIERS fragment) (BLOCK (ALT LABEL (* (BLOCK (ALT '.' LABEL)))))) (RULE LABEL (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR (* (BLOCK (ALT ALPHANUM_CHAR) (ALT '_') (ALT '-') (ALT PCT_ENCODED)))))) (RULE PCT_ENCODED (RULEMODIFIERS fragment) (BLOCK (ALT '%' HEX_DIGIT HEX_DIGIT))) (RULE TERMINOLOGY_ID (RULEMODIFIERS fragment) (BLOCK (ALT NAME_ID) (ALT URI))) (RULE QUALIFIED_TERM_CODE_ID (BLOCK (ALT '#' COMPACT_QUALIFIED_TERM_CODE))) (RULE LOCAL_TERM_CODE_ID (BLOCK (ALT '#' TERM_CODE_STRING))) (RULE QUALIFIED_TERM_CODE_REF (BLOCK (ALT '[' COMPACT_QUALIFIED_TERM_CODE ']'))) (RULE COMPACT_QUALIFIED_TERM_CODE (RULEMODIFIERS fragment) (BLOCK (ALT TERM_CODE_STRING (? (BLOCK (ALT '(' TERM_CODE_STRING ')'))) '::' TERM_CODE_STRING (? (BLOCK (ALT '|' (+ (BLOCK (ALT .))) '|')))))) (RULE TERM_CODE_STRING (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT TERM_CODE_CHAR)))))) (RULE TERM_CODE_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_US_HYP_CHAR) (ALT '.'))) (RULE ROOT_ID_CODE (BLOCK (ALT 'id1' (* (BLOCK (ALT '.1')))))) (RULE ID_CODE (BLOCK (ALT 'id' CODE_STR))) (RULE AT_CODE (BLOCK (ALT 'at' CODE_STR))) (RULE AC_CODE (BLOCK (ALT 'ac' CODE_STR))) (RULE CODE_STR (RULEMODIFIERS fragment) (BLOCK (ALT NUMBER (* (BLOCK (ALT '.' NUMBER)))))) (RULE ADL14_AT_CODE (BLOCK (ALT 'at' ADL14_CODE_STR))) (RULE ADL14_AC_CODE (BLOCK (ALT 'ac' ADL14_CODE_STR))) (RULE ADL14_CODE_STR (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (* (BLOCK (ALT '.' NUMBER)))))) (RULE ISO8601_DATE_AUGMENTED (BLOCK (ALT ISO8601_DATE_EXTENDED) (ALT YEAR '-' MONTH '-' UNKNOWN_DT) (ALT YEAR '-' UNKNOWN_DT '-' UNKNOWN_DT))) (RULE ISO8601_TIME_AUGMENTED (BLOCK (ALT ISO8601_TIME_EXTENDED) (ALT (BLOCK (ALT (BLOCK (ALT HOUR ':' MINUTE ':' UNKNOWN_DT) (ALT HOUR ':' UNKNOWN_DT ':' UNKNOWN_DT)) (? (BLOCK (ALT TIMEZONE)))))))) (RULE ISO8601_DATE_TIME_AUGMENTED (BLOCK (ALT ISO8601_DATE_TIME_EXTENDED) (ALT (BLOCK (ALT (BLOCK (ALT YEAR '-' MONTH '-' DAY 'T' HOUR ':' MINUTE ':' UNKNOWN_DT) (ALT YEAR '-' MONTH '-' DAY 'T' HOUR ':' UNKNOWN_DT ':' UNKNOWN_DT)) (? (BLOCK (ALT TIMEZONE)))))))) (RULE UNKNOWN_DT (RULEMODIFIERS fragment) (BLOCK (ALT '??'))) (RULE ISO8601_DATE_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT YEAR '-' MONTH (? (BLOCK (ALT '-' DAY)))) (ALT YEAR '-' MONTH))) (RULE ISO8601_TIME_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT HOUR ':' MINUTE (? (BLOCK (ALT ':' SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE ISO8601_DATE_TIME_EXTENDED (RULEMODIFIERS fragment) (BLOCK (ALT YEAR '-' MONTH '-' DAY 'T' HOUR (? (BLOCK (ALT ':' MINUTE (? (BLOCK (ALT ':' SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE ISO8601_DATE_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT YEAR MONTH (? (BLOCK (ALT DAY)))))) (RULE ISO8601_TIME_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT HOUR MINUTE (? (BLOCK (ALT SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE ISO8601_DATE_TIME_COMPACT (RULEMODIFIERS fragment) (BLOCK (ALT YEAR MONTH DAY 'T' HOUR (? (BLOCK (ALT MINUTE (? (BLOCK (ALT SECOND (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))))))))) (? (BLOCK (ALT TIMEZONE)))))) (RULE TIMEZONE (RULEMODIFIERS fragment) (BLOCK (ALT 'Z') (ALT (SET '+' '-') HOUR_MIN))) (RULE YEAR (RULEMODIFIERS fragment) (BLOCK (ALT [0-9] [0-9] [0-9] [0-9]))) (RULE MONTH (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT [0] [1-9]) (ALT [1] [0-2]))))) (RULE DAY (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT [0] [1-9]) (ALT [12] [0-9]) (ALT [3] [0-1]))))) (RULE HOUR (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT [01]))) [0-9]) (ALT [2] [0-3]))))) (RULE MINUTE (RULEMODIFIERS fragment) (BLOCK (ALT [0-5] [0-9]))) (RULE HOUR_MIN (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT [01]))) [0-9]) (ALT [2] [0-3])) [0-5] [0-9]))) (RULE SECOND (RULEMODIFIERS fragment) (BLOCK (ALT [0-5] [0-9]))) (RULE SECOND_DEC_SEP (RULEMODIFIERS fragment) (BLOCK (ALT (SET '.' ',')))) (RULE ISO8601_DURATION (BLOCK (ALT (? (BLOCK (ALT '-'))) 'P' (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [yY]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [mM]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [wW]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [dD]))) (? (BLOCK (ALT 'T' (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [hH]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) [mM]))) (? (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT SECOND_DEC_SEP (+ (BLOCK (ALT DIGIT)))))) [sS]))))))))) (RULE URI (RULEMODIFIERS fragment) (BLOCK (ALT URI_SCHEME ':' URI_HIER_PART (? (BLOCK (ALT '?' URI_QUERY))) (? (BLOCK (ALT '#' URI_FRAGMENT)))))) (RULE URI_HIER_PART (RULEMODIFIERS fragment) (BLOCK (ALT (BLOCK (ALT '//' URI_AUTHORITY)) URI_PATH_ABEMPTY) (ALT URI_PATH_ABSOLUTE) (ALT URI_PATH_ROOTLESS) (ALT URI_PATH_EMPTY))) (RULE URI_SCHEME (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR (* (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT) (ALT '+') (ALT '-') (ALT '.')))))) (RULE URI_AUTHORITY (RULEMODIFIERS fragment) (BLOCK (ALT (? (BLOCK (ALT URI_USERINFO '@'))) URI_HOST (? (BLOCK (ALT ':' URI_PORT)))))) (RULE URI_USERINFO (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT ':')))))) (RULE URI_HOST (RULEMODIFIERS fragment) (BLOCK (ALT URI_IP_LITERAL) (ALT URI_IPV4_ADDRESS) (ALT URI_REG_NAME))) (RULE URI_PORT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT DIGIT)))))) (RULE URI_IP_LITERAL (RULEMODIFIERS fragment) (BLOCK (ALT '[' URI_IPV6_LITERAL ']'))) (RULE URI_IPV4_ADDRESS (RULEMODIFIERS fragment) (BLOCK (ALT URI_DEC_OCTET '.' URI_DEC_OCTET '.' URI_DEC_OCTET '.' URI_DEC_OCTET))) (RULE URI_IPV6_LITERAL (RULEMODIFIERS fragment) (BLOCK (ALT HEX_QUAD (* (BLOCK (ALT ':' HEX_QUAD))) '::' HEX_QUAD (* (BLOCK (ALT ':' HEX_QUAD)))))) (RULE URI_DEC_OCTET (RULEMODIFIERS fragment) (BLOCK (ALT DIGIT) (ALT [1-9] DIGIT) (ALT '1' DIGIT DIGIT) (ALT '2' [0-4] DIGIT) (ALT '25' [0-5]))) (RULE URI_REG_NAME (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS)))))) (RULE HEX_QUAD (RULEMODIFIERS fragment) (BLOCK (ALT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT))) (RULE URI_PATH_ABEMPTY (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT '/' URI_SEGMENT)))))) (RULE URI_PATH_ABSOLUTE (RULEMODIFIERS fragment) (BLOCK (ALT '/' (? (BLOCK (ALT URI_SEGMENT_NZ (* (BLOCK (ALT '/' URI_SEGMENT))))))))) (RULE URI_PATH_NOSCHEME (RULEMODIFIERS fragment) (BLOCK (ALT URI_SEGMENT_NZ_NC (* (BLOCK (ALT '/' URI_SEGMENT)))))) (RULE URI_PATH_ROOTLESS (RULEMODIFIERS fragment) (BLOCK (ALT URI_SEGMENT_NZ (* (BLOCK (ALT '/' URI_SEGMENT)))))) (RULE URI_PATH_EMPTY (RULEMODIFIERS fragment) (BLOCK (ALT EPSILON))) (RULE URI_SEGMENT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR)))))) (RULE URI_SEGMENT_NZ (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_PCHAR)))))) (RULE URI_SEGMENT_NZ_NC (RULEMODIFIERS fragment) (BLOCK (ALT (+ (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT '@')))))) (RULE URI_PCHAR (RULEMODIFIERS fragment) (BLOCK (ALT URI_UNRESERVED) (ALT URI_PCT_ENCODED) (ALT URI_SUB_DELIMS) (ALT ':') (ALT '@'))) (RULE URI_QUERY (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR) (ALT '/') (ALT '?')))))) (RULE URI_FRAGMENT (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT URI_PCHAR) (ALT '/') (ALT '?')))))) (RULE URI_PCT_ENCODED (RULEMODIFIERS fragment) (BLOCK (ALT '%' HEX_DIGIT HEX_DIGIT))) (RULE URI_UNRESERVED (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT) (ALT '-') (ALT '.') (ALT '_') (ALT '~'))) (RULE URI_RESERVED (RULEMODIFIERS fragment) (BLOCK (ALT URI_GEN_DELIMS) (ALT URI_SUB_DELIMS))) (RULE URI_GEN_DELIMS (RULEMODIFIERS fragment) (BLOCK (ALT [:/?#[\]@]))) (RULE URI_SUB_DELIMS (RULEMODIFIERS fragment) (BLOCK (ALT [!$&'()*+,;=]))) (RULE SYM_TRUE (BLOCK (ALT [Tt] [Rr] [Uu] [Ee]))) (RULE SYM_FALSE (BLOCK (ALT [Ff] [Aa] [Ll] [Ss] [Ee]))) (RULE GUID (BLOCK (ALT (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT))) '-' (+ (BLOCK (ALT HEX_DIGIT)))))) (RULE UUID (BLOCK (ALT GUID))) (RULE NUMBER (RULEMODIFIERS fragment) (BLOCK (ALT '0') (ALT [1-9] (* (BLOCK (ALT [0-9])))))) (RULE INTEGER (BLOCK (ALT (+ (BLOCK (ALT DIGIT)))))) (RULE REAL (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) '.' (+ (BLOCK (ALT DIGIT)))))) (RULE REAL_PERCENT (BLOCK (ALT (+ (BLOCK (ALT DIGIT))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT DIGIT)))))) '%'))) (RULE SCI_INTEGER (BLOCK (ALT INTEGER (BLOCK (ALT E_SUFFIX) (ALT P10_SUFFIX))))) (RULE SCI_REAL (BLOCK (ALT REAL (BLOCK (ALT E_SUFFIX) (ALT P10_SUFFIX))))) (RULE E_SUFFIX (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT DIGIT)))))) (RULE P10_SUFFIX (RULEMODIFIERS fragment) (BLOCK (ALT (* (BLOCK (ALT [ ]))) 'x' (* (BLOCK (ALT [ ]))) '10' (* (BLOCK (ALT [ ]))) '^' (* (BLOCK (ALT [ ]))) (+ (BLOCK (ALT DIGIT)))))) (RULE STRING_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ["\\]))) (ALT ESCAPE_SEQ) (ALT UTF8CHAR))) (RULE CHARACTER (BLOCK (ALT '\'' CHAR '\''))) (RULE CHAR (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\r\n]))) (ALT ESCAPE_SEQ) (ALT UTF8CHAR))) (RULE ESCAPE_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"?abfnrtv\\]))) (RULE ALPHANUM_US_HYP_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_US_CHAR) (ALT '-'))) (RULE ALPHANUM_US_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHANUM_CHAR) (ALT '_'))) (RULE ALPHANUM_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ALPHA_CHAR) (ALT DIGIT))) (RULE ALPHA_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT [a-zA-Z]))) (RULE ALPHA_UCHAR (RULEMODIFIERS fragment) (BLOCK (ALT [A-Z]))) (RULE ALPHA_LCHAR (RULEMODIFIERS fragment) (BLOCK (ALT [a-z]))) (RULE UTF8CHAR (RULEMODIFIERS fragment) (BLOCK (ALT '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT))) (RULE DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9]))) (RULE HEX_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-9a-fA-F]))) (RULE OCTAL_ESC (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [0-3] OCTAL_DIGIT OCTAL_DIGIT) (ALT '\\' OCTAL_DIGIT OCTAL_DIGIT) (ALT '\\' OCTAL_DIGIT))) (RULE OCTAL_DIGIT (RULEMODIFIERS fragment) (BLOCK (ALT [0-7]))) (RULE SYM_DOT (BLOCK (ALT '.'))) (RULE SYM_COMMA (BLOCK (ALT ','))) (RULE SYM_SEMI_COLON (BLOCK (ALT ';'))) (RULE SYM_LPAREN (BLOCK (ALT '('))) (RULE SYM_RPAREN (BLOCK (ALT ')'))) (RULE SYM_LBRACKET (BLOCK (ALT '['))) (RULE SYM_RBRACKET (BLOCK (ALT ']'))) (RULE SYM_LCURLY (BLOCK (ALT '{'))) (RULE SYM_RCURLY (BLOCK (ALT '}'))) (RULE C_LOCAL_TERM_CODE_START (BLOCK (LEXER_ALT_ACTION (ALT '[' (? (BLOCK (ALT WS))) 'local' (? (BLOCK (ALT WS))) '::' (? (BLOCK (ALT WS))) (? (BLOCK (ALT EOL)))) (LEXER_ACTION_CALL mode C_LOCAL_TERM_CODE)))) (RULE C_EXTERNAL_TERM_CODE_START (BLOCK (LEXER_ALT_ACTION (ALT '[' (? (BLOCK (ALT WS))) TERM_CODE_STRING (? (BLOCK (ALT WS))) '::' (? (BLOCK (ALT WS))) (? (BLOCK (ALT EOL)))) (LEXER_ACTION_CALL mode C_EXTERNAL_TERM_CODE)))) (RULE DATE_CONSTRAINT_PATTERN (BLOCK (ALT YEAR_PATTERN '-' MONTH_PATTERN '-' DAY_PATTERN))) (RULE TIME_CONSTRAINT_PATTERN (BLOCK (ALT HOUR_PATTERN ':' MINUTE_PATTERN ':' SECOND_PATTERN (? (BLOCK (ALT TZ_PATTERN)))))) (RULE DATE_TIME_CONSTRAINT_PATTERN (BLOCK (ALT DATE_CONSTRAINT_PATTERN 'T' TIME_CONSTRAINT_PATTERN))) (RULE YEAR_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'yyyy') (ALT 'YYYY') (ALT 'yyy') (ALT 'YYY'))) (RULE MONTH_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'mm') (ALT 'MM') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE DAY_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'dd') (ALT 'DD') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE HOUR_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'hh') (ALT 'HH') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE MINUTE_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'mm') (ALT 'MM') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE SECOND_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'ss') (ALT 'SS') (ALT '??') (ALT 'XX') (ALT 'xx'))) (RULE TZ_PATTERN (RULEMODIFIERS fragment) (BLOCK (ALT 'Â±' (BLOCK (ALT 'hh') (ALT 'HH')) (? (BLOCK (ALT (? (BLOCK (ALT ':'))) (BLOCK (ALT 'mm') (ALT 'MM')))))) (ALT 'Z'))) (RULE DURATION_CONSTRAINT_PATTERN (BLOCK (ALT 'P' (? (BLOCK (ALT [yY]))) (? (BLOCK (ALT [mM]))) (? (BLOCK (ALT [Ww]))) (? (BLOCK (ALT [dD]))) (? (BLOCK (ALT 'T' (? (BLOCK (ALT [hH]))) (? (BLOCK (ALT [mM]))) (? (BLOCK (ALT [sS]))))))))) (RULE REGEX_START_CARET (BLOCK (LEXER_ALT_ACTION (ALT '{^') (LEXER_ACTION_CALL type SYM_LCURLY) (LEXER_ACTION_CALL mode REGEX_CARET)))) (RULE REGEX_START_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '{/') (LEXER_ACTION_CALL type SYM_LCURLY) (LEXER_ACTION_CALL mode REGEX_SLASH)))) (RULE SYM_NAMESPACE_SEP (BLOCK (ALT '::'))) (RULE SYM_LIST_CONTINUE (BLOCK (ALT '...'))) (RULE SYM_PLUS_OR_MINUS (BLOCK (ALT '+/-') (ALT 'Â±'))) (RULE SYM_PLUS (BLOCK (ALT '+'))) (RULE SYM_MINUS (BLOCK (ALT '-'))) (RULE SYM_PERCENT (BLOCK (ALT '%'))) (RULE SYM_CARET (BLOCK (ALT '^'))) (RULE UC_ID (BLOCK (ALT ALPHA_UCHAR (* (BLOCK (ALT ALPHANUM_US_CHAR)))))) (RULE LC_ID (BLOCK (ALT (? (BLOCK (ALT '_'))) ALPHA_LCHAR (* (BLOCK (ALT ALPHANUM_US_CHAR)))))) (RULE ODIN_URI (BLOCK (ALT URI))) (RULE PARAMETER (BLOCK (ALT '$' ALPHA_CHAR (* (BLOCK (ALT ALPHANUM_US_CHAR))))))) (mode ODIN14_BLOCK (RULE ODIN14_BLOCK_POST (BLOCK (LEXER_ALT_ACTION (ALT WS '}' (? (BLOCK (ALT WS))) EOL { setText ("}"); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RCURLY)))) (RULE ODIN14_BLOCK_POST2 (BLOCK (LEXER_ALT_ACTION (ALT WS UC_ID { setText (getText().trim()); }) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type UC_ID)))) (RULE ODIN14_BLOCK_LINE (BLOCK (ALT WS LC_ID WS (+ (BLOCK (ALT NON_EOL))) EOL))) (RULE ODIN14_BLOCK_LINE2 (BLOCK (LEXER_ALT_ACTION (ALT WS [<[] (? (BLOCK (ALT WS))) (+ (BLOCK (ALT NON_EOL))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE)))) (RULE ODIN14_BLOCK_LINE3 (BLOCK (LEXER_ALT_ACTION (ALT WS '>' (? (BLOCK (ALT WS))) EOL) (LEXER_ACTION_CALL type ODIN14_BLOCK_LINE)))) (RULE WS_ODIN (BLOCK (LEXER_ALT_ACTION (ALT WS EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE NON_EOL (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET '\n')))))) (mode C_LOCAL_TERM_CODE (RULE C_TERM_CODE_END (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET)))) (RULE ADL14_AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT ADL14_AT_CODE) (LEXER_ACTION_CALL type ADL14_AT_CODE)))) (RULE AT_CODE_L (BLOCK (LEXER_ALT_ACTION (ALT AT_CODE) (LEXER_ACTION_CALL type AT_CODE)))) (RULE COMMA_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA)))) (RULE SEMI_COLON_L (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON)))) (RULE CMT_LINE_L (BLOCK (LEXER_ALT_ACTION (ALT '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL_L (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WS_L (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))) (mode C_EXTERNAL_TERM_CODE (RULE C_TERM_CODE_END_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_RBRACKET) (LEXER_ACTION_CALL mode DEFAULT_MODE) (LEXER_ACTION_CALL type SYM_RBRACKET)))) (RULE C_EXTERNAL_TERM_CODE_STRING (BLOCK (ALT TERM_CODE_STRING))) (RULE COMMA_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_COMMA) (LEXER_ACTION_CALL type SYM_COMMA)))) (RULE SEMI_COLON_X (BLOCK (LEXER_ALT_ACTION (ALT SYM_SEMI_COLON) (LEXER_ACTION_CALL type SYM_SEMI_COLON)))) (RULE CMT_LINE_X (BLOCK (LEXER_ALT_ACTION (ALT (? (BLOCK (ALT WS))) '--' (* (BLOCK (ALT .))) EOL) (LEXER_ACTION_CALL channel COMMENT)))) (RULE EOL_X (BLOCK (LEXER_ALT_ACTION (ALT EOL) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE WS_X (BLOCK (LEXER_ALT_ACTION (ALT WS) (LEXER_ACTION_CALL channel HIDDEN))))) (mode REGEX_CARET (RULE REGEX_END_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE REGEX_SEMI_CARET (BLOCK (LEXER_ALT_ACTION (ALT '^;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE DELIMITED_REGEX (BLOCK (ALT (+ (BLOCK (ALT CARET_REGEX_CHAR))) { setText ("^" + getText() + "^"); }))) (RULE CARET_REGEX_CHAR (RULEMODIFIERS fragment) (BLOCK (ALT ESCAPE_SEQ) (ALT '\\^') (ALT (~ (SET [^\n\r])))))) (mode REGEX_SLASH (RULE REGEX_END_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/}') (LEXER_ACTION_CALL type SYM_RCURLY) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE REGEX_SEMI_SLASH (BLOCK (LEXER_ALT_ACTION (ALT '/;') (LEXER_ACTION_CALL type SYM_SEMI_COLON) (LEXER_ACTION_CALL mode DEFAULT_MODE)))) (RULE DELIMITED_REGEX_SLASH (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT SLASH_REGEX_CHAR))) { setText ("/" + getText() + "/"); }) (LEXER_ACTION_CALL type DELIMITED_REGEX))))))
2025-02-15 15:52:44:228 action-translator LogManager.java:25 translate 
        String origText = getText();
        String typeId = origText.substring (0, origText.indexOf("<")-1);
        typeId.trim();
        setText ("(" + typeId + ") <");
    
2025-02-15 15:52:44:228 action-translator LogManager.java:25 translate  setText ("}"); 
2025-02-15 15:52:44:228 action-translator LogManager.java:25 translate  setText (getText().trim()); 
2025-02-15 15:52:44:228 action-translator LogManager.java:25 translate  setText ("^" + getText() + "^"); 
2025-02-15 15:52:44:228 action-translator LogManager.java:25 translate  setText ("/" + getText() + "/"); 
2025-02-15 15:52:44:282 grammar LogManager.java:25 load Cadl14Parser from grammar/AqlParser.g4
2025-02-15 15:52:44:283 grammar LogManager.java:25 load Cadl14PrimitiveValuesParser from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14Parser.g4
2025-02-15 15:52:44:283 grammar LogManager.java:25 load Cadl2PrimitiveValuesParser from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14PrimitiveValuesParser.g4
2025-02-15 15:52:44:284 grammar LogManager.java:25 load PrimitiveValuesParser from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl2PrimitiveValuesParser.g4
2025-02-15 15:52:44:286 grammar LogManager.java:25 load AdlPathParser from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14Parser.g4
2025-02-15 15:52:44:286 grammar LogManager.java:25 load OdinParser from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/Cadl14Parser.g4
2025-02-15 15:52:44:286 grammar LogManager.java:25 load OdinValuesParser from /Users/francesc.mateu/Documents/GitHub/query-builder/src/lib/aqlToMql/grammar/OdinParser.g4
2025-02-15 15:52:44:288 grammar LogManager.java:25 before: (PARSER_GRAMMAR AqlParser (import Cadl14Parser) (OPTIONS (= tokenVocab AqlLexer)) (RULES (RULE aqlQuery (BLOCK (ALT selectClause fromClause (? (BLOCK (ALT whereClause))) (? (BLOCK (ALT orderByClause))) (? (BLOCK (ALT limitClause))) (? (BLOCK (ALT SYM_DOUBLE_DASH))) EOF))) (RULE selectClause (BLOCK (ALT SYM_SELECT (? (BLOCK (ALT SYM_DISTINCT))) (? (BLOCK (ALT top))) resultTable))) (RULE fromClause (BLOCK (ALT SYM_FROM modelTypeConstraint))) (RULE whereClause (BLOCK (ALT SYM_WHERE whereExpr))) (RULE orderByClause (BLOCK (ALT SYM_ORDER SYM_BY orderByExpr (* (BLOCK (ALT ',' orderByExpr)))))) (RULE limitClause (BLOCK (ALT SYM_LIMIT (= limit INTEGER) (? (BLOCK (ALT SYM_OFFSET (= offset INTEGER))))))) (RULE resultTable (BLOCK (ALT columnSpec (* (BLOCK (ALT ',' columnSpec)))))) (RULE columnSpec (BLOCK (ALT columnValue (? (BLOCK (ALT SYM_AS columnAlias)))))) (RULE columnAlias (BLOCK (ALT LC_ID) (ALT UC_ID))) (RULE columnValue (BLOCK (ALT dataMatchPath) (ALT aggregateFunctionCall) (ALT functionCall) (ALT primitiveLiteral))) (RULE orderByExpr (BLOCK (ALT modelPath (? (BLOCK (ALT (= order (BLOCK (ALT SYM_DESCENDING) (ALT SYM_DESC) (ALT SYM_ASCENDING) (ALT SYM_ASC))))))))) (RULE modelTypeConstraint (BLOCK (ALT modelType) (ALT modelTypeChain))) (RULE modelTypeChain (BLOCK (ALT modelType (? (BLOCK (ALT SYM_NOT))) SYM_CONTAINS modelTypeSubChain))) (RULE modelTypeSubChain (BLOCK (ALT modelTypeConstraint) (ALT '(' modelTypeExpr ')'))) (RULE modelTypeExpr (BLOCK (ALT SYM_NOT modelTypeExpr) (ALT modelTypeExpr SYM_AND modelTypeExpr) (ALT modelTypeExpr SYM_OR modelTypeExpr) (ALT modelTypeConstraint) (ALT '(' modelTypeExpr ')'))) (RULE modelType (BLOCK (ALT (= typeName UC_ID) (? (BLOCK (ALT (= variableName LC_ID)))) (? (BLOCK (ALT '[' archetypeIdPredicate ']')))))) (RULE whereExpr (BLOCK (ALT SYM_NOT whereExpr) (ALT whereExpr SYM_AND whereExpr) (ALT whereExpr SYM_OR whereExpr) (ALT '(' whereExpr ')') (ALT whereBooleanLeaf))) (RULE whereBooleanLeaf (BLOCK (ALT SYM_EXISTS dataMatchPath) (ALT comparisonOperand SYM_MATCHES matchesOperand) (ALT dataMatchPath SYM_LIKE likeOperand) (ALT dataMatchPath comparisonOperator comparisonOperand) (ALT functionCall comparisonOperator comparisonOperand))) (RULE comparisonOperand (BLOCK (ALT value) (ALT arithmeticExpr))) (RULE value (BLOCK (ALT dataMatchPath) (ALT primitiveLiteral) (ALT functionCall) (ALT PARAMETER))) (RULE likeOperand (BLOCK (ALT STRING) (ALT PARAMETER))) (RULE matchesOperand (BLOCK (ALT '{' matchesConstraint '}') (ALT terminologyFunctionCall))) (RULE matchesConstraint (BLOCK (ALT cObjectMatcher) (ALT AQL_URI) (ALT PARAMETER))) (RULE arithmeticExpr (BLOCK (ALT (ELEMENT_OPTIONS (= assoc right)) arithmeticExpr '^' arithmeticExpr) (ALT arithmeticExpr (BLOCK (ALT '/') (ALT '*') (ALT '%')) arithmeticExpr) (ALT arithmeticExpr (BLOCK (ALT '+') (ALT '-')) arithmeticExpr) (ALT arithmeticLeaf))) (RULE arithmeticLeaf (BLOCK (ALT arithmeticLiteral) (ALT value) (ALT '(' arithmeticExpr ')'))) (RULE arithmeticLiteral (BLOCK (ALT integerValue) (ALT realValue) (ALT aqlDateTimeLiteral) (ALT durationValue))) (RULE dataMatchPath (BLOCK (ALT (= variableName LC_ID) (* (BLOCK (ALT dataMatchPathSegment)))))) (RULE dataMatchPathSegment (BLOCK (ALT '/' (= attributeId LC_ID) (? (BLOCK (ALT '[' dataMatchPathPredicate ']')))))) (RULE dataMatchPathPredicate (BLOCK (ALT adlPathPredicate (? (BLOCK (ALT SYM_AND dataMatchPathValuePredicate) (ALT ',' modelSpecificPredicateShortcut)))))) (RULE dataMatchPathValuePredicate (BLOCK (ALT modelPath SYM_MATCHES CONTAINED_REGEX) (ALT modelPath comparisonOperator modelPathComparatorValue) (ALT dataMatchPathValuePredicate SYM_AND dataMatchPathValuePredicate) (ALT dataMatchPathValuePredicate SYM_OR dataMatchPathValuePredicate) (ALT '(' dataMatchPathValuePredicate ')'))) (RULE modelPathComparatorValue (BLOCK (ALT primitiveLiteral) (ALT modelPath) (ALT PARAMETER))) (RULE versionPredicate (BLOCK (ALT SYM_LATEST_VERSION) (ALT SYM_ALL_VERSIONS))) (RULE functionCall (BLOCK (ALT terminologyFunctionCall) (ALT builtInFunction functionArgs) (ALT LC_ID functionArgs))) (RULE functionArgs (BLOCK (ALT '(' (? (BLOCK (ALT value (* (BLOCK (ALT ',' value)))))) ')'))) (RULE aggregateFunctionCall (BLOCK (ALT (= name SYM_COUNT) '(' (BLOCK (ALT (? (BLOCK (ALT SYM_DISTINCT))) augmentedAdlPath) (ALT '*')) ')') (ALT aggregateMathFunction '(' augmentedAdlPath ')'))) (RULE aggregateMathFunction (BLOCK (ALT SYM_MIN) (ALT SYM_MAX) (ALT SYM_SUM) (ALT SYM_AVG))) (RULE terminologyFunctionCall (BLOCK (ALT SYM_TERMINOLOGY '(' (= operation STRING) ',' (= source STRING) ',' (BLOCK (ALT stringFunction functionArgs) (ALT STRING)) ')'))) (RULE builtInFunction (BLOCK (ALT stringFunction) (ALT numericFunction) (ALT dateTimeFunction))) (RULE stringFunction (BLOCK (ALT SYM_LENGTH) (ALT SYM_CONTAINS) (ALT SYM_POSITION) (ALT SYM_SUBSTRING) (ALT SYM_CONCAT_WS) (ALT SYM_CONCAT))) (RULE numericFunction (BLOCK (ALT SYM_ABS) (ALT SYM_MOD) (ALT SYM_CEIL) (ALT SYM_FLOOR) (ALT SYM_ROUND))) (RULE dateTimeFunction (BLOCK (ALT SYM_NOW) (ALT SYM_CURRENT_DATE_TIME) (ALT SYM_CURRENT_DATE) (ALT SYM_CURRENT_TIMEZONE) (ALT SYM_CURRENT_TIME))) (RULE comparisonOperator (BLOCK (ALT SYM_EQ) (ALT SYM_NE) (ALT SYM_GT) (ALT SYM_GE) (ALT SYM_LT) (ALT SYM_LE))) (RULE primitiveLiteral (BLOCK (ALT STRING) (ALT numericLiteral) (ALT aqlDateTimeLiteral) (ALT BOOLEAN) (ALT SYM_NULL))) (RULE numericLiteral (BLOCK (ALT INTEGER) (ALT REAL) (ALT SCI_INTEGER) (ALT SCI_REAL) (ALT SYM_MINUS numericLiteral))) (RULE aqlDateTimeLiteral (BLOCK (ALT DATE_STRING) (ALT TIME_STRING) (ALT DATE_TIME_STRING))) (RULE modelSpecificPredicateShortcut (BLOCK (ALT STRING) (ALT idCode) (ALT QUALIFIED_TERM_CODE))) (RULE top (BLOCK (ALT SYM_TOP INTEGER (? (BLOCK (ALT (= direction (BLOCK (ALT SYM_FORWARD) (ALT SYM_BACKWARD)))))))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cComplexObject (BLOCK (ALT rmTypeId (? (BLOCK (ALT nodeId))) (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' cComplexObjectDef '}'))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cComplexObjectDef (BLOCK (ALT (+ (BLOCK (ALT cAttribute)))) (ALT '*')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE nodeId (BLOCK (ALT '[' adl14_at_code ']')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cAttribute (BLOCK (ALT rmAttributeId (? (BLOCK (ALT cExistence))) (? (BLOCK (ALT cCardinality))) (? (BLOCK (ALT SYM_MATCHES '{' (BLOCK (ALT cAttributeDef) (ALT cInlinePrimitiveObject)) '}'))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cAttributeDef (BLOCK (ALT (+ (BLOCK (ALT cRegularObject))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cRegularObject (BLOCK (ALT cComplexObject) (ALT cArchetypeRoot) (ALT cComplexObjectProxy) (ALT archetypeSlot) (ALT cRegularPrimitiveObject) (ALT cOrdinal) (ALT domainSpecificExtension)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cArchetypeRoot (BLOCK (ALT SYM_USE_ARCHETYPE rmTypeId '[' adl14_at_code ',' ARCHETYPE_REF ']' (? (BLOCK (ALT cOccurrences))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cComplexObjectProxy (BLOCK (ALT SYM_USE_NODE rmTypeId (? (BLOCK (ALT cOccurrences))) adlPath)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cRegularPrimitiveObject (BLOCK (ALT rmTypeId nodeId (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' cInlinePrimitiveObject '}'))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE archetypeSlot (BLOCK (ALT SYM_ALLOW_ARCHETYPE rmTypeId nodeId (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' (? (BLOCK (ALT cIncludes))) (? (BLOCK (ALT cExcludes))) '}')))))) (ALT SYM_CLOSED)))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cIncludes (BLOCK (ALT SYM_INCLUDE (+ (BLOCK (ALT archetypeIdConstraint))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cExcludes (BLOCK (ALT SYM_EXCLUDE (+ (BLOCK (ALT archetypeIdConstraint))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE archetypeIdConstraint (BLOCK (ALT archetypeIdPath SYM_MATCHES '{' DELIMITED_REGEX '}')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE archetypeIdPath (BLOCK (ALT (? (BLOCK (ALT '/'))) LC_ID (* (BLOCK (ALT adlPath))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cExistence (BLOCK (ALT SYM_EXISTENCE SYM_MATCHES '{' existence '}')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE existence (BLOCK (ALT INTEGER) (ALT INTEGER '..' INTEGER)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cCardinality (BLOCK (ALT SYM_CARDINALITY SYM_MATCHES '{' cardinality '}')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cardinality (BLOCK (ALT multiplicity (? (BLOCK (ALT multiplicityMod (? (BLOCK (ALT multiplicityMod)))))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cOccurrences (BLOCK (ALT SYM_OCCURRENCES SYM_MATCHES '{' multiplicity '}')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE multiplicity (BLOCK (ALT INTEGER) (ALT '*') (ALT INTEGER '..' (BLOCK (ALT INTEGER) (ALT '*')))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE multiplicityMod (BLOCK (ALT orderingMod) (ALT uniqueMod)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE orderingMod (BLOCK (ALT ';' (BLOCK (ALT SYM_ORDERED) (ALT SYM_UNORDERED)))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE uniqueMod (BLOCK (ALT ';' SYM_UNIQUE)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cOrdinal (BLOCK (ALT ordinalTerm (* (BLOCK (ALT ',' ordinalTerm))) (? (BLOCK (ALT ';' ordinalValue))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE ordinalValue (BLOCK (ALT integerValue) (ALT realValue)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE ordinalTerm (BLOCK (ALT ordinalValue '|' cTerminologyCode)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE domainSpecificExtension (BLOCK (ALT ODIN14_BLOCK_START (+ (BLOCK (ALT ODIN14_BLOCK_LINE))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE rmTypeId (BLOCK (ALT UC_ID (? (BLOCK (ALT '<' rmTypeId (* (BLOCK (ALT ',' rmTypeId))) '>'))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE rmAttributeId (BLOCK (ALT LC_ID)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cObjectMatcher (BLOCK (ALT cComplexObjectMatcher) (ALT cInlinePrimitiveObject) (ALT domainSpecificExtension)))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cComplexObjectMatcher (BLOCK (ALT rmTypeId (? (BLOCK (ALT nodeId))) (? (BLOCK (ALT SYM_MATCHES '{' cComplexObjectMatcherDef '}'))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cComplexObjectMatcherDef (BLOCK (ALT (+ (BLOCK (ALT cAttributeMatcher)))) (ALT '*')))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cAttributeMatcher (BLOCK (ALT rmAttributeId (? (BLOCK (ALT SYM_MATCHES '{' (BLOCK (ALT cAttributeMatcherDef) (ALT cInlinePrimitiveObject)) '}'))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cAttributeMatcherDef (BLOCK (ALT (+ (BLOCK (ALT cRegularObjectMatcher))))))
2025-02-15 15:52:44:288 grammar LogManager.java:25 imported rule: (RULE cRegularObjectMatcher (BLOCK (ALT cComplexObjectMatcher) (ALT cRegularPrimitiveObject) (ALT cOrdinal) (ALT domainSpecificExtension)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cTerminologyCode (BLOCK (ALT terminologyLocalCode) (ALT valueSetCode) (ALT cLocalTermCode) (ALT cExternalTermCode) (ALT QUALIFIED_TERM_CODE_REF)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE terminologyLocalCode (BLOCK (ALT '[' adl14_at_code ']')))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE valueSetCode (BLOCK (ALT '[' adl14_ac_code (? (BLOCK (ALT termCodeDefault))) ']')))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE termCodeDefault (BLOCK (ALT ';' adl14_at_code)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cLocalTermCode (BLOCK (ALT C_LOCAL_TERM_CODE_START (? (BLOCK (ALT localCodesList (? (BLOCK (ALT termCodeDefault)))))) ']')))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE localCodesList (BLOCK (ALT adl14_at_code (+ (BLOCK (ALT termCodeItem))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE termCodeItem (BLOCK (ALT ',' adl14_at_code)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cExternalTermCode (BLOCK (ALT C_EXTERNAL_TERM_CODE_START (? (BLOCK (ALT externalCodesList (? (BLOCK (ALT externalTermCodeDefault)))))) ']')))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE externalCodesList (BLOCK (ALT C_EXTERNAL_TERM_CODE_STRING (+ (BLOCK (ALT externalTermCodeItem))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE externalTermCodeItem (BLOCK (ALT ',' C_EXTERNAL_TERM_CODE_STRING)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE externalTermCodeDefault (BLOCK (ALT ';' C_EXTERNAL_TERM_CODE_STRING)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE adl14_at_code (BLOCK (ALT ADL14_AT_CODE) (ALT AT_CODE)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE adl14_ac_code (BLOCK (ALT ADL14_AC_CODE) (ALT AC_CODE)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cInlinePrimitiveObject (BLOCK (ALT cInlineOrderedObject) (ALT cString) (ALT cTerminologyCode) (ALT cBoolean)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cInlineOrderedObject (BLOCK (ALT cInteger) (ALT cReal) (ALT cInlineDTemporalObject)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cInlineDTemporalObject (BLOCK (ALT cDate) (ALT cTime) (ALT cDateTime) (ALT cDuration)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cBoolean (BLOCK (ALT (BLOCK (ALT booleanValue) (ALT booleanValues)) (? (BLOCK (ALT assumedBooleanValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedBooleanValue (BLOCK (ALT ';' booleanValue)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cInteger (BLOCK (ALT (BLOCK (ALT integerValue) (ALT integerValues) (ALT integerInterval) (ALT integerIntervals)) (? (BLOCK (ALT assumedIntegerValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedIntegerValue (BLOCK (ALT ';' integerValue)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cReal (BLOCK (ALT (BLOCK (ALT realValue) (ALT realValues) (ALT realInterval) (ALT realIntervals)) (? (BLOCK (ALT assumedRealValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedRealValue (BLOCK (ALT ';' realValue)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cDateTime (BLOCK (ALT (BLOCK (ALT DATE_TIME_CONSTRAINT_PATTERN) (ALT dateTimeValue) (ALT dateTimeValues) (ALT dateTimeInterval) (ALT dateTimeIntervals)) (? (BLOCK (ALT assumedDateTimeValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedDateTimeValue (BLOCK (ALT ';' dateTimeValue)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cDate (BLOCK (ALT (BLOCK (ALT DATE_CONSTRAINT_PATTERN) (ALT dateValue) (ALT dateValues) (ALT dateInterval) (ALT dateIntervals)) (? (BLOCK (ALT assumedDateValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedDateValue (BLOCK (ALT ';' dateValue)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cTime (BLOCK (ALT (BLOCK (ALT TIME_CONSTRAINT_PATTERN) (ALT timeValue) (ALT timeValues) (ALT timeInterval) (ALT timeIntervals)) (? (BLOCK (ALT assumedTimeValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedTimeValue (BLOCK (ALT ';' timeValue)))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE cDuration (BLOCK (ALT (BLOCK (ALT DURATION_CONSTRAINT_PATTERN (? (BLOCK (ALT '/' (BLOCK (ALT durationInterval) (ALT durationValue)))))) (ALT durationValue) (ALT durationValues) (ALT durationInterval) (ALT durationIntervals)) (? (BLOCK (ALT assumedDurationValue))))))
2025-02-15 15:52:44:289 grammar LogManager.java:25 imported rule: (RULE assumedDurationValue (BLOCK (ALT ';' durationValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE cString (BLOCK (ALT (BLOCK (ALT stringValue) (ALT stringValues) (ALT DELIMITED_REGEX)) (? (BLOCK (ALT assumedStringValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE assumedStringValue (BLOCK (ALT ';' stringValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE cTerminologyCode (BLOCK (ALT '[' (BLOCK (ALT AC_CODE (? (BLOCK (ALT ';' AT_CODE)))) (ALT AT_CODE)) ']') (ALT LOCAL_TERM_CODE_ID (? (BLOCK (ALT ';' LOCAL_TERM_CODE_ID)))) (ALT LOCAL_TERM_CODE_ID (+ (BLOCK (ALT ',' LOCAL_TERM_CODE_ID))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveObject (BLOCK (ALT primitiveValue) (ALT primitiveList) (ALT primitiveArray) (ALT primitiveSet) (ALT primitiveInterval)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveValue (BLOCK (ALT stringValue) (ALT integerValue) (ALT realValue) (ALT booleanValue) (ALT characterValue) (ALT termCodeValue) (ALT dateValue) (ALT timeValue) (ALT dateTimeValue) (ALT durationValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveList (BLOCK (ALT '(' primitiveValues ')')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveArray (BLOCK (ALT '[' primitiveValues ']')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveSet (BLOCK (ALT '{' primitiveValues '}')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveValues (BLOCK (ALT stringValues) (ALT integerValues) (ALT realValues) (ALT booleanValues) (ALT characterValues) (ALT termCodeListValue) (ALT dateValues) (ALT timeValues) (ALT dateTimeValues) (ALT durationValues)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE primitiveInterval (BLOCK (ALT integerInterval) (ALT realInterval) (ALT dateInterval) (ALT timeInterval) (ALT dateTimeInterval) (ALT durationInterval)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE stringValue (BLOCK (ALT STRING)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE stringValues (BLOCK (ALT stringValue (* (BLOCK (ALT ',' stringValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE integerValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) (BLOCK (ALT INTEGER) (ALT SCI_INTEGER)))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE integerValues (BLOCK (ALT integerValue (* (BLOCK (ALT ',' integerValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE integerInterval (BLOCK (ALT '|' integerIntervalRange '|')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE integerIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) integerValue '..' (? (BLOCK (ALT SYM_LT))) integerValue) (ALT (? (BLOCK (ALT relop))) integerValue) (ALT integerValue SYM_PLUS_OR_MINUS integerValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE integerIntervals (BLOCK (ALT integerInterval (* (BLOCK (ALT ',' integerInterval))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE realValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) (BLOCK (ALT REAL) (ALT SCI_REAL) (ALT REAL_PERCENT)))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE realValues (BLOCK (ALT realValue (* (BLOCK (ALT ',' realValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE realInterval (BLOCK (ALT '|' realIntervalRange '|')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE realIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) realValue '..' (? (BLOCK (ALT SYM_LT))) realValue) (ALT (? (BLOCK (ALT relop))) realValue) (ALT realValue SYM_PLUS_OR_MINUS realValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE realIntervals (BLOCK (ALT realInterval (* (BLOCK (ALT ',' realInterval))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE booleanValue (BLOCK (ALT SYM_TRUE) (ALT SYM_FALSE)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE booleanValues (BLOCK (ALT booleanValue (* (BLOCK (ALT ',' booleanValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE characterValue (BLOCK (ALT CHARACTER)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE characterValues (BLOCK (ALT characterValue (* (BLOCK (ALT ',' characterValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateValue (BLOCK (ALT ISO8601_DATE_AUGMENTED)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateValues (BLOCK (ALT dateValue (* (BLOCK (ALT ',' dateValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateInterval (BLOCK (ALT '|' dateIntervalRange '|')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) dateValue '..' (? (BLOCK (ALT SYM_LT))) dateValue) (ALT (? (BLOCK (ALT relop))) dateValue) (ALT dateValue SYM_PLUS_OR_MINUS durationValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateIntervals (BLOCK (ALT dateInterval (* (BLOCK (ALT ',' dateInterval))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE timeValue (BLOCK (ALT ISO8601_TIME_AUGMENTED)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE timeValues (BLOCK (ALT timeValue (* (BLOCK (ALT ',' timeValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE timeInterval (BLOCK (ALT '|' timeIntervalRange '|')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE timeIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) timeValue '..' (? (BLOCK (ALT SYM_LT))) timeValue) (ALT (? (BLOCK (ALT relop))) timeValue) (ALT timeValue SYM_PLUS_OR_MINUS durationValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE timeIntervals (BLOCK (ALT timeInterval (* (BLOCK (ALT ',' timeInterval))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateTimeValue (BLOCK (ALT ISO8601_DATE_TIME_AUGMENTED)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateTimeValues (BLOCK (ALT dateTimeValue (* (BLOCK (ALT ',' dateTimeValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateTimeInterval (BLOCK (ALT '|' dateTimeIntervalRange '|')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateTimeIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) dateTimeValue '..' (? (BLOCK (ALT SYM_LT))) dateTimeValue) (ALT (? (BLOCK (ALT relop))) dateTimeValue) (ALT dateTimeValue SYM_PLUS_OR_MINUS durationValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE dateTimeIntervals (BLOCK (ALT dateTimeInterval (* (BLOCK (ALT ',' dateTimeInterval))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE durationValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) ISO8601_DURATION)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE durationValues (BLOCK (ALT durationValue (* (BLOCK (ALT ',' durationValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE durationInterval (BLOCK (ALT '|' durationIntervalRange '|')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE durationIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) durationValue '..' (? (BLOCK (ALT SYM_LT))) durationValue) (ALT (? (BLOCK (ALT relop))) durationValue) (ALT durationValue SYM_PLUS_OR_MINUS durationValue)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE durationIntervals (BLOCK (ALT durationInterval (* (BLOCK (ALT ',' durationInterval))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE termCodeValue (BLOCK (ALT QUALIFIED_TERM_CODE_ID) (ALT LOCAL_TERM_CODE_ID)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE termCodeListValue (BLOCK (ALT termCodeValue (* (BLOCK (ALT ',' termCodeValue))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE relop (BLOCK (ALT SYM_LE) (ALT SYM_GE) (ALT SYM_GT) (ALT SYM_LT)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE adlPath (BLOCK (ALT (+ (BLOCK (ALT '/' adlPathSegment))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE adlPathSegment (BLOCK (ALT LC_ID (? (BLOCK (ALT '[' adlPathPredicate ']'))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE adlPathPredicate (BLOCK (ALT archetypeIdPredicate) (ALT idCode)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE archetypeIdPredicate (BLOCK (ALT ARCHETYPE_REF)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE idCode (BLOCK (ALT AT_CODE) (ALT ADL14_AT_CODE) (ALT ID_CODE)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE augmentedAdlPath (BLOCK (ALT (= varName LC_ID) adlPath (? (BLOCK (ALT modelSubPath))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE modelPath (BLOCK (ALT (= varName LC_ID) modelSubPath)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE modelSubPath (BLOCK (ALT (+ (BLOCK (ALT modelPathSegment))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE modelPathSegment (BLOCK (ALT '/' (= attributeId LC_ID))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinObject (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT odinAttrVal)))) (ALT odinObjectValueBlock)) (? (BLOCK (ALT EOF))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinAttrVal (BLOCK (ALT odinAttrName '=' odinObjectBlock (? (BLOCK (ALT ';'))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinAttrName (BLOCK (ALT UC_ID) (ALT LC_ID)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinObjectBlock (BLOCK (ALT odinObjectValueBlock) (ALT odinObjectReferenceBlock)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinObjectValueBlock (BLOCK (ALT (? (BLOCK (ALT rmTypeSpec))) '<' (? (BLOCK (ALT primitiveObject) (ALT (+ (BLOCK (ALT odinAttrVal)))) (ALT (+ (BLOCK (ALT odinKeyedObject)))) (ALT ODIN_URI))) '>')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE rmTypeSpec (BLOCK (ALT '(' rmTypeId ')')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinKeyedObject (BLOCK (ALT odinKeySpec '=' odinObjectBlock)))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinKeySpec (BLOCK (ALT '[' primitiveValue ']')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinObjectReferenceBlock (BLOCK (ALT '<' odinPathList '>')))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinPathList (BLOCK (ALT odinPath (? (BLOCK (ALT ',' SYM_LIST_CONTINUE) (ALT (+ (BLOCK (ALT ',' odinPath)))))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinPath (BLOCK (ALT (? (BLOCK (ALT odinKeySpec))) (+ (BLOCK (ALT odinPathSegment))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE odinPathSegment (BLOCK (ALT '/' LC_ID (? (BLOCK (ALT odinKeySpec))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported rule: (RULE rmTypeId (BLOCK (ALT UC_ID (? (BLOCK (ALT '<' rmTypeId (* (BLOCK (ALT ',' rmTypeId))) '>'))))))
2025-02-15 15:52:44:290 grammar LogManager.java:25 imported actions: []
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE primitiveObject (BLOCK (ALT primitiveValue) (ALT primitiveListValue) (ALT primitiveIntervalValue)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE primitiveValue (BLOCK (ALT stringValue) (ALT integerValue) (ALT realValue) (ALT booleanValue) (ALT characterValue) (ALT termCodeValue) (ALT dateValue) (ALT timeValue) (ALT dateTimeValue) (ALT durationValue)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE primitiveListValue (BLOCK (ALT stringListValue) (ALT integerListValue) (ALT realListValue) (ALT booleanListValue) (ALT characterListValue) (ALT termCodeListValue) (ALT dateListValue) (ALT timeListValue) (ALT dateTimeListValue) (ALT durationListValue)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE primitiveIntervalValue (BLOCK (ALT integerIntervalValue) (ALT realIntervalValue) (ALT dateIntervalValue) (ALT timeIntervalValue) (ALT dateTimeIntervalValue) (ALT durationIntervalValue)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE stringValue (BLOCK (ALT STRING)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE stringListValue (BLOCK (ALT stringValue (BLOCK (ALT (+ (BLOCK (ALT ',' stringValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE integerValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) (BLOCK (ALT INTEGER) (ALT SCI_INTEGER)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE integerListValue (BLOCK (ALT integerValue (BLOCK (ALT (+ (BLOCK (ALT ',' integerValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE integerIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) integerValue '..' (? (BLOCK (ALT SYM_LT))) integerValue '|') (ALT '|' (? (BLOCK (ALT relop))) integerValue '|') (ALT '|' integerValue SYM_PLUS_OR_MINUS integerValue '|')))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE integerIntervalListValue (BLOCK (ALT integerIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' integerIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE realValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) (BLOCK (ALT REAL) (ALT SCI_REAL)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE realListValue (BLOCK (ALT realValue (BLOCK (ALT (+ (BLOCK (ALT ',' realValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE realIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) realValue '..' (? (BLOCK (ALT SYM_LT))) realValue '|') (ALT '|' (? (BLOCK (ALT relop))) realValue '|') (ALT '|' realValue SYM_PLUS_OR_MINUS realValue '|')))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE realIntervalListValue (BLOCK (ALT realIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' realIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE booleanValue (BLOCK (ALT SYM_TRUE) (ALT SYM_FALSE)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE booleanListValue (BLOCK (ALT booleanValue (BLOCK (ALT (+ (BLOCK (ALT ',' booleanValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE characterValue (BLOCK (ALT CHARACTER)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE characterListValue (BLOCK (ALT characterValue (BLOCK (ALT (+ (BLOCK (ALT ',' characterValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateValue (BLOCK (ALT ISO8601_DATE_AUGMENTED)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateListValue (BLOCK (ALT dateValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) dateValue '..' (? (BLOCK (ALT SYM_LT))) dateValue '|') (ALT '|' (? (BLOCK (ALT relop))) dateValue '|') (ALT '|' dateValue SYM_PLUS_OR_MINUS durationValue '|')))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateIntervalListValue (BLOCK (ALT dateIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE timeValue (BLOCK (ALT ISO8601_TIME_AUGMENTED)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE timeListValue (BLOCK (ALT timeValue (BLOCK (ALT (+ (BLOCK (ALT ',' timeValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE timeIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) timeValue '..' (? (BLOCK (ALT SYM_LT))) timeValue '|') (ALT '|' (? (BLOCK (ALT relop))) timeValue '|') (ALT '|' timeValue SYM_PLUS_OR_MINUS durationValue '|')))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE timeIntervalListValue (BLOCK (ALT timeIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' timeIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateTimeValue (BLOCK (ALT ISO8601_DATE_TIME_AUGMENTED)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateTimeListValue (BLOCK (ALT dateTimeValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateTimeValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateTimeIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) dateTimeValue '..' (? (BLOCK (ALT SYM_LT))) dateTimeValue '|') (ALT '|' (? (BLOCK (ALT relop))) dateTimeValue '|') (ALT '|' dateTimeValue SYM_PLUS_OR_MINUS durationValue '|')))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE dateTimeIntervalListValue (BLOCK (ALT dateTimeIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateTimeIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE durationValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) ISO8601_DURATION)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE durationListValue (BLOCK (ALT durationValue (BLOCK (ALT (+ (BLOCK (ALT ',' durationValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE durationIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) durationValue '..' (? (BLOCK (ALT SYM_LT))) durationValue '|') (ALT '|' (? (BLOCK (ALT relop))) durationValue '|') (ALT '|' durationValue SYM_PLUS_OR_MINUS durationValue '|')))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE durationIntervalListValue (BLOCK (ALT durationIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' durationIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE termCodeValue (BLOCK (ALT QUALIFIED_TERM_CODE_REF)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE termCodeListValue (BLOCK (ALT termCodeValue (BLOCK (ALT (+ (BLOCK (ALT ',' termCodeValue)))) (ALT ',' SYM_LIST_CONTINUE)))))
2025-02-15 15:52:44:291 grammar LogManager.java:25 imported rule: (RULE relop (BLOCK (ALT SYM_LE) (ALT SYM_GE) (ALT SYM_GT) (ALT SYM_LT)))
2025-02-15 15:52:44:291 grammar LogManager.java:25 Grammar: (PARSER_GRAMMAR AqlParser (import Cadl14Parser) (OPTIONS (= tokenVocab AqlLexer)) (RULES (RULE aqlQuery (BLOCK (ALT selectClause fromClause (? (BLOCK (ALT whereClause))) (? (BLOCK (ALT orderByClause))) (? (BLOCK (ALT limitClause))) (? (BLOCK (ALT SYM_DOUBLE_DASH))) EOF))) (RULE selectClause (BLOCK (ALT SYM_SELECT (? (BLOCK (ALT SYM_DISTINCT))) (? (BLOCK (ALT top))) resultTable))) (RULE fromClause (BLOCK (ALT SYM_FROM modelTypeConstraint))) (RULE whereClause (BLOCK (ALT SYM_WHERE whereExpr))) (RULE orderByClause (BLOCK (ALT SYM_ORDER SYM_BY orderByExpr (* (BLOCK (ALT ',' orderByExpr)))))) (RULE limitClause (BLOCK (ALT SYM_LIMIT (= limit INTEGER) (? (BLOCK (ALT SYM_OFFSET (= offset INTEGER))))))) (RULE resultTable (BLOCK (ALT columnSpec (* (BLOCK (ALT ',' columnSpec)))))) (RULE columnSpec (BLOCK (ALT columnValue (? (BLOCK (ALT SYM_AS columnAlias)))))) (RULE columnAlias (BLOCK (ALT LC_ID) (ALT UC_ID))) (RULE columnValue (BLOCK (ALT dataMatchPath) (ALT aggregateFunctionCall) (ALT functionCall) (ALT primitiveLiteral))) (RULE orderByExpr (BLOCK (ALT modelPath (? (BLOCK (ALT (= order (BLOCK (ALT SYM_DESCENDING) (ALT SYM_DESC) (ALT SYM_ASCENDING) (ALT SYM_ASC))))))))) (RULE modelTypeConstraint (BLOCK (ALT modelType) (ALT modelTypeChain))) (RULE modelTypeChain (BLOCK (ALT modelType (? (BLOCK (ALT SYM_NOT))) SYM_CONTAINS modelTypeSubChain))) (RULE modelTypeSubChain (BLOCK (ALT modelTypeConstraint) (ALT '(' modelTypeExpr ')'))) (RULE modelTypeExpr (BLOCK (ALT SYM_NOT modelTypeExpr) (ALT modelTypeExpr SYM_AND modelTypeExpr) (ALT modelTypeExpr SYM_OR modelTypeExpr) (ALT modelTypeConstraint) (ALT '(' modelTypeExpr ')'))) (RULE modelType (BLOCK (ALT (= typeName UC_ID) (? (BLOCK (ALT (= variableName LC_ID)))) (? (BLOCK (ALT '[' archetypeIdPredicate ']')))))) (RULE whereExpr (BLOCK (ALT SYM_NOT whereExpr) (ALT whereExpr SYM_AND whereExpr) (ALT whereExpr SYM_OR whereExpr) (ALT '(' whereExpr ')') (ALT whereBooleanLeaf))) (RULE whereBooleanLeaf (BLOCK (ALT SYM_EXISTS dataMatchPath) (ALT comparisonOperand SYM_MATCHES matchesOperand) (ALT dataMatchPath SYM_LIKE likeOperand) (ALT dataMatchPath comparisonOperator comparisonOperand) (ALT functionCall comparisonOperator comparisonOperand))) (RULE comparisonOperand (BLOCK (ALT value) (ALT arithmeticExpr))) (RULE value (BLOCK (ALT dataMatchPath) (ALT primitiveLiteral) (ALT functionCall) (ALT PARAMETER))) (RULE likeOperand (BLOCK (ALT STRING) (ALT PARAMETER))) (RULE matchesOperand (BLOCK (ALT '{' matchesConstraint '}') (ALT terminologyFunctionCall))) (RULE matchesConstraint (BLOCK (ALT cObjectMatcher) (ALT AQL_URI) (ALT PARAMETER))) (RULE arithmeticExpr (BLOCK (ALT (ELEMENT_OPTIONS (= assoc right)) arithmeticExpr '^' arithmeticExpr) (ALT arithmeticExpr (BLOCK (ALT '/') (ALT '*') (ALT '%')) arithmeticExpr) (ALT arithmeticExpr (BLOCK (ALT '+') (ALT '-')) arithmeticExpr) (ALT arithmeticLeaf))) (RULE arithmeticLeaf (BLOCK (ALT arithmeticLiteral) (ALT value) (ALT '(' arithmeticExpr ')'))) (RULE arithmeticLiteral (BLOCK (ALT integerValue) (ALT realValue) (ALT aqlDateTimeLiteral) (ALT durationValue))) (RULE dataMatchPath (BLOCK (ALT (= variableName LC_ID) (* (BLOCK (ALT dataMatchPathSegment)))))) (RULE dataMatchPathSegment (BLOCK (ALT '/' (= attributeId LC_ID) (? (BLOCK (ALT '[' dataMatchPathPredicate ']')))))) (RULE dataMatchPathPredicate (BLOCK (ALT adlPathPredicate (? (BLOCK (ALT SYM_AND dataMatchPathValuePredicate) (ALT ',' modelSpecificPredicateShortcut)))))) (RULE dataMatchPathValuePredicate (BLOCK (ALT modelPath SYM_MATCHES CONTAINED_REGEX) (ALT modelPath comparisonOperator modelPathComparatorValue) (ALT dataMatchPathValuePredicate SYM_AND dataMatchPathValuePredicate) (ALT dataMatchPathValuePredicate SYM_OR dataMatchPathValuePredicate) (ALT '(' dataMatchPathValuePredicate ')'))) (RULE modelPathComparatorValue (BLOCK (ALT primitiveLiteral) (ALT modelPath) (ALT PARAMETER))) (RULE versionPredicate (BLOCK (ALT SYM_LATEST_VERSION) (ALT SYM_ALL_VERSIONS))) (RULE functionCall (BLOCK (ALT terminologyFunctionCall) (ALT builtInFunction functionArgs) (ALT LC_ID functionArgs))) (RULE functionArgs (BLOCK (ALT '(' (? (BLOCK (ALT value (* (BLOCK (ALT ',' value)))))) ')'))) (RULE aggregateFunctionCall (BLOCK (ALT (= name SYM_COUNT) '(' (BLOCK (ALT (? (BLOCK (ALT SYM_DISTINCT))) augmentedAdlPath) (ALT '*')) ')') (ALT aggregateMathFunction '(' augmentedAdlPath ')'))) (RULE aggregateMathFunction (BLOCK (ALT SYM_MIN) (ALT SYM_MAX) (ALT SYM_SUM) (ALT SYM_AVG))) (RULE terminologyFunctionCall (BLOCK (ALT SYM_TERMINOLOGY '(' (= operation STRING) ',' (= source STRING) ',' (BLOCK (ALT stringFunction functionArgs) (ALT STRING)) ')'))) (RULE builtInFunction (BLOCK (ALT stringFunction) (ALT numericFunction) (ALT dateTimeFunction))) (RULE stringFunction (BLOCK (ALT SYM_LENGTH) (ALT SYM_CONTAINS) (ALT SYM_POSITION) (ALT SYM_SUBSTRING) (ALT SYM_CONCAT_WS) (ALT SYM_CONCAT))) (RULE numericFunction (BLOCK (ALT SYM_ABS) (ALT SYM_MOD) (ALT SYM_CEIL) (ALT SYM_FLOOR) (ALT SYM_ROUND))) (RULE dateTimeFunction (BLOCK (ALT SYM_NOW) (ALT SYM_CURRENT_DATE_TIME) (ALT SYM_CURRENT_DATE) (ALT SYM_CURRENT_TIMEZONE) (ALT SYM_CURRENT_TIME))) (RULE comparisonOperator (BLOCK (ALT SYM_EQ) (ALT SYM_NE) (ALT SYM_GT) (ALT SYM_GE) (ALT SYM_LT) (ALT SYM_LE))) (RULE primitiveLiteral (BLOCK (ALT STRING) (ALT numericLiteral) (ALT aqlDateTimeLiteral) (ALT BOOLEAN) (ALT SYM_NULL))) (RULE numericLiteral (BLOCK (ALT INTEGER) (ALT REAL) (ALT SCI_INTEGER) (ALT SCI_REAL) (ALT SYM_MINUS numericLiteral))) (RULE aqlDateTimeLiteral (BLOCK (ALT DATE_STRING) (ALT TIME_STRING) (ALT DATE_TIME_STRING))) (RULE modelSpecificPredicateShortcut (BLOCK (ALT STRING) (ALT idCode) (ALT QUALIFIED_TERM_CODE))) (RULE top (BLOCK (ALT SYM_TOP INTEGER (? (BLOCK (ALT (= direction (BLOCK (ALT SYM_FORWARD) (ALT SYM_BACKWARD))))))))) (RULE cComplexObject (BLOCK (ALT rmTypeId (? (BLOCK (ALT nodeId))) (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' cComplexObjectDef '}')))))) (RULE cComplexObjectDef (BLOCK (ALT (+ (BLOCK (ALT cAttribute)))) (ALT '*'))) (RULE nodeId (BLOCK (ALT '[' adl14_at_code ']'))) (RULE cAttribute (BLOCK (ALT rmAttributeId (? (BLOCK (ALT cExistence))) (? (BLOCK (ALT cCardinality))) (? (BLOCK (ALT SYM_MATCHES '{' (BLOCK (ALT cAttributeDef) (ALT cInlinePrimitiveObject)) '}')))))) (RULE cAttributeDef (BLOCK (ALT (+ (BLOCK (ALT cRegularObject)))))) (RULE cRegularObject (BLOCK (ALT cComplexObject) (ALT cArchetypeRoot) (ALT cComplexObjectProxy) (ALT archetypeSlot) (ALT cRegularPrimitiveObject) (ALT cOrdinal) (ALT domainSpecificExtension))) (RULE cArchetypeRoot (BLOCK (ALT SYM_USE_ARCHETYPE rmTypeId '[' adl14_at_code ',' ARCHETYPE_REF ']' (? (BLOCK (ALT cOccurrences)))))) (RULE cComplexObjectProxy (BLOCK (ALT SYM_USE_NODE rmTypeId (? (BLOCK (ALT cOccurrences))) adlPath))) (RULE cRegularPrimitiveObject (BLOCK (ALT rmTypeId nodeId (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' cInlinePrimitiveObject '}')))))) (RULE archetypeSlot (BLOCK (ALT SYM_ALLOW_ARCHETYPE rmTypeId nodeId (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' (? (BLOCK (ALT cIncludes))) (? (BLOCK (ALT cExcludes))) '}')))))) (ALT SYM_CLOSED))))) (RULE cIncludes (BLOCK (ALT SYM_INCLUDE (+ (BLOCK (ALT archetypeIdConstraint)))))) (RULE cExcludes (BLOCK (ALT SYM_EXCLUDE (+ (BLOCK (ALT archetypeIdConstraint)))))) (RULE archetypeIdConstraint (BLOCK (ALT archetypeIdPath SYM_MATCHES '{' DELIMITED_REGEX '}'))) (RULE archetypeIdPath (BLOCK (ALT (? (BLOCK (ALT '/'))) LC_ID (* (BLOCK (ALT adlPath)))))) (RULE cExistence (BLOCK (ALT SYM_EXISTENCE SYM_MATCHES '{' existence '}'))) (RULE existence (BLOCK (ALT INTEGER) (ALT INTEGER '..' INTEGER))) (RULE cCardinality (BLOCK (ALT SYM_CARDINALITY SYM_MATCHES '{' cardinality '}'))) (RULE cardinality (BLOCK (ALT multiplicity (? (BLOCK (ALT multiplicityMod (? (BLOCK (ALT multiplicityMod))))))))) (RULE cOccurrences (BLOCK (ALT SYM_OCCURRENCES SYM_MATCHES '{' multiplicity '}'))) (RULE multiplicity (BLOCK (ALT INTEGER) (ALT '*') (ALT INTEGER '..' (BLOCK (ALT INTEGER) (ALT '*'))))) (RULE multiplicityMod (BLOCK (ALT orderingMod) (ALT uniqueMod))) (RULE orderingMod (BLOCK (ALT ';' (BLOCK (ALT SYM_ORDERED) (ALT SYM_UNORDERED))))) (RULE uniqueMod (BLOCK (ALT ';' SYM_UNIQUE))) (RULE cOrdinal (BLOCK (ALT ordinalTerm (* (BLOCK (ALT ',' ordinalTerm))) (? (BLOCK (ALT ';' ordinalValue)))))) (RULE ordinalValue (BLOCK (ALT integerValue) (ALT realValue))) (RULE ordinalTerm (BLOCK (ALT ordinalValue '|' cTerminologyCode))) (RULE domainSpecificExtension (BLOCK (ALT ODIN14_BLOCK_START (+ (BLOCK (ALT ODIN14_BLOCK_LINE)))))) (RULE rmTypeId (BLOCK (ALT UC_ID (? (BLOCK (ALT '<' rmTypeId (* (BLOCK (ALT ',' rmTypeId))) '>')))))) (RULE rmAttributeId (BLOCK (ALT LC_ID))) (RULE cObjectMatcher (BLOCK (ALT cComplexObjectMatcher) (ALT cInlinePrimitiveObject) (ALT domainSpecificExtension))) (RULE cComplexObjectMatcher (BLOCK (ALT rmTypeId (? (BLOCK (ALT nodeId))) (? (BLOCK (ALT SYM_MATCHES '{' cComplexObjectMatcherDef '}')))))) (RULE cComplexObjectMatcherDef (BLOCK (ALT (+ (BLOCK (ALT cAttributeMatcher)))) (ALT '*'))) (RULE cAttributeMatcher (BLOCK (ALT rmAttributeId (? (BLOCK (ALT SYM_MATCHES '{' (BLOCK (ALT cAttributeMatcherDef) (ALT cInlinePrimitiveObject)) '}')))))) (RULE cAttributeMatcherDef (BLOCK (ALT (+ (BLOCK (ALT cRegularObjectMatcher)))))) (RULE cRegularObjectMatcher (BLOCK (ALT cComplexObjectMatcher) (ALT cRegularPrimitiveObject) (ALT cOrdinal) (ALT domainSpecificExtension))) (RULE cTerminologyCode (BLOCK (ALT terminologyLocalCode) (ALT valueSetCode) (ALT cLocalTermCode) (ALT cExternalTermCode) (ALT QUALIFIED_TERM_CODE_REF))) (RULE terminologyLocalCode (BLOCK (ALT '[' adl14_at_code ']'))) (RULE valueSetCode (BLOCK (ALT '[' adl14_ac_code (? (BLOCK (ALT termCodeDefault))) ']'))) (RULE termCodeDefault (BLOCK (ALT ';' adl14_at_code))) (RULE cLocalTermCode (BLOCK (ALT C_LOCAL_TERM_CODE_START (? (BLOCK (ALT localCodesList (? (BLOCK (ALT termCodeDefault)))))) ']'))) (RULE localCodesList (BLOCK (ALT adl14_at_code (+ (BLOCK (ALT termCodeItem)))))) (RULE termCodeItem (BLOCK (ALT ',' adl14_at_code))) (RULE cExternalTermCode (BLOCK (ALT C_EXTERNAL_TERM_CODE_START (? (BLOCK (ALT externalCodesList (? (BLOCK (ALT externalTermCodeDefault)))))) ']'))) (RULE externalCodesList (BLOCK (ALT C_EXTERNAL_TERM_CODE_STRING (+ (BLOCK (ALT externalTermCodeItem)))))) (RULE externalTermCodeItem (BLOCK (ALT ',' C_EXTERNAL_TERM_CODE_STRING))) (RULE externalTermCodeDefault (BLOCK (ALT ';' C_EXTERNAL_TERM_CODE_STRING))) (RULE adl14_at_code (BLOCK (ALT ADL14_AT_CODE) (ALT AT_CODE))) (RULE adl14_ac_code (BLOCK (ALT ADL14_AC_CODE) (ALT AC_CODE))) (RULE cInlinePrimitiveObject (BLOCK (ALT cInlineOrderedObject) (ALT cString) (ALT cTerminologyCode) (ALT cBoolean))) (RULE cInlineOrderedObject (BLOCK (ALT cInteger) (ALT cReal) (ALT cInlineDTemporalObject))) (RULE cInlineDTemporalObject (BLOCK (ALT cDate) (ALT cTime) (ALT cDateTime) (ALT cDuration))) (RULE cBoolean (BLOCK (ALT (BLOCK (ALT booleanValue) (ALT booleanValues)) (? (BLOCK (ALT assumedBooleanValue)))))) (RULE assumedBooleanValue (BLOCK (ALT ';' booleanValue))) (RULE cInteger (BLOCK (ALT (BLOCK (ALT integerValue) (ALT integerValues) (ALT integerInterval) (ALT integerIntervals)) (? (BLOCK (ALT assumedIntegerValue)))))) (RULE assumedIntegerValue (BLOCK (ALT ';' integerValue))) (RULE cReal (BLOCK (ALT (BLOCK (ALT realValue) (ALT realValues) (ALT realInterval) (ALT realIntervals)) (? (BLOCK (ALT assumedRealValue)))))) (RULE assumedRealValue (BLOCK (ALT ';' realValue))) (RULE cDateTime (BLOCK (ALT (BLOCK (ALT DATE_TIME_CONSTRAINT_PATTERN) (ALT dateTimeValue) (ALT dateTimeValues) (ALT dateTimeInterval) (ALT dateTimeIntervals)) (? (BLOCK (ALT assumedDateTimeValue)))))) (RULE assumedDateTimeValue (BLOCK (ALT ';' dateTimeValue))) (RULE cDate (BLOCK (ALT (BLOCK (ALT DATE_CONSTRAINT_PATTERN) (ALT dateValue) (ALT dateValues) (ALT dateInterval) (ALT dateIntervals)) (? (BLOCK (ALT assumedDateValue)))))) (RULE assumedDateValue (BLOCK (ALT ';' dateValue))) (RULE cTime (BLOCK (ALT (BLOCK (ALT TIME_CONSTRAINT_PATTERN) (ALT timeValue) (ALT timeValues) (ALT timeInterval) (ALT timeIntervals)) (? (BLOCK (ALT assumedTimeValue)))))) (RULE assumedTimeValue (BLOCK (ALT ';' timeValue))) (RULE cDuration (BLOCK (ALT (BLOCK (ALT DURATION_CONSTRAINT_PATTERN (? (BLOCK (ALT '/' (BLOCK (ALT durationInterval) (ALT durationValue)))))) (ALT durationValue) (ALT durationValues) (ALT durationInterval) (ALT durationIntervals)) (? (BLOCK (ALT assumedDurationValue)))))) (RULE assumedDurationValue (BLOCK (ALT ';' durationValue))) (RULE cString (BLOCK (ALT (BLOCK (ALT stringValue) (ALT stringValues) (ALT DELIMITED_REGEX)) (? (BLOCK (ALT assumedStringValue)))))) (RULE assumedStringValue (BLOCK (ALT ';' stringValue))) (RULE primitiveObject (BLOCK (ALT primitiveValue) (ALT primitiveList) (ALT primitiveArray) (ALT primitiveSet) (ALT primitiveInterval))) (RULE primitiveValue (BLOCK (ALT stringValue) (ALT integerValue) (ALT realValue) (ALT booleanValue) (ALT characterValue) (ALT termCodeValue) (ALT dateValue) (ALT timeValue) (ALT dateTimeValue) (ALT durationValue))) (RULE primitiveList (BLOCK (ALT '(' primitiveValues ')'))) (RULE primitiveArray (BLOCK (ALT '[' primitiveValues ']'))) (RULE primitiveSet (BLOCK (ALT '{' primitiveValues '}'))) (RULE primitiveValues (BLOCK (ALT stringValues) (ALT integerValues) (ALT realValues) (ALT booleanValues) (ALT characterValues) (ALT termCodeListValue) (ALT dateValues) (ALT timeValues) (ALT dateTimeValues) (ALT durationValues))) (RULE primitiveInterval (BLOCK (ALT integerInterval) (ALT realInterval) (ALT dateInterval) (ALT timeInterval) (ALT dateTimeInterval) (ALT durationInterval))) (RULE stringValue (BLOCK (ALT STRING))) (RULE stringValues (BLOCK (ALT stringValue (* (BLOCK (ALT ',' stringValue)))))) (RULE integerValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) (BLOCK (ALT INTEGER) (ALT SCI_INTEGER))))) (RULE integerValues (BLOCK (ALT integerValue (* (BLOCK (ALT ',' integerValue)))))) (RULE integerInterval (BLOCK (ALT '|' integerIntervalRange '|'))) (RULE integerIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) integerValue '..' (? (BLOCK (ALT SYM_LT))) integerValue) (ALT (? (BLOCK (ALT relop))) integerValue) (ALT integerValue SYM_PLUS_OR_MINUS integerValue))) (RULE integerIntervals (BLOCK (ALT integerInterval (* (BLOCK (ALT ',' integerInterval)))))) (RULE realValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) (BLOCK (ALT REAL) (ALT SCI_REAL) (ALT REAL_PERCENT))))) (RULE realValues (BLOCK (ALT realValue (* (BLOCK (ALT ',' realValue)))))) (RULE realInterval (BLOCK (ALT '|' realIntervalRange '|'))) (RULE realIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) realValue '..' (? (BLOCK (ALT SYM_LT))) realValue) (ALT (? (BLOCK (ALT relop))) realValue) (ALT realValue SYM_PLUS_OR_MINUS realValue))) (RULE realIntervals (BLOCK (ALT realInterval (* (BLOCK (ALT ',' realInterval)))))) (RULE booleanValue (BLOCK (ALT SYM_TRUE) (ALT SYM_FALSE))) (RULE booleanValues (BLOCK (ALT booleanValue (* (BLOCK (ALT ',' booleanValue)))))) (RULE characterValue (BLOCK (ALT CHARACTER))) (RULE characterValues (BLOCK (ALT characterValue (* (BLOCK (ALT ',' characterValue)))))) (RULE dateValue (BLOCK (ALT ISO8601_DATE_AUGMENTED))) (RULE dateValues (BLOCK (ALT dateValue (* (BLOCK (ALT ',' dateValue)))))) (RULE dateInterval (BLOCK (ALT '|' dateIntervalRange '|'))) (RULE dateIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) dateValue '..' (? (BLOCK (ALT SYM_LT))) dateValue) (ALT (? (BLOCK (ALT relop))) dateValue) (ALT dateValue SYM_PLUS_OR_MINUS durationValue))) (RULE dateIntervals (BLOCK (ALT dateInterval (* (BLOCK (ALT ',' dateInterval)))))) (RULE timeValue (BLOCK (ALT ISO8601_TIME_AUGMENTED))) (RULE timeValues (BLOCK (ALT timeValue (* (BLOCK (ALT ',' timeValue)))))) (RULE timeInterval (BLOCK (ALT '|' timeIntervalRange '|'))) (RULE timeIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) timeValue '..' (? (BLOCK (ALT SYM_LT))) timeValue) (ALT (? (BLOCK (ALT relop))) timeValue) (ALT timeValue SYM_PLUS_OR_MINUS durationValue))) (RULE timeIntervals (BLOCK (ALT timeInterval (* (BLOCK (ALT ',' timeInterval)))))) (RULE dateTimeValue (BLOCK (ALT ISO8601_DATE_TIME_AUGMENTED))) (RULE dateTimeValues (BLOCK (ALT dateTimeValue (* (BLOCK (ALT ',' dateTimeValue)))))) (RULE dateTimeInterval (BLOCK (ALT '|' dateTimeIntervalRange '|'))) (RULE dateTimeIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) dateTimeValue '..' (? (BLOCK (ALT SYM_LT))) dateTimeValue) (ALT (? (BLOCK (ALT relop))) dateTimeValue) (ALT dateTimeValue SYM_PLUS_OR_MINUS durationValue))) (RULE dateTimeIntervals (BLOCK (ALT dateTimeInterval (* (BLOCK (ALT ',' dateTimeInterval)))))) (RULE durationValue (BLOCK (ALT (? (BLOCK (ALT SYM_PLUS) (ALT SYM_MINUS))) ISO8601_DURATION))) (RULE durationValues (BLOCK (ALT durationValue (* (BLOCK (ALT ',' durationValue)))))) (RULE durationInterval (BLOCK (ALT '|' durationIntervalRange '|'))) (RULE durationIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) durationValue '..' (? (BLOCK (ALT SYM_LT))) durationValue) (ALT (? (BLOCK (ALT relop))) durationValue) (ALT durationValue SYM_PLUS_OR_MINUS durationValue))) (RULE durationIntervals (BLOCK (ALT durationInterval (* (BLOCK (ALT ',' durationInterval)))))) (RULE termCodeValue (BLOCK (ALT QUALIFIED_TERM_CODE_ID) (ALT LOCAL_TERM_CODE_ID))) (RULE termCodeListValue (BLOCK (ALT termCodeValue (* (BLOCK (ALT ',' termCodeValue)))))) (RULE relop (BLOCK (ALT SYM_LE) (ALT SYM_GE) (ALT SYM_GT) (ALT SYM_LT))) (RULE adlPath (BLOCK (ALT (+ (BLOCK (ALT '/' adlPathSegment)))))) (RULE adlPathSegment (BLOCK (ALT LC_ID (? (BLOCK (ALT '[' adlPathPredicate ']')))))) (RULE adlPathPredicate (BLOCK (ALT archetypeIdPredicate) (ALT idCode))) (RULE archetypeIdPredicate (BLOCK (ALT ARCHETYPE_REF))) (RULE idCode (BLOCK (ALT AT_CODE) (ALT ADL14_AT_CODE) (ALT ID_CODE))) (RULE augmentedAdlPath (BLOCK (ALT (= varName LC_ID) adlPath (? (BLOCK (ALT modelSubPath)))))) (RULE modelPath (BLOCK (ALT (= varName LC_ID) modelSubPath))) (RULE modelSubPath (BLOCK (ALT (+ (BLOCK (ALT modelPathSegment)))))) (RULE modelPathSegment (BLOCK (ALT '/' (= attributeId LC_ID)))) (RULE odinObject (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT odinAttrVal)))) (ALT odinObjectValueBlock)) (? (BLOCK (ALT EOF)))))) (RULE odinAttrVal (BLOCK (ALT odinAttrName '=' odinObjectBlock (? (BLOCK (ALT ';')))))) (RULE odinAttrName (BLOCK (ALT UC_ID) (ALT LC_ID))) (RULE odinObjectBlock (BLOCK (ALT odinObjectValueBlock) (ALT odinObjectReferenceBlock))) (RULE odinObjectValueBlock (BLOCK (ALT (? (BLOCK (ALT rmTypeSpec))) '<' (? (BLOCK (ALT primitiveObject) (ALT (+ (BLOCK (ALT odinAttrVal)))) (ALT (+ (BLOCK (ALT odinKeyedObject)))) (ALT ODIN_URI))) '>'))) (RULE rmTypeSpec (BLOCK (ALT '(' rmTypeId ')'))) (RULE odinKeyedObject (BLOCK (ALT odinKeySpec '=' odinObjectBlock))) (RULE odinKeySpec (BLOCK (ALT '[' primitiveValue ']'))) (RULE odinObjectReferenceBlock (BLOCK (ALT '<' odinPathList '>'))) (RULE odinPathList (BLOCK (ALT odinPath (? (BLOCK (ALT ',' SYM_LIST_CONTINUE) (ALT (+ (BLOCK (ALT ',' odinPath))))))))) (RULE odinPath (BLOCK (ALT (? (BLOCK (ALT odinKeySpec))) (+ (BLOCK (ALT odinPathSegment)))))) (RULE odinPathSegment (BLOCK (ALT '/' LC_ID (? (BLOCK (ALT odinKeySpec)))))) (RULE primitiveListValue (BLOCK (ALT stringListValue) (ALT integerListValue) (ALT realListValue) (ALT booleanListValue) (ALT characterListValue) (ALT termCodeListValue) (ALT dateListValue) (ALT timeListValue) (ALT dateTimeListValue) (ALT durationListValue))) (RULE primitiveIntervalValue (BLOCK (ALT integerIntervalValue) (ALT realIntervalValue) (ALT dateIntervalValue) (ALT timeIntervalValue) (ALT dateTimeIntervalValue) (ALT durationIntervalValue))) (RULE stringListValue (BLOCK (ALT stringValue (BLOCK (ALT (+ (BLOCK (ALT ',' stringValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE integerListValue (BLOCK (ALT integerValue (BLOCK (ALT (+ (BLOCK (ALT ',' integerValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE integerIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) integerValue '..' (? (BLOCK (ALT SYM_LT))) integerValue '|') (ALT '|' (? (BLOCK (ALT relop))) integerValue '|') (ALT '|' integerValue SYM_PLUS_OR_MINUS integerValue '|'))) (RULE integerIntervalListValue (BLOCK (ALT integerIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' integerIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE realListValue (BLOCK (ALT realValue (BLOCK (ALT (+ (BLOCK (ALT ',' realValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE realIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) realValue '..' (? (BLOCK (ALT SYM_LT))) realValue '|') (ALT '|' (? (BLOCK (ALT relop))) realValue '|') (ALT '|' realValue SYM_PLUS_OR_MINUS realValue '|'))) (RULE realIntervalListValue (BLOCK (ALT realIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' realIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE booleanListValue (BLOCK (ALT booleanValue (BLOCK (ALT (+ (BLOCK (ALT ',' booleanValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE characterListValue (BLOCK (ALT characterValue (BLOCK (ALT (+ (BLOCK (ALT ',' characterValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateListValue (BLOCK (ALT dateValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) dateValue '..' (? (BLOCK (ALT SYM_LT))) dateValue '|') (ALT '|' (? (BLOCK (ALT relop))) dateValue '|') (ALT '|' dateValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE dateIntervalListValue (BLOCK (ALT dateIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE timeListValue (BLOCK (ALT timeValue (BLOCK (ALT (+ (BLOCK (ALT ',' timeValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE timeIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) timeValue '..' (? (BLOCK (ALT SYM_LT))) timeValue '|') (ALT '|' (? (BLOCK (ALT relop))) timeValue '|') (ALT '|' timeValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE timeIntervalListValue (BLOCK (ALT timeIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' timeIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateTimeListValue (BLOCK (ALT dateTimeValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateTimeValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateTimeIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) dateTimeValue '..' (? (BLOCK (ALT SYM_LT))) dateTimeValue '|') (ALT '|' (? (BLOCK (ALT relop))) dateTimeValue '|') (ALT '|' dateTimeValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE dateTimeIntervalListValue (BLOCK (ALT dateTimeIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateTimeIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE durationListValue (BLOCK (ALT durationValue (BLOCK (ALT (+ (BLOCK (ALT ',' durationValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE durationIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) durationValue '..' (? (BLOCK (ALT SYM_LT))) durationValue '|') (ALT '|' (? (BLOCK (ALT relop))) durationValue '|') (ALT '|' durationValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE durationIntervalListValue (BLOCK (ALT durationIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' durationIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))))
2025-02-15 15:52:44:303 grammar LogManager.java:25 after: (PARSER_GRAMMAR AqlParser (import Cadl14Parser) (OPTIONS (= tokenVocab AqlLexer)) (RULES (RULE aqlQuery (BLOCK (ALT selectClause fromClause (? (BLOCK (ALT whereClause))) (? (BLOCK (ALT orderByClause))) (? (BLOCK (ALT limitClause))) (? (BLOCK (ALT SYM_DOUBLE_DASH))) EOF))) (RULE selectClause (BLOCK (ALT SYM_SELECT (? (BLOCK (ALT SYM_DISTINCT))) (? (BLOCK (ALT top))) resultTable))) (RULE fromClause (BLOCK (ALT SYM_FROM modelTypeConstraint))) (RULE whereClause (BLOCK (ALT SYM_WHERE whereExpr))) (RULE orderByClause (BLOCK (ALT SYM_ORDER SYM_BY orderByExpr (* (BLOCK (ALT ',' orderByExpr)))))) (RULE limitClause (BLOCK (ALT SYM_LIMIT (= limit INTEGER) (? (BLOCK (ALT SYM_OFFSET (= offset INTEGER))))))) (RULE resultTable (BLOCK (ALT columnSpec (* (BLOCK (ALT ',' columnSpec)))))) (RULE columnSpec (BLOCK (ALT columnValue (? (BLOCK (ALT SYM_AS columnAlias)))))) (RULE columnAlias (BLOCK (ALT (SET LC_ID UC_ID)))) (RULE columnValue (BLOCK (ALT dataMatchPath) (ALT aggregateFunctionCall) (ALT functionCall) (ALT primitiveLiteral))) (RULE orderByExpr (BLOCK (ALT modelPath (? (BLOCK (ALT (= order (SET SYM_DESCENDING SYM_DESC SYM_ASCENDING SYM_ASC)))))))) (RULE modelTypeConstraint (BLOCK (ALT modelType) (ALT modelTypeChain))) (RULE modelTypeChain (BLOCK (ALT modelType (? (BLOCK (ALT SYM_NOT))) SYM_CONTAINS modelTypeSubChain))) (RULE modelTypeSubChain (BLOCK (ALT modelTypeConstraint) (ALT '(' modelTypeExpr ')'))) (RULE modelTypeExpr (BLOCK (ALT SYM_NOT modelTypeExpr) (ALT modelTypeExpr SYM_AND modelTypeExpr) (ALT modelTypeExpr SYM_OR modelTypeExpr) (ALT modelTypeConstraint) (ALT '(' modelTypeExpr ')'))) (RULE modelType (BLOCK (ALT (= typeName UC_ID) (? (BLOCK (ALT (= variableName LC_ID)))) (? (BLOCK (ALT '[' archetypeIdPredicate ']')))))) (RULE whereExpr (BLOCK (ALT SYM_NOT whereExpr) (ALT whereExpr SYM_AND whereExpr) (ALT whereExpr SYM_OR whereExpr) (ALT '(' whereExpr ')') (ALT whereBooleanLeaf))) (RULE whereBooleanLeaf (BLOCK (ALT SYM_EXISTS dataMatchPath) (ALT comparisonOperand SYM_MATCHES matchesOperand) (ALT dataMatchPath SYM_LIKE likeOperand) (ALT dataMatchPath comparisonOperator comparisonOperand) (ALT functionCall comparisonOperator comparisonOperand))) (RULE comparisonOperand (BLOCK (ALT value) (ALT arithmeticExpr))) (RULE value (BLOCK (ALT dataMatchPath) (ALT primitiveLiteral) (ALT functionCall) (ALT PARAMETER))) (RULE likeOperand (BLOCK (ALT (SET STRING PARAMETER)))) (RULE matchesOperand (BLOCK (ALT '{' matchesConstraint '}') (ALT terminologyFunctionCall))) (RULE matchesConstraint (BLOCK (ALT cObjectMatcher) (ALT AQL_URI) (ALT PARAMETER))) (RULE arithmeticExpr (BLOCK (ALT (ELEMENT_OPTIONS (= assoc right)) arithmeticExpr '^' arithmeticExpr) (ALT arithmeticExpr (SET '/' '*' '%') arithmeticExpr) (ALT arithmeticExpr (SET '+' '-') arithmeticExpr) (ALT arithmeticLeaf))) (RULE arithmeticLeaf (BLOCK (ALT arithmeticLiteral) (ALT value) (ALT '(' arithmeticExpr ')'))) (RULE arithmeticLiteral (BLOCK (ALT integerValue) (ALT realValue) (ALT aqlDateTimeLiteral) (ALT durationValue))) (RULE dataMatchPath (BLOCK (ALT (= variableName LC_ID) (* (BLOCK (ALT dataMatchPathSegment)))))) (RULE dataMatchPathSegment (BLOCK (ALT '/' (= attributeId LC_ID) (? (BLOCK (ALT '[' dataMatchPathPredicate ']')))))) (RULE dataMatchPathPredicate (BLOCK (ALT adlPathPredicate (? (BLOCK (ALT SYM_AND dataMatchPathValuePredicate) (ALT ',' modelSpecificPredicateShortcut)))))) (RULE dataMatchPathValuePredicate (BLOCK (ALT modelPath SYM_MATCHES CONTAINED_REGEX) (ALT modelPath comparisonOperator modelPathComparatorValue) (ALT dataMatchPathValuePredicate SYM_AND dataMatchPathValuePredicate) (ALT dataMatchPathValuePredicate SYM_OR dataMatchPathValuePredicate) (ALT '(' dataMatchPathValuePredicate ')'))) (RULE modelPathComparatorValue (BLOCK (ALT primitiveLiteral) (ALT modelPath) (ALT PARAMETER))) (RULE versionPredicate (BLOCK (ALT (SET SYM_LATEST_VERSION SYM_ALL_VERSIONS)))) (RULE functionCall (BLOCK (ALT terminologyFunctionCall) (ALT builtInFunction functionArgs) (ALT LC_ID functionArgs))) (RULE functionArgs (BLOCK (ALT '(' (? (BLOCK (ALT value (* (BLOCK (ALT ',' value)))))) ')'))) (RULE aggregateFunctionCall (BLOCK (ALT (= name SYM_COUNT) '(' (BLOCK (ALT (? (BLOCK (ALT SYM_DISTINCT))) augmentedAdlPath) (ALT '*')) ')') (ALT aggregateMathFunction '(' augmentedAdlPath ')'))) (RULE aggregateMathFunction (BLOCK (ALT (SET SYM_MIN SYM_MAX SYM_SUM SYM_AVG)))) (RULE terminologyFunctionCall (BLOCK (ALT SYM_TERMINOLOGY '(' (= operation STRING) ',' (= source STRING) ',' (BLOCK (ALT stringFunction functionArgs) (ALT STRING)) ')'))) (RULE builtInFunction (BLOCK (ALT stringFunction) (ALT numericFunction) (ALT dateTimeFunction))) (RULE stringFunction (BLOCK (ALT (SET SYM_LENGTH SYM_CONTAINS SYM_POSITION SYM_SUBSTRING SYM_CONCAT_WS SYM_CONCAT)))) (RULE numericFunction (BLOCK (ALT (SET SYM_ABS SYM_MOD SYM_CEIL SYM_FLOOR SYM_ROUND)))) (RULE dateTimeFunction (BLOCK (ALT (SET SYM_NOW SYM_CURRENT_DATE_TIME SYM_CURRENT_DATE SYM_CURRENT_TIMEZONE SYM_CURRENT_TIME)))) (RULE comparisonOperator (BLOCK (ALT (SET SYM_EQ SYM_NE SYM_GT SYM_GE SYM_LT SYM_LE)))) (RULE primitiveLiteral (BLOCK (ALT STRING) (ALT numericLiteral) (ALT aqlDateTimeLiteral) (ALT BOOLEAN) (ALT SYM_NULL))) (RULE numericLiteral (BLOCK (ALT INTEGER) (ALT REAL) (ALT SCI_INTEGER) (ALT SCI_REAL) (ALT SYM_MINUS numericLiteral))) (RULE aqlDateTimeLiteral (BLOCK (ALT (SET DATE_STRING TIME_STRING DATE_TIME_STRING)))) (RULE modelSpecificPredicateShortcut (BLOCK (ALT STRING) (ALT idCode) (ALT QUALIFIED_TERM_CODE))) (RULE top (BLOCK (ALT SYM_TOP INTEGER (? (BLOCK (ALT (= direction (SET SYM_FORWARD SYM_BACKWARD)))))))) (RULE cComplexObject (BLOCK (ALT rmTypeId (? (BLOCK (ALT nodeId))) (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' cComplexObjectDef '}')))))) (RULE cComplexObjectDef (BLOCK (ALT (+ (BLOCK (ALT cAttribute)))) (ALT '*'))) (RULE nodeId (BLOCK (ALT '[' adl14_at_code ']'))) (RULE cAttribute (BLOCK (ALT rmAttributeId (? (BLOCK (ALT cExistence))) (? (BLOCK (ALT cCardinality))) (? (BLOCK (ALT SYM_MATCHES '{' (BLOCK (ALT cAttributeDef) (ALT cInlinePrimitiveObject)) '}')))))) (RULE cAttributeDef (BLOCK (ALT (+ (BLOCK (ALT cRegularObject)))))) (RULE cRegularObject (BLOCK (ALT cComplexObject) (ALT cArchetypeRoot) (ALT cComplexObjectProxy) (ALT archetypeSlot) (ALT cRegularPrimitiveObject) (ALT cOrdinal) (ALT domainSpecificExtension))) (RULE cArchetypeRoot (BLOCK (ALT SYM_USE_ARCHETYPE rmTypeId '[' adl14_at_code ',' ARCHETYPE_REF ']' (? (BLOCK (ALT cOccurrences)))))) (RULE cComplexObjectProxy (BLOCK (ALT SYM_USE_NODE rmTypeId (? (BLOCK (ALT cOccurrences))) adlPath))) (RULE cRegularPrimitiveObject (BLOCK (ALT rmTypeId nodeId (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' cInlinePrimitiveObject '}')))))) (RULE archetypeSlot (BLOCK (ALT SYM_ALLOW_ARCHETYPE rmTypeId nodeId (BLOCK (ALT (BLOCK (ALT (? (BLOCK (ALT cOccurrences))) (? (BLOCK (ALT SYM_MATCHES '{' (? (BLOCK (ALT cIncludes))) (? (BLOCK (ALT cExcludes))) '}')))))) (ALT SYM_CLOSED))))) (RULE cIncludes (BLOCK (ALT SYM_INCLUDE (+ (BLOCK (ALT archetypeIdConstraint)))))) (RULE cExcludes (BLOCK (ALT SYM_EXCLUDE (+ (BLOCK (ALT archetypeIdConstraint)))))) (RULE archetypeIdConstraint (BLOCK (ALT archetypeIdPath SYM_MATCHES '{' DELIMITED_REGEX '}'))) (RULE archetypeIdPath (BLOCK (ALT (? (BLOCK (ALT '/'))) LC_ID (* (BLOCK (ALT adlPath)))))) (RULE cExistence (BLOCK (ALT SYM_EXISTENCE SYM_MATCHES '{' existence '}'))) (RULE existence (BLOCK (ALT INTEGER) (ALT INTEGER '..' INTEGER))) (RULE cCardinality (BLOCK (ALT SYM_CARDINALITY SYM_MATCHES '{' cardinality '}'))) (RULE cardinality (BLOCK (ALT multiplicity (? (BLOCK (ALT multiplicityMod (? (BLOCK (ALT multiplicityMod))))))))) (RULE cOccurrences (BLOCK (ALT SYM_OCCURRENCES SYM_MATCHES '{' multiplicity '}'))) (RULE multiplicity (BLOCK (ALT INTEGER) (ALT '*') (ALT INTEGER '..' (SET INTEGER '*')))) (RULE multiplicityMod (BLOCK (ALT orderingMod) (ALT uniqueMod))) (RULE orderingMod (BLOCK (ALT ';' (SET SYM_ORDERED SYM_UNORDERED)))) (RULE uniqueMod (BLOCK (ALT ';' SYM_UNIQUE))) (RULE cOrdinal (BLOCK (ALT ordinalTerm (* (BLOCK (ALT ',' ordinalTerm))) (? (BLOCK (ALT ';' ordinalValue)))))) (RULE ordinalValue (BLOCK (ALT integerValue) (ALT realValue))) (RULE ordinalTerm (BLOCK (ALT ordinalValue '|' cTerminologyCode))) (RULE domainSpecificExtension (BLOCK (ALT ODIN14_BLOCK_START (+ (BLOCK (ALT ODIN14_BLOCK_LINE)))))) (RULE rmTypeId (BLOCK (ALT UC_ID (? (BLOCK (ALT '<' rmTypeId (* (BLOCK (ALT ',' rmTypeId))) '>')))))) (RULE rmAttributeId (BLOCK (ALT LC_ID))) (RULE cObjectMatcher (BLOCK (ALT cComplexObjectMatcher) (ALT cInlinePrimitiveObject) (ALT domainSpecificExtension))) (RULE cComplexObjectMatcher (BLOCK (ALT rmTypeId (? (BLOCK (ALT nodeId))) (? (BLOCK (ALT SYM_MATCHES '{' cComplexObjectMatcherDef '}')))))) (RULE cComplexObjectMatcherDef (BLOCK (ALT (+ (BLOCK (ALT cAttributeMatcher)))) (ALT '*'))) (RULE cAttributeMatcher (BLOCK (ALT rmAttributeId (? (BLOCK (ALT SYM_MATCHES '{' (BLOCK (ALT cAttributeMatcherDef) (ALT cInlinePrimitiveObject)) '}')))))) (RULE cAttributeMatcherDef (BLOCK (ALT (+ (BLOCK (ALT cRegularObjectMatcher)))))) (RULE cRegularObjectMatcher (BLOCK (ALT cComplexObjectMatcher) (ALT cRegularPrimitiveObject) (ALT cOrdinal) (ALT domainSpecificExtension))) (RULE cTerminologyCode (BLOCK (ALT terminologyLocalCode) (ALT valueSetCode) (ALT cLocalTermCode) (ALT cExternalTermCode) (ALT QUALIFIED_TERM_CODE_REF))) (RULE terminologyLocalCode (BLOCK (ALT '[' adl14_at_code ']'))) (RULE valueSetCode (BLOCK (ALT '[' adl14_ac_code (? (BLOCK (ALT termCodeDefault))) ']'))) (RULE termCodeDefault (BLOCK (ALT ';' adl14_at_code))) (RULE cLocalTermCode (BLOCK (ALT C_LOCAL_TERM_CODE_START (? (BLOCK (ALT localCodesList (? (BLOCK (ALT termCodeDefault)))))) ']'))) (RULE localCodesList (BLOCK (ALT adl14_at_code (+ (BLOCK (ALT termCodeItem)))))) (RULE termCodeItem (BLOCK (ALT ',' adl14_at_code))) (RULE cExternalTermCode (BLOCK (ALT C_EXTERNAL_TERM_CODE_START (? (BLOCK (ALT externalCodesList (? (BLOCK (ALT externalTermCodeDefault)))))) ']'))) (RULE externalCodesList (BLOCK (ALT C_EXTERNAL_TERM_CODE_STRING (+ (BLOCK (ALT externalTermCodeItem)))))) (RULE externalTermCodeItem (BLOCK (ALT ',' C_EXTERNAL_TERM_CODE_STRING))) (RULE externalTermCodeDefault (BLOCK (ALT ';' C_EXTERNAL_TERM_CODE_STRING))) (RULE adl14_at_code (BLOCK (ALT (SET ADL14_AT_CODE AT_CODE)))) (RULE adl14_ac_code (BLOCK (ALT (SET ADL14_AC_CODE AC_CODE)))) (RULE cInlinePrimitiveObject (BLOCK (ALT cInlineOrderedObject) (ALT cString) (ALT cTerminologyCode) (ALT cBoolean))) (RULE cInlineOrderedObject (BLOCK (ALT cInteger) (ALT cReal) (ALT cInlineDTemporalObject))) (RULE cInlineDTemporalObject (BLOCK (ALT cDate) (ALT cTime) (ALT cDateTime) (ALT cDuration))) (RULE cBoolean (BLOCK (ALT (BLOCK (ALT booleanValue) (ALT booleanValues)) (? (BLOCK (ALT assumedBooleanValue)))))) (RULE assumedBooleanValue (BLOCK (ALT ';' booleanValue))) (RULE cInteger (BLOCK (ALT (BLOCK (ALT integerValue) (ALT integerValues) (ALT integerInterval) (ALT integerIntervals)) (? (BLOCK (ALT assumedIntegerValue)))))) (RULE assumedIntegerValue (BLOCK (ALT ';' integerValue))) (RULE cReal (BLOCK (ALT (BLOCK (ALT realValue) (ALT realValues) (ALT realInterval) (ALT realIntervals)) (? (BLOCK (ALT assumedRealValue)))))) (RULE assumedRealValue (BLOCK (ALT ';' realValue))) (RULE cDateTime (BLOCK (ALT (BLOCK (ALT DATE_TIME_CONSTRAINT_PATTERN) (ALT dateTimeValue) (ALT dateTimeValues) (ALT dateTimeInterval) (ALT dateTimeIntervals)) (? (BLOCK (ALT assumedDateTimeValue)))))) (RULE assumedDateTimeValue (BLOCK (ALT ';' dateTimeValue))) (RULE cDate (BLOCK (ALT (BLOCK (ALT DATE_CONSTRAINT_PATTERN) (ALT dateValue) (ALT dateValues) (ALT dateInterval) (ALT dateIntervals)) (? (BLOCK (ALT assumedDateValue)))))) (RULE assumedDateValue (BLOCK (ALT ';' dateValue))) (RULE cTime (BLOCK (ALT (BLOCK (ALT TIME_CONSTRAINT_PATTERN) (ALT timeValue) (ALT timeValues) (ALT timeInterval) (ALT timeIntervals)) (? (BLOCK (ALT assumedTimeValue)))))) (RULE assumedTimeValue (BLOCK (ALT ';' timeValue))) (RULE cDuration (BLOCK (ALT (BLOCK (ALT DURATION_CONSTRAINT_PATTERN (? (BLOCK (ALT '/' (BLOCK (ALT durationInterval) (ALT durationValue)))))) (ALT durationValue) (ALT durationValues) (ALT durationInterval) (ALT durationIntervals)) (? (BLOCK (ALT assumedDurationValue)))))) (RULE assumedDurationValue (BLOCK (ALT ';' durationValue))) (RULE cString (BLOCK (ALT (BLOCK (ALT stringValue) (ALT stringValues) (ALT DELIMITED_REGEX)) (? (BLOCK (ALT assumedStringValue)))))) (RULE assumedStringValue (BLOCK (ALT ';' stringValue))) (RULE primitiveObject (BLOCK (ALT primitiveValue) (ALT primitiveList) (ALT primitiveArray) (ALT primitiveSet) (ALT primitiveInterval))) (RULE primitiveValue (BLOCK (ALT stringValue) (ALT integerValue) (ALT realValue) (ALT booleanValue) (ALT characterValue) (ALT termCodeValue) (ALT dateValue) (ALT timeValue) (ALT dateTimeValue) (ALT durationValue))) (RULE primitiveList (BLOCK (ALT '(' primitiveValues ')'))) (RULE primitiveArray (BLOCK (ALT '[' primitiveValues ']'))) (RULE primitiveSet (BLOCK (ALT '{' primitiveValues '}'))) (RULE primitiveValues (BLOCK (ALT stringValues) (ALT integerValues) (ALT realValues) (ALT booleanValues) (ALT characterValues) (ALT termCodeListValue) (ALT dateValues) (ALT timeValues) (ALT dateTimeValues) (ALT durationValues))) (RULE primitiveInterval (BLOCK (ALT integerInterval) (ALT realInterval) (ALT dateInterval) (ALT timeInterval) (ALT dateTimeInterval) (ALT durationInterval))) (RULE stringValue (BLOCK (ALT STRING))) (RULE stringValues (BLOCK (ALT stringValue (* (BLOCK (ALT ',' stringValue)))))) (RULE integerValue (BLOCK (ALT (? (BLOCK (ALT (SET SYM_PLUS SYM_MINUS)))) (SET INTEGER SCI_INTEGER)))) (RULE integerValues (BLOCK (ALT integerValue (* (BLOCK (ALT ',' integerValue)))))) (RULE integerInterval (BLOCK (ALT '|' integerIntervalRange '|'))) (RULE integerIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) integerValue '..' (? (BLOCK (ALT SYM_LT))) integerValue) (ALT (? (BLOCK (ALT relop))) integerValue) (ALT integerValue SYM_PLUS_OR_MINUS integerValue))) (RULE integerIntervals (BLOCK (ALT integerInterval (* (BLOCK (ALT ',' integerInterval)))))) (RULE realValue (BLOCK (ALT (? (BLOCK (ALT (SET SYM_PLUS SYM_MINUS)))) (SET REAL SCI_REAL REAL_PERCENT)))) (RULE realValues (BLOCK (ALT realValue (* (BLOCK (ALT ',' realValue)))))) (RULE realInterval (BLOCK (ALT '|' realIntervalRange '|'))) (RULE realIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) realValue '..' (? (BLOCK (ALT SYM_LT))) realValue) (ALT (? (BLOCK (ALT relop))) realValue) (ALT realValue SYM_PLUS_OR_MINUS realValue))) (RULE realIntervals (BLOCK (ALT realInterval (* (BLOCK (ALT ',' realInterval)))))) (RULE booleanValue (BLOCK (ALT (SET SYM_TRUE SYM_FALSE)))) (RULE booleanValues (BLOCK (ALT booleanValue (* (BLOCK (ALT ',' booleanValue)))))) (RULE characterValue (BLOCK (ALT CHARACTER))) (RULE characterValues (BLOCK (ALT characterValue (* (BLOCK (ALT ',' characterValue)))))) (RULE dateValue (BLOCK (ALT ISO8601_DATE_AUGMENTED))) (RULE dateValues (BLOCK (ALT dateValue (* (BLOCK (ALT ',' dateValue)))))) (RULE dateInterval (BLOCK (ALT '|' dateIntervalRange '|'))) (RULE dateIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) dateValue '..' (? (BLOCK (ALT SYM_LT))) dateValue) (ALT (? (BLOCK (ALT relop))) dateValue) (ALT dateValue SYM_PLUS_OR_MINUS durationValue))) (RULE dateIntervals (BLOCK (ALT dateInterval (* (BLOCK (ALT ',' dateInterval)))))) (RULE timeValue (BLOCK (ALT ISO8601_TIME_AUGMENTED))) (RULE timeValues (BLOCK (ALT timeValue (* (BLOCK (ALT ',' timeValue)))))) (RULE timeInterval (BLOCK (ALT '|' timeIntervalRange '|'))) (RULE timeIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) timeValue '..' (? (BLOCK (ALT SYM_LT))) timeValue) (ALT (? (BLOCK (ALT relop))) timeValue) (ALT timeValue SYM_PLUS_OR_MINUS durationValue))) (RULE timeIntervals (BLOCK (ALT timeInterval (* (BLOCK (ALT ',' timeInterval)))))) (RULE dateTimeValue (BLOCK (ALT ISO8601_DATE_TIME_AUGMENTED))) (RULE dateTimeValues (BLOCK (ALT dateTimeValue (* (BLOCK (ALT ',' dateTimeValue)))))) (RULE dateTimeInterval (BLOCK (ALT '|' dateTimeIntervalRange '|'))) (RULE dateTimeIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) dateTimeValue '..' (? (BLOCK (ALT SYM_LT))) dateTimeValue) (ALT (? (BLOCK (ALT relop))) dateTimeValue) (ALT dateTimeValue SYM_PLUS_OR_MINUS durationValue))) (RULE dateTimeIntervals (BLOCK (ALT dateTimeInterval (* (BLOCK (ALT ',' dateTimeInterval)))))) (RULE durationValue (BLOCK (ALT (? (BLOCK (ALT (SET SYM_PLUS SYM_MINUS)))) ISO8601_DURATION))) (RULE durationValues (BLOCK (ALT durationValue (* (BLOCK (ALT ',' durationValue)))))) (RULE durationInterval (BLOCK (ALT '|' durationIntervalRange '|'))) (RULE durationIntervalRange (BLOCK (ALT (? (BLOCK (ALT SYM_GT))) durationValue '..' (? (BLOCK (ALT SYM_LT))) durationValue) (ALT (? (BLOCK (ALT relop))) durationValue) (ALT durationValue SYM_PLUS_OR_MINUS durationValue))) (RULE durationIntervals (BLOCK (ALT durationInterval (* (BLOCK (ALT ',' durationInterval)))))) (RULE termCodeValue (BLOCK (ALT (SET QUALIFIED_TERM_CODE_ID LOCAL_TERM_CODE_ID)))) (RULE termCodeListValue (BLOCK (ALT termCodeValue (* (BLOCK (ALT ',' termCodeValue)))))) (RULE relop (BLOCK (ALT (SET SYM_LE SYM_GE SYM_GT SYM_LT)))) (RULE adlPath (BLOCK (ALT (+ (BLOCK (ALT '/' adlPathSegment)))))) (RULE adlPathSegment (BLOCK (ALT LC_ID (? (BLOCK (ALT '[' adlPathPredicate ']')))))) (RULE adlPathPredicate (BLOCK (ALT archetypeIdPredicate) (ALT idCode))) (RULE archetypeIdPredicate (BLOCK (ALT ARCHETYPE_REF))) (RULE idCode (BLOCK (ALT (SET AT_CODE ADL14_AT_CODE ID_CODE)))) (RULE augmentedAdlPath (BLOCK (ALT (= varName LC_ID) adlPath (? (BLOCK (ALT modelSubPath)))))) (RULE modelPath (BLOCK (ALT (= varName LC_ID) modelSubPath))) (RULE modelSubPath (BLOCK (ALT (+ (BLOCK (ALT modelPathSegment)))))) (RULE modelPathSegment (BLOCK (ALT '/' (= attributeId LC_ID)))) (RULE odinObject (BLOCK (ALT (BLOCK (ALT (+ (BLOCK (ALT odinAttrVal)))) (ALT odinObjectValueBlock)) (? (BLOCK (ALT EOF)))))) (RULE odinAttrVal (BLOCK (ALT odinAttrName '=' odinObjectBlock (? (BLOCK (ALT ';')))))) (RULE odinAttrName (BLOCK (ALT (SET UC_ID LC_ID)))) (RULE odinObjectBlock (BLOCK (ALT odinObjectValueBlock) (ALT odinObjectReferenceBlock))) (RULE odinObjectValueBlock (BLOCK (ALT (? (BLOCK (ALT rmTypeSpec))) '<' (? (BLOCK (ALT primitiveObject) (ALT (+ (BLOCK (ALT odinAttrVal)))) (ALT (+ (BLOCK (ALT odinKeyedObject)))) (ALT ODIN_URI))) '>'))) (RULE rmTypeSpec (BLOCK (ALT '(' rmTypeId ')'))) (RULE odinKeyedObject (BLOCK (ALT odinKeySpec '=' odinObjectBlock))) (RULE odinKeySpec (BLOCK (ALT '[' primitiveValue ']'))) (RULE odinObjectReferenceBlock (BLOCK (ALT '<' odinPathList '>'))) (RULE odinPathList (BLOCK (ALT odinPath (? (BLOCK (ALT ',' SYM_LIST_CONTINUE) (ALT (+ (BLOCK (ALT ',' odinPath))))))))) (RULE odinPath (BLOCK (ALT (? (BLOCK (ALT odinKeySpec))) (+ (BLOCK (ALT odinPathSegment)))))) (RULE odinPathSegment (BLOCK (ALT '/' LC_ID (? (BLOCK (ALT odinKeySpec)))))) (RULE primitiveListValue (BLOCK (ALT stringListValue) (ALT integerListValue) (ALT realListValue) (ALT booleanListValue) (ALT characterListValue) (ALT termCodeListValue) (ALT dateListValue) (ALT timeListValue) (ALT dateTimeListValue) (ALT durationListValue))) (RULE primitiveIntervalValue (BLOCK (ALT integerIntervalValue) (ALT realIntervalValue) (ALT dateIntervalValue) (ALT timeIntervalValue) (ALT dateTimeIntervalValue) (ALT durationIntervalValue))) (RULE stringListValue (BLOCK (ALT stringValue (BLOCK (ALT (+ (BLOCK (ALT ',' stringValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE integerListValue (BLOCK (ALT integerValue (BLOCK (ALT (+ (BLOCK (ALT ',' integerValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE integerIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) integerValue '..' (? (BLOCK (ALT SYM_LT))) integerValue '|') (ALT '|' (? (BLOCK (ALT relop))) integerValue '|') (ALT '|' integerValue SYM_PLUS_OR_MINUS integerValue '|'))) (RULE integerIntervalListValue (BLOCK (ALT integerIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' integerIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE realListValue (BLOCK (ALT realValue (BLOCK (ALT (+ (BLOCK (ALT ',' realValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE realIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) realValue '..' (? (BLOCK (ALT SYM_LT))) realValue '|') (ALT '|' (? (BLOCK (ALT relop))) realValue '|') (ALT '|' realValue SYM_PLUS_OR_MINUS realValue '|'))) (RULE realIntervalListValue (BLOCK (ALT realIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' realIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE booleanListValue (BLOCK (ALT booleanValue (BLOCK (ALT (+ (BLOCK (ALT ',' booleanValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE characterListValue (BLOCK (ALT characterValue (BLOCK (ALT (+ (BLOCK (ALT ',' characterValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateListValue (BLOCK (ALT dateValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) dateValue '..' (? (BLOCK (ALT SYM_LT))) dateValue '|') (ALT '|' (? (BLOCK (ALT relop))) dateValue '|') (ALT '|' dateValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE dateIntervalListValue (BLOCK (ALT dateIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE timeListValue (BLOCK (ALT timeValue (BLOCK (ALT (+ (BLOCK (ALT ',' timeValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE timeIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) timeValue '..' (? (BLOCK (ALT SYM_LT))) timeValue '|') (ALT '|' (? (BLOCK (ALT relop))) timeValue '|') (ALT '|' timeValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE timeIntervalListValue (BLOCK (ALT timeIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' timeIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateTimeListValue (BLOCK (ALT dateTimeValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateTimeValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE dateTimeIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) dateTimeValue '..' (? (BLOCK (ALT SYM_LT))) dateTimeValue '|') (ALT '|' (? (BLOCK (ALT relop))) dateTimeValue '|') (ALT '|' dateTimeValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE dateTimeIntervalListValue (BLOCK (ALT dateTimeIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' dateTimeIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE durationListValue (BLOCK (ALT durationValue (BLOCK (ALT (+ (BLOCK (ALT ',' durationValue)))) (ALT ',' SYM_LIST_CONTINUE))))) (RULE durationIntervalValue (BLOCK (ALT '|' (? (BLOCK (ALT SYM_GT))) durationValue '..' (? (BLOCK (ALT SYM_LT))) durationValue '|') (ALT '|' (? (BLOCK (ALT relop))) durationValue '|') (ALT '|' durationValue SYM_PLUS_OR_MINUS durationValue '|'))) (RULE durationIntervalListValue (BLOCK (ALT durationIntervalValue (BLOCK (ALT (+ (BLOCK (ALT ',' durationIntervalValue)))) (ALT ',' SYM_LIST_CONTINUE)))))))
2025-02-15 15:52:44:316 left-recursion LogManager.java:25 modelTypeExpr
    :   ( {} SYM_NOT<tokenIndex=303> modelTypeExpr<tokenIndex=305,p=5> 
        | modelTypeConstraint<tokenIndex=325> 
        | '('<tokenIndex=329> modelTypeExpr<tokenIndex=331> ')'<tokenIndex=333> 
        )
        (
          {this.precpred(this._ctx, 4)}?<p=4> SYM_AND<tokenIndex=311> modelTypeExpr<tokenIndex=313,p=5>
                  | {this.precpred(this._ctx, 3)}?<p=3> SYM_OR<tokenIndex=319> modelTypeExpr<tokenIndex=321,p=4>
        )*
    ;
2025-02-15 15:52:44:318 grammar LogManager.java:25 added: (RULE modelTypeExpr (BLOCK (ALT (BLOCK (ALT {} (SYM_NOT (ELEMENT_OPTIONS (= tokenIndex 303))) (modelTypeExpr (ELEMENT_OPTIONS (= tokenIndex 305) (= p 5)))) (ALT (modelTypeConstraint (ELEMENT_OPTIONS (= tokenIndex 325)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 329))) (modelTypeExpr (ELEMENT_OPTIONS (= tokenIndex 331))) (')' (ELEMENT_OPTIONS (= tokenIndex 333))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (SYM_AND (ELEMENT_OPTIONS (= tokenIndex 311))) (modelTypeExpr (ELEMENT_OPTIONS (= tokenIndex 313) (= p 5)))) (ALT ({this.precpred(this._ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) (SYM_OR (ELEMENT_OPTIONS (= tokenIndex 319))) (modelTypeExpr (ELEMENT_OPTIONS (= tokenIndex 321) (= p 4)))))))))
2025-02-15 15:52:44:318 left-recursion LogManager.java:25 whereExpr
    :   ( {} SYM_NOT<tokenIndex=371> whereExpr<tokenIndex=373,p=5> 
        | '('<tokenIndex=393> whereExpr<tokenIndex=395> ')'<tokenIndex=397> 
        | whereBooleanLeaf<tokenIndex=401> 
        )
        (
          {this.precpred(this._ctx, 4)}?<p=4> SYM_AND<tokenIndex=379> whereExpr<tokenIndex=381,p=5>
                  | {this.precpred(this._ctx, 3)}?<p=3> SYM_OR<tokenIndex=387> whereExpr<tokenIndex=389,p=4>
        )*
    ;
2025-02-15 15:52:44:319 grammar LogManager.java:25 added: (RULE whereExpr (BLOCK (ALT (BLOCK (ALT {} (SYM_NOT (ELEMENT_OPTIONS (= tokenIndex 371))) (whereExpr (ELEMENT_OPTIONS (= tokenIndex 373) (= p 5)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 393))) (whereExpr (ELEMENT_OPTIONS (= tokenIndex 395))) (')' (ELEMENT_OPTIONS (= tokenIndex 397)))) (ALT (whereBooleanLeaf (ELEMENT_OPTIONS (= tokenIndex 401))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (SYM_AND (ELEMENT_OPTIONS (= tokenIndex 379))) (whereExpr (ELEMENT_OPTIONS (= tokenIndex 381) (= p 5)))) (ALT ({this.precpred(this._ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) (SYM_OR (ELEMENT_OPTIONS (= tokenIndex 387))) (whereExpr (ELEMENT_OPTIONS (= tokenIndex 389) (= p 4)))))))))
2025-02-15 15:52:44:319 left-recursion LogManager.java:25 arithmeticExpr
    :   ( {} arithmeticLeaf<tokenIndex=582> 
        )
        (
          {this.precpred(this._ctx, 4)}?<p=4> '^'<tokenIndex=540> arithmeticExpr<tokenIndex=542,p=4>
                  | {this.precpred(this._ctx, 3)}?<p=3> ( '/'<tokenIndex=550> | '*'<tokenIndex=554> | '%'<tokenIndex=558> ) arithmeticExpr<tokenIndex=562,p=4>
                  | {this.precpred(this._ctx, 2)}?<p=2> ( '+'<tokenIndex=570> | '-'<tokenIndex=574> ) arithmeticExpr<tokenIndex=578,p=3>
        )*
    ;
2025-02-15 15:52:44:321 grammar LogManager.java:25 added: (RULE arithmeticExpr (BLOCK (ALT (BLOCK (ALT {} (arithmeticLeaf (ELEMENT_OPTIONS (= tokenIndex 582))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) ('^' (ELEMENT_OPTIONS (= tokenIndex 540))) (arithmeticExpr (ELEMENT_OPTIONS (= tokenIndex 542) (= p 4)))) (ALT ({this.precpred(this._ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) (SET ('/' (ELEMENT_OPTIONS (= tokenIndex 550))) ('*' (ELEMENT_OPTIONS (= tokenIndex 554))) ('%' (ELEMENT_OPTIONS (= tokenIndex 558)))) (arithmeticExpr (ELEMENT_OPTIONS (= tokenIndex 562) (= p 4)))) (ALT ({this.precpred(this._ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 570))) ('-' (ELEMENT_OPTIONS (= tokenIndex 574)))) (arithmeticExpr (ELEMENT_OPTIONS (= tokenIndex 578) (= p 3)))))))))
2025-02-15 15:52:44:321 left-recursion LogManager.java:25 dataMatchPathValuePredicate
    :   ( {} modelPath<tokenIndex=737> SYM_MATCHES<tokenIndex=739> CONTAINED_REGEX<tokenIndex=741> 
        | modelPath<tokenIndex=745> comparisonOperator<tokenIndex=747> modelPathComparatorValue<tokenIndex=749> 
        | '('<tokenIndex=769> dataMatchPathValuePredicate<tokenIndex=771> ')'<tokenIndex=773> 
        )
        (
          {this.precpred(this._ctx, 3)}?<p=3> SYM_AND<tokenIndex=755> dataMatchPathValuePredicate<tokenIndex=757,p=4>
                  | {this.precpred(this._ctx, 2)}?<p=2> SYM_OR<tokenIndex=763> dataMatchPathValuePredicate<tokenIndex=765,p=3>
        )*
    ;
2025-02-15 15:52:44:322 grammar LogManager.java:25 added: (RULE dataMatchPathValuePredicate (BLOCK (ALT (BLOCK (ALT {} (modelPath (ELEMENT_OPTIONS (= tokenIndex 737))) (SYM_MATCHES (ELEMENT_OPTIONS (= tokenIndex 739))) (CONTAINED_REGEX (ELEMENT_OPTIONS (= tokenIndex 741)))) (ALT (modelPath (ELEMENT_OPTIONS (= tokenIndex 745))) (comparisonOperator (ELEMENT_OPTIONS (= tokenIndex 747))) (modelPathComparatorValue (ELEMENT_OPTIONS (= tokenIndex 749)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 769))) (dataMatchPathValuePredicate (ELEMENT_OPTIONS (= tokenIndex 771))) (')' (ELEMENT_OPTIONS (= tokenIndex 773))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 3)}? (ELEMENT_OPTIONS (= p 3))) (SYM_AND (ELEMENT_OPTIONS (= tokenIndex 755))) (dataMatchPathValuePredicate (ELEMENT_OPTIONS (= tokenIndex 757) (= p 4)))) (ALT ({this.precpred(this._ctx, 2)}? (ELEMENT_OPTIONS (= p 2))) (SYM_OR (ELEMENT_OPTIONS (= tokenIndex 763))) (dataMatchPathValuePredicate (ELEMENT_OPTIONS (= tokenIndex 765) (= p 3)))))))))
2025-02-15 15:52:44:328 grammar LogManager.java:25 import WS=1
2025-02-15 15:52:44:329 grammar LogManager.java:25 import UNICODE_BOM=2
2025-02-15 15:52:44:329 grammar LogManager.java:25 import CMT_LINE=3
2025-02-15 15:52:44:329 grammar LogManager.java:25 import EOL=4
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_SELECT=5
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_AS=6
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_FROM=7
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_WHERE=8
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ORDER=9
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_BY=10
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_DESC=11
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_DESCENDING=12
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ASC=13
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ASCENDING=14
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_LIMIT=15
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_OFFSET=16
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_DISTINCT=17
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_VERSION=18
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_LATEST_VERSION=19
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ALL_VERSIONS=20
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_NULL=21
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_TOP=22
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_FORWARD=23
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_BACKWARD=24
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CONTAINS=25
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_AND=26
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_OR=27
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_NOT=28
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_EXISTS=29
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_LIKE=30
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_MATCHES=31
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_LENGTH=32
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_POSITION=33
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_SUBSTRING=34
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CONCAT=35
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CONCAT_WS=36
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ABS=37
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_MOD=38
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CEIL=39
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_FLOOR=40
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ROUND=41
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CURRENT_DATE=42
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CURRENT_TIME=43
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CURRENT_DATE_TIME=44
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_NOW=45
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CURRENT_TIMEZONE=46
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_COUNT=47
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_MIN=48
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_MAX=49
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_SUM=50
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_AVG=51
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_TERMINOLOGY=52
2025-02-15 15:52:44:329 grammar LogManager.java:25 import CONTAINED_REGEX=53
2025-02-15 15:52:44:329 grammar LogManager.java:25 import AQL_URI=54
2025-02-15 15:52:44:329 grammar LogManager.java:25 import BOOLEAN=55
2025-02-15 15:52:44:329 grammar LogManager.java:25 import DATE_STRING=56
2025-02-15 15:52:44:329 grammar LogManager.java:25 import TIME_STRING=57
2025-02-15 15:52:44:329 grammar LogManager.java:25 import DATE_TIME_STRING=58
2025-02-15 15:52:44:329 grammar LogManager.java:25 import STRING=59
2025-02-15 15:52:44:329 grammar LogManager.java:25 import QUALIFIED_TERM_CODE=60
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_NE=61
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_EQ=62
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_DOUBLE_DASH=63
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_EXISTENCE=64
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_OCCURRENCES=65
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CARDINALITY=66
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ORDERED=67
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_UNORDERED=68
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_UNIQUE=69
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_USE_NODE=70
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_USE_ARCHETYPE=71
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ALLOW_ARCHETYPE=72
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_INCLUDE=73
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_EXCLUDE=74
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_CLOSED=75
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_ASTERISK=76
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_LE=77
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_GE=78
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_GT=79
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_LT=80
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_SLASH=81
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_IVL_DELIM=82
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_IVL_SEP=83
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ODIN14_BLOCK_START=84
2025-02-15 15:52:44:329 grammar LogManager.java:25 import OBJECT_VERSION_ID=85
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ARCHETYPE_HRID=86
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ARCHETYPE_REF=87
2025-02-15 15:52:44:329 grammar LogManager.java:25 import VERSION_ID=88
2025-02-15 15:52:44:329 grammar LogManager.java:25 import FULLY_QUALIFIED_RM_ENTITY=89
2025-02-15 15:52:44:329 grammar LogManager.java:25 import QUALIFIED_TERM_CODE_ID=90
2025-02-15 15:52:44:329 grammar LogManager.java:25 import LOCAL_TERM_CODE_ID=91
2025-02-15 15:52:44:329 grammar LogManager.java:25 import QUALIFIED_TERM_CODE_REF=92
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ROOT_ID_CODE=93
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ID_CODE=94
2025-02-15 15:52:44:329 grammar LogManager.java:25 import AT_CODE=95
2025-02-15 15:52:44:329 grammar LogManager.java:25 import AC_CODE=96
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ADL14_AT_CODE=97
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ADL14_AC_CODE=98
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ISO8601_DATE_AUGMENTED=99
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ISO8601_TIME_AUGMENTED=100
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ISO8601_DATE_TIME_AUGMENTED=101
2025-02-15 15:52:44:329 grammar LogManager.java:25 import ISO8601_DURATION=102
2025-02-15 15:52:44:329 grammar LogManager.java:25 import SYM_TRUE=103
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_FALSE=104
2025-02-15 15:52:44:330 grammar LogManager.java:25 import GUID=105
2025-02-15 15:52:44:330 grammar LogManager.java:25 import UUID=106
2025-02-15 15:52:44:330 grammar LogManager.java:25 import INTEGER=107
2025-02-15 15:52:44:330 grammar LogManager.java:25 import REAL=108
2025-02-15 15:52:44:330 grammar LogManager.java:25 import REAL_PERCENT=109
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SCI_INTEGER=110
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SCI_REAL=111
2025-02-15 15:52:44:330 grammar LogManager.java:25 import CHARACTER=112
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_DOT=113
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_COMMA=114
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_SEMI_COLON=115
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_LPAREN=116
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_RPAREN=117
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_LBRACKET=118
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_RBRACKET=119
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_LCURLY=120
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_RCURLY=121
2025-02-15 15:52:44:330 grammar LogManager.java:25 import C_LOCAL_TERM_CODE_START=122
2025-02-15 15:52:44:330 grammar LogManager.java:25 import C_EXTERNAL_TERM_CODE_START=123
2025-02-15 15:52:44:330 grammar LogManager.java:25 import DATE_CONSTRAINT_PATTERN=124
2025-02-15 15:52:44:330 grammar LogManager.java:25 import TIME_CONSTRAINT_PATTERN=125
2025-02-15 15:52:44:330 grammar LogManager.java:25 import DATE_TIME_CONSTRAINT_PATTERN=126
2025-02-15 15:52:44:330 grammar LogManager.java:25 import DURATION_CONSTRAINT_PATTERN=127
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_NAMESPACE_SEP=128
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_LIST_CONTINUE=129
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_PLUS_OR_MINUS=130
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_PLUS=131
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_MINUS=132
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_PERCENT=133
2025-02-15 15:52:44:330 grammar LogManager.java:25 import SYM_CARET=134
2025-02-15 15:52:44:330 grammar LogManager.java:25 import UC_ID=135
2025-02-15 15:52:44:330 grammar LogManager.java:25 import LC_ID=136
2025-02-15 15:52:44:330 grammar LogManager.java:25 import ODIN_URI=137
2025-02-15 15:52:44:330 grammar LogManager.java:25 import PARAMETER=138
2025-02-15 15:52:44:330 grammar LogManager.java:25 import ODIN14_BLOCK_LINE=139
2025-02-15 15:52:44:330 grammar LogManager.java:25 import WS_ODIN=140
2025-02-15 15:52:44:330 grammar LogManager.java:25 import CMT_LINE_L=141
2025-02-15 15:52:44:330 grammar LogManager.java:25 import EOL_L=142
2025-02-15 15:52:44:330 grammar LogManager.java:25 import WS_L=143
2025-02-15 15:52:44:330 grammar LogManager.java:25 import C_EXTERNAL_TERM_CODE_STRING=144
2025-02-15 15:52:44:330 grammar LogManager.java:25 import CMT_LINE_X=145
2025-02-15 15:52:44:330 grammar LogManager.java:25 import EOL_X=146
2025-02-15 15:52:44:330 grammar LogManager.java:25 import WS_X=147
2025-02-15 15:52:44:330 grammar LogManager.java:25 import DELIMITED_REGEX=148
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'SELECT'=5
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'FROM'=7
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'WHERE'=8
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ORDER'=9
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'DESC'=11
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'DESCENDING'=12
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ASC'=13
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ASCENDING'=14
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'LIMIT'=15
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'OFFSET'=16
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'DISTINCT'=17
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'VERSION'=18
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'LATEST_VERSION'=19
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ALL_VERSIONS'=20
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'NULL'=21
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'TOP'=22
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'FORWARD'=23
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'BACKWARD'=24
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'CONTAINS'=25
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'matches'=31
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'LENGTH'=32
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'POSITION'=33
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'SUBSTRING'=34
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'CONCAT'=35
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'CONCAT_WS'=36
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ABS'=37
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'MOD'=38
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'CEIL'=39
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'FLOOR'=40
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ROUND'=41
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'NOW'=45
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'TERMINOLOGY'=52
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '='=62
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '--'=63
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'existence'=64
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'occurrences'=65
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'cardinality'=66
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'ordered'=67
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'unordered'=68
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'unique'=69
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'use_node'=70
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'use_archetype'=71
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'allow_archetype'=72
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'include'=73
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'exclude'=74
2025-02-15 15:52:44:330 grammar LogManager.java:25 import 'closed'=75
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '*'=76
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '>'=79
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '<'=80
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '/'=81
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '|'=82
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '..'=83
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '.'=113
2025-02-15 15:52:44:330 grammar LogManager.java:25 import ','=114
2025-02-15 15:52:44:330 grammar LogManager.java:25 import ';'=115
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '('=116
2025-02-15 15:52:44:330 grammar LogManager.java:25 import ')'=117
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '['=118
2025-02-15 15:52:44:330 grammar LogManager.java:25 import ']'=119
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '{'=120
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '}'=121
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '::'=128
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '...'=129
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '+'=131
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '-'=132
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '%'=133
2025-02-15 15:52:44:330 grammar LogManager.java:25 import '^'=134
2025-02-15 15:52:44:331 grammar LogManager.java:25 tokens={WS=1, UNICODE_BOM=2, CMT_LINE=3, EOL=4, SYM_SELECT=5, SYM_AS=6, SYM_FROM=7, SYM_WHERE=8, SYM_ORDER=9, SYM_BY=10, SYM_DESC=11, SYM_DESCENDING=12, SYM_ASC=13, SYM_ASCENDING=14, SYM_LIMIT=15, SYM_OFFSET=16, SYM_DISTINCT=17, SYM_VERSION=18, SYM_LATEST_VERSION=19, SYM_ALL_VERSIONS=20, SYM_NULL=21, SYM_TOP=22, SYM_FORWARD=23, SYM_BACKWARD=24, SYM_CONTAINS=25, SYM_AND=26, SYM_OR=27, SYM_NOT=28, SYM_EXISTS=29, SYM_LIKE=30, SYM_MATCHES=31, SYM_LENGTH=32, SYM_POSITION=33, SYM_SUBSTRING=34, SYM_CONCAT=35, SYM_CONCAT_WS=36, SYM_ABS=37, SYM_MOD=38, SYM_CEIL=39, SYM_FLOOR=40, SYM_ROUND=41, SYM_CURRENT_DATE=42, SYM_CURRENT_TIME=43, SYM_CURRENT_DATE_TIME=44, SYM_NOW=45, SYM_CURRENT_TIMEZONE=46, SYM_COUNT=47, SYM_MIN=48, SYM_MAX=49, SYM_SUM=50, SYM_AVG=51, SYM_TERMINOLOGY=52, CONTAINED_REGEX=53, AQL_URI=54, BOOLEAN=55, DATE_STRING=56, TIME_STRING=57, DATE_TIME_STRING=58, STRING=59, QUALIFIED_TERM_CODE=60, SYM_NE=61, SYM_EQ=62, SYM_DOUBLE_DASH=63, SYM_EXISTENCE=64, SYM_OCCURRENCES=65, SYM_CARDINALITY=66, SYM_ORDERED=67, SYM_UNORDERED=68, SYM_UNIQUE=69, SYM_USE_NODE=70, SYM_USE_ARCHETYPE=71, SYM_ALLOW_ARCHETYPE=72, SYM_INCLUDE=73, SYM_EXCLUDE=74, SYM_CLOSED=75, SYM_ASTERISK=76, SYM_LE=77, SYM_GE=78, SYM_GT=79, SYM_LT=80, SYM_SLASH=81, SYM_IVL_DELIM=82, SYM_IVL_SEP=83, ODIN14_BLOCK_START=84, OBJECT_VERSION_ID=85, ARCHETYPE_HRID=86, ARCHETYPE_REF=87, VERSION_ID=88, FULLY_QUALIFIED_RM_ENTITY=89, QUALIFIED_TERM_CODE_ID=90, LOCAL_TERM_CODE_ID=91, QUALIFIED_TERM_CODE_REF=92, ROOT_ID_CODE=93, ID_CODE=94, AT_CODE=95, AC_CODE=96, ADL14_AT_CODE=97, ADL14_AC_CODE=98, ISO8601_DATE_AUGMENTED=99, ISO8601_TIME_AUGMENTED=100, ISO8601_DATE_TIME_AUGMENTED=101, ISO8601_DURATION=102, SYM_TRUE=103, SYM_FALSE=104, GUID=105, UUID=106, INTEGER=107, REAL=108, REAL_PERCENT=109, SCI_INTEGER=110, SCI_REAL=111, CHARACTER=112, SYM_DOT=113, SYM_COMMA=114, SYM_SEMI_COLON=115, SYM_LPAREN=116, SYM_RPAREN=117, SYM_LBRACKET=118, SYM_RBRACKET=119, SYM_LCURLY=120, SYM_RCURLY=121, C_LOCAL_TERM_CODE_START=122, C_EXTERNAL_TERM_CODE_START=123, DATE_CONSTRAINT_PATTERN=124, TIME_CONSTRAINT_PATTERN=125, DATE_TIME_CONSTRAINT_PATTERN=126, DURATION_CONSTRAINT_PATTERN=127, SYM_NAMESPACE_SEP=128, SYM_LIST_CONTINUE=129, SYM_PLUS_OR_MINUS=130, SYM_PLUS=131, SYM_MINUS=132, SYM_PERCENT=133, SYM_CARET=134, UC_ID=135, LC_ID=136, ODIN_URI=137, PARAMETER=138, ODIN14_BLOCK_LINE=139, WS_ODIN=140, CMT_LINE_L=141, EOL_L=142, WS_L=143, C_EXTERNAL_TERM_CODE_STRING=144, CMT_LINE_X=145, EOL_X=146, WS_X=147, DELIMITED_REGEX=148, 'SELECT'=5, 'FROM'=7, 'WHERE'=8, 'ORDER'=9, 'DESC'=11, 'DESCENDING'=12, 'ASC'=13, 'ASCENDING'=14, 'LIMIT'=15, 'OFFSET'=16, 'DISTINCT'=17, 'VERSION'=18, 'LATEST_VERSION'=19, 'ALL_VERSIONS'=20, 'NULL'=21, 'TOP'=22, 'FORWARD'=23, 'BACKWARD'=24, 'CONTAINS'=25, 'matches'=31, 'LENGTH'=32, 'POSITION'=33, 'SUBSTRING'=34, 'CONCAT'=35, 'CONCAT_WS'=36, 'ABS'=37, 'MOD'=38, 'CEIL'=39, 'FLOOR'=40, 'ROUND'=41, 'NOW'=45, 'TERMINOLOGY'=52, '='=62, '--'=63, 'existence'=64, 'occurrences'=65, 'cardinality'=66, 'ordered'=67, 'unordered'=68, 'unique'=69, 'use_node'=70, 'use_archetype'=71, 'allow_archetype'=72, 'include'=73, 'exclude'=74, 'closed'=75, '*'=76, '>'=79, '<'=80, '/'=81, '|'=82, '..'=83, '.'=113, ','=114, ';'=115, '('=116, ')'=117, '['=118, ']'=119, '{'=120, '}'=121, '::'=128, '...'=129, '+'=131, '-'=132, '%'=133, '^'=134}
2025-02-15 15:52:44:331 semantics LogManager.java:25 tokens={EOF=-1, WS=1, UNICODE_BOM=2, CMT_LINE=3, EOL=4, SYM_SELECT=5, SYM_AS=6, SYM_FROM=7, SYM_WHERE=8, SYM_ORDER=9, SYM_BY=10, SYM_DESC=11, SYM_DESCENDING=12, SYM_ASC=13, SYM_ASCENDING=14, SYM_LIMIT=15, SYM_OFFSET=16, SYM_DISTINCT=17, SYM_VERSION=18, SYM_LATEST_VERSION=19, SYM_ALL_VERSIONS=20, SYM_NULL=21, SYM_TOP=22, SYM_FORWARD=23, SYM_BACKWARD=24, SYM_CONTAINS=25, SYM_AND=26, SYM_OR=27, SYM_NOT=28, SYM_EXISTS=29, SYM_LIKE=30, SYM_MATCHES=31, SYM_LENGTH=32, SYM_POSITION=33, SYM_SUBSTRING=34, SYM_CONCAT=35, SYM_CONCAT_WS=36, SYM_ABS=37, SYM_MOD=38, SYM_CEIL=39, SYM_FLOOR=40, SYM_ROUND=41, SYM_CURRENT_DATE=42, SYM_CURRENT_TIME=43, SYM_CURRENT_DATE_TIME=44, SYM_NOW=45, SYM_CURRENT_TIMEZONE=46, SYM_COUNT=47, SYM_MIN=48, SYM_MAX=49, SYM_SUM=50, SYM_AVG=51, SYM_TERMINOLOGY=52, CONTAINED_REGEX=53, AQL_URI=54, BOOLEAN=55, DATE_STRING=56, TIME_STRING=57, DATE_TIME_STRING=58, STRING=59, QUALIFIED_TERM_CODE=60, SYM_NE=61, SYM_EQ=62, SYM_DOUBLE_DASH=63, SYM_EXISTENCE=64, SYM_OCCURRENCES=65, SYM_CARDINALITY=66, SYM_ORDERED=67, SYM_UNORDERED=68, SYM_UNIQUE=69, SYM_USE_NODE=70, SYM_USE_ARCHETYPE=71, SYM_ALLOW_ARCHETYPE=72, SYM_INCLUDE=73, SYM_EXCLUDE=74, SYM_CLOSED=75, SYM_ASTERISK=76, SYM_LE=77, SYM_GE=78, SYM_GT=79, SYM_LT=80, SYM_SLASH=81, SYM_IVL_DELIM=82, SYM_IVL_SEP=83, ODIN14_BLOCK_START=84, OBJECT_VERSION_ID=85, ARCHETYPE_HRID=86, ARCHETYPE_REF=87, VERSION_ID=88, FULLY_QUALIFIED_RM_ENTITY=89, QUALIFIED_TERM_CODE_ID=90, LOCAL_TERM_CODE_ID=91, QUALIFIED_TERM_CODE_REF=92, ROOT_ID_CODE=93, ID_CODE=94, AT_CODE=95, AC_CODE=96, ADL14_AT_CODE=97, ADL14_AC_CODE=98, ISO8601_DATE_AUGMENTED=99, ISO8601_TIME_AUGMENTED=100, ISO8601_DATE_TIME_AUGMENTED=101, ISO8601_DURATION=102, SYM_TRUE=103, SYM_FALSE=104, GUID=105, UUID=106, INTEGER=107, REAL=108, REAL_PERCENT=109, SCI_INTEGER=110, SCI_REAL=111, CHARACTER=112, SYM_DOT=113, SYM_COMMA=114, SYM_SEMI_COLON=115, SYM_LPAREN=116, SYM_RPAREN=117, SYM_LBRACKET=118, SYM_RBRACKET=119, SYM_LCURLY=120, SYM_RCURLY=121, C_LOCAL_TERM_CODE_START=122, C_EXTERNAL_TERM_CODE_START=123, DATE_CONSTRAINT_PATTERN=124, TIME_CONSTRAINT_PATTERN=125, DATE_TIME_CONSTRAINT_PATTERN=126, DURATION_CONSTRAINT_PATTERN=127, SYM_NAMESPACE_SEP=128, SYM_LIST_CONTINUE=129, SYM_PLUS_OR_MINUS=130, SYM_PLUS=131, SYM_MINUS=132, SYM_PERCENT=133, SYM_CARET=134, UC_ID=135, LC_ID=136, ODIN_URI=137, PARAMETER=138, ODIN14_BLOCK_LINE=139, WS_ODIN=140, CMT_LINE_L=141, EOL_L=142, WS_L=143, C_EXTERNAL_TERM_CODE_STRING=144, CMT_LINE_X=145, EOL_X=146, WS_X=147, DELIMITED_REGEX=148}
2025-02-15 15:52:44:331 semantics LogManager.java:25 strings={'SELECT'=5, 'FROM'=7, 'WHERE'=8, 'ORDER'=9, 'DESC'=11, 'DESCENDING'=12, 'ASC'=13, 'ASCENDING'=14, 'LIMIT'=15, 'OFFSET'=16, 'DISTINCT'=17, 'VERSION'=18, 'LATEST_VERSION'=19, 'ALL_VERSIONS'=20, 'NULL'=21, 'TOP'=22, 'FORWARD'=23, 'BACKWARD'=24, 'CONTAINS'=25, 'matches'=31, 'LENGTH'=32, 'POSITION'=33, 'SUBSTRING'=34, 'CONCAT'=35, 'CONCAT_WS'=36, 'ABS'=37, 'MOD'=38, 'CEIL'=39, 'FLOOR'=40, 'ROUND'=41, 'NOW'=45, 'TERMINOLOGY'=52, '='=62, '--'=63, 'existence'=64, 'occurrences'=65, 'cardinality'=66, 'ordered'=67, 'unordered'=68, 'unique'=69, 'use_node'=70, 'use_archetype'=71, 'allow_archetype'=72, 'include'=73, 'exclude'=74, 'closed'=75, '*'=76, '>'=79, '<'=80, '/'=81, '|'=82, '..'=83, '.'=113, ','=114, ';'=115, '('=116, ')'=117, '['=118, ']'=119, '{'=120, '}'=121, '::'=128, '...'=129, '+'=131, '-'=132, '%'=133, '^'=134}
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 0 in rule aqlQuery
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[8, {<EOF>, 9, 15, 63}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 1 in rule aqlQuery
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[9, {<EOF>, 15, 63}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 2 in rule aqlQuery
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[15, {<EOF>, 63}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 3 in rule aqlQuery
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[63, <EOF>]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 4 in rule selectClause
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[17, {21..22, 25, 32..52, 55..59, 107..108, 110..111, 132, 136}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 5 in rule selectClause
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[22, {21, 25, 32..52, 55..59, 107..108, 110..111, 132, 136}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 6 in rule orderByClause
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[114, {<EOF>, 15, 63}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 7 in rule limitClause
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[16, {<EOF>, 63}]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 8 in rule resultTable
2025-02-15 15:52:44:342 LL1 LogManager.java:25 look=[114, 7]
2025-02-15 15:52:44:342 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:342 LL1 LogManager.java:25 
DECISION 9 in rule columnSpec
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[6, {7, 114}]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 10 in rule columnValue
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[136, {47..51}, {25, 32..46, 52, 136}, {21, 55..59, 107..108, 110..111, 132}]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 11 in rule orderByExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[{11..14}, {<EOF>, 15, 63, 114}]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 12 in rule modelTypeConstraint
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[135, 135]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 13 in rule modelTypeChain
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[28, 25]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 14 in rule modelTypeSubChain
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[135, 116]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 15 in rule modelTypeExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[28, 135, 116]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 16 in rule modelTypeExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 17 in rule modelTypeExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 18 in rule modelType
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[136, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 19 in rule modelType
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[118, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 20 in rule whereExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[28, 116, {21, 25, 29, 32..46, 52, 55..59, 102, 107..111, 116, 131..132, 136, 138}]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 21 in rule whereExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 22 in rule whereExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 23 in rule whereBooleanLeaf
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[29, {21, 25, 32..46, 52, 55..59, 102, 107..111, 116, 131..132, 136, 138}, 136, 136, {25, 32..46, 52, 136}]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 24 in rule comparisonOperand
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[{21, 25, 32..46, 52, 55..59, 107..108, 110..111, 132, 136, 138}, {21, 25, 32..46, 52, 55..59, 102, 107..111, 116, 131..132, 136, 138}]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 25 in rule value
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[136, {21, 55..59, 107..108, 110..111, 132}, {25, 32..46, 52, 136}, 138]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 26 in rule matchesOperand
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[120, 52]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 27 in rule matchesConstraint
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[{59, 82, 84, 92, 99..104, 107..111, 118, 122..127, 131..132, 135, 148}, 54, 138]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:343 LL1 LogManager.java:25 
DECISION 28 in rule arithmeticExpr
2025-02-15 15:52:44:343 LL1 LogManager.java:25 look=[null, null, null]
2025-02-15 15:52:44:343 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 29 in rule arithmeticExpr
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 30 in rule arithmeticLeaf
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{56..58, 102, 107..111, 131..132}, {21, 25, 32..46, 52, 55..59, 107..108, 110..111, 132, 136, 138}, 116]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 31 in rule arithmeticLiteral
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{107, 110, 131..132}, {108..109, 111, 131..132}, {56..58}, {102, 131..132}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 32 in rule dataMatchPath
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[81, null]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 33 in rule dataMatchPathSegment
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[118, null]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 34 in rule dataMatchPathPredicate
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[26, 114, 119]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 35 in rule dataMatchPathValuePredicate
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[136, 136, 116]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 36 in rule dataMatchPathValuePredicate
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 37 in rule dataMatchPathValuePredicate
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[null, null]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 38 in rule modelPathComparatorValue
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{21, 55..59, 107..108, 110..111, 132}, 136, 138]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 39 in rule functionCall
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[52, {25, 32..46}, 136]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 40 in rule functionArgs
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[114, 117]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 41 in rule functionArgs
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{21, 25, 32..46, 52, 55..59, 107..108, 110..111, 132, 136, 138}, 117]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 42 in rule aggregateFunctionCall
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[17, 136]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 43 in rule aggregateFunctionCall
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{17, 136}, 76]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 44 in rule aggregateFunctionCall
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[47, {48..51}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 45 in rule terminologyFunctionCall
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{25, 32..36}, 59]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 46 in rule builtInFunction
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{25, 32..36}, {37..41}, {42..46}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 47 in rule primitiveLiteral
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[59, {107..108, 110..111, 132}, {56..58}, 55, 21]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 48 in rule numericLiteral
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[107, 108, 110, 111, 132]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 49 in rule modelSpecificPredicateShortcut
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[59, {94..95, 97}, 60]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 50 in rule top
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{23..24}, {21, 25, 32..52, 55..59, 107..108, 110..111, 132, 136}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 51 in rule cComplexObject
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[118, {31, 65, 70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 52 in rule cComplexObject
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[65, {31, 70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 53 in rule cComplexObject
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[31, {70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 54 in rule cComplexObjectDef
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[136, 121]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 55 in rule cComplexObjectDef
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[136, 76]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 56 in rule cAttribute
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[64, {31, 66, 121, 136}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 57 in rule cAttribute
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[66, {31, 121, 136}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 58 in rule cAttribute
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{70..72, 84, 107..111, 131..132, 135}, {59, 82, 92, 99..104, 107..111, 118, 122..127, 131..132, 148}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 59 in rule cAttribute
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[31, {121, 136}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 60 in rule cAttributeDef
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[{70..72, 84, 107..111, 131..132, 135}, 121]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 61 in rule cRegularObject
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[135, 71, 70, 72, 135, {107..111, 131..132}, 84]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 62 in rule cArchetypeRoot
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[65, {70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 63 in rule cComplexObjectProxy
2025-02-15 15:52:44:344 LL1 LogManager.java:25 look=[65, 81]
2025-02-15 15:52:44:344 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:344 LL1 LogManager.java:25 
DECISION 64 in rule cRegularPrimitiveObject
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[65, {31, 70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 65 in rule cRegularPrimitiveObject
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[31, {70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 66 in rule archetypeSlot
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[65, {31, 70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 67 in rule archetypeSlot
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[73, {74, 121}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 68 in rule archetypeSlot
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[74, 121]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 69 in rule archetypeSlot
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[31, {70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 70 in rule archetypeSlot
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[{31, 65, 70..72, 84, 107..111, 121, 131..132, 135}, 75]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 71 in rule cIncludes
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[{81, 136}, {74, 121}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 72 in rule cExcludes
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[{81, 136}, 121]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 73 in rule archetypeIdPath
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[81, 136]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 74 in rule archetypeIdPath
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[81, 31]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 75 in rule existence
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[107, 107]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 76 in rule cardinality
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 77 in rule cardinality
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 78 in rule multiplicity
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[107, 76, 107]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 79 in rule multiplicityMod
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[115, 115]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 80 in rule cOrdinal
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[114, {70..72, 84, 107..111, 115, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 81 in rule cOrdinal
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[115, {70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 82 in rule ordinalValue
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[{107, 110, 131..132}, {108..109, 111, 131..132}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 83 in rule domainSpecificExtension
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[139, {70..72, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 84 in rule rmTypeId
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[114, 79]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 85 in rule rmTypeId
2025-02-15 15:52:44:345 LL1 LogManager.java:25 look=[80, {31, 65, 70..72, 79, 81, 84, 107..111, 114, 117..118, 121, 131..132, 135}]
2025-02-15 15:52:44:345 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:345 LL1 LogManager.java:25 
DECISION 86 in rule cObjectMatcher
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[135, {59, 82, 92, 99..104, 107..111, 118, 122..127, 131..132, 148}, 84]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 87 in rule cComplexObjectMatcher
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[118, {31, 84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 88 in rule cComplexObjectMatcher
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[31, {84, 107..111, 121, 131..132, 135}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 89 in rule cComplexObjectMatcherDef
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[136, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 90 in rule cComplexObjectMatcherDef
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[136, 76]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 91 in rule cAttributeMatcher
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{84, 107..111, 131..132, 135}, {59, 82, 92, 99..104, 107..111, 118, 122..127, 131..132, 148}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 92 in rule cAttributeMatcher
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[31, {121, 136}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 93 in rule cAttributeMatcherDef
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{84, 107..111, 131..132, 135}, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 94 in rule cRegularObjectMatcher
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[135, 135, {107..111, 131..132}, 84]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 95 in rule cTerminologyCode
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[118, 118, 122, 123, 92]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 96 in rule valueSetCode
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 119]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 97 in rule cLocalTermCode
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 119]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 98 in rule cLocalTermCode
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{95, 97}, 119]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 99 in rule localCodesList
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[114, {115, 119}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 100 in rule cExternalTermCode
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 119]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 101 in rule cExternalTermCode
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[144, 119]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 102 in rule externalCodesList
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[114, {115, 119}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 103 in rule cInlinePrimitiveObject
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{82, 99..102, 107..111, 124..127, 131..132}, {59, 148}, {92, 118, 122..123}, {103..104}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 104 in rule cInlineOrderedObject
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{82, 107, 110, 131..132}, {82, 108..109, 111, 131..132}, {82, 99..102, 124..127, 131..132}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 105 in rule cInlineDTemporalObject
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{82, 99, 124}, {82, 100, 125}, {82, 101, 126}, {82, 102, 127, 131..132}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 106 in rule cBoolean
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{103..104}, {103..104}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 107 in rule cBoolean
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 108 in rule cInteger
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{107, 110, 131..132}, {107, 110, 131..132}, 82, 82]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 109 in rule cInteger
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 110 in rule cReal
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{108..109, 111, 131..132}, {108..109, 111, 131..132}, 82, 82]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 111 in rule cReal
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 112 in rule cDateTime
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[126, 101, 101, 82, 82]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 113 in rule cDateTime
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 114 in rule cDate
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[124, 99, 99, 82, 82]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 115 in rule cDate
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 116 in rule cTime
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[125, 100, 100, 82, 82]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 117 in rule cTime
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 118 in rule cDuration
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[82, {102, 131..132}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 119 in rule cDuration
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[81, {115, 121}]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 120 in rule cDuration
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[127, {102, 131..132}, {102, 131..132}, 82, 82]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 121 in rule cDuration
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 122 in rule cString
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[59, 59, 148]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 123 in rule cString
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[115, 121]
2025-02-15 15:52:44:346 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:346 LL1 LogManager.java:25 
DECISION 124 in rule primitiveObject
2025-02-15 15:52:44:346 LL1 LogManager.java:25 look=[{59, 90..91, 99..104, 107..112, 131..132}, 116, 118, 120, 82]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 125 in rule primitiveValue
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[59, {107, 110, 131..132}, {108..109, 111, 131..132}, {103..104}, 112, {90..91}, 99, 100, 101, {102, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 126 in rule primitiveValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[59, {107, 110, 131..132}, {108..109, 111, 131..132}, {103..104}, 112, {90..91}, 99, 100, 101, {102, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 127 in rule primitiveInterval
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[82, 82, 82, 82, 82, 82]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 128 in rule stringValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 129 in rule integerValue
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{131..132}, {107, 110}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 130 in rule integerValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 131 in rule integerIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[79, {107, 110, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 132 in rule integerIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[80, {107, 110, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 133 in rule integerIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{77..80}, {107, 110, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 134 in rule integerIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{79, 107, 110, 131..132}, {77..80, 107, 110, 131..132}, {107, 110, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 135 in rule integerIntervals
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 136 in rule realValue
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{131..132}, {108..109, 111}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 137 in rule realValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 138 in rule realIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[79, {108..109, 111, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 139 in rule realIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[80, {108..109, 111, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 140 in rule realIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{77..80}, {108..109, 111, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 141 in rule realIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{79, 108..109, 111, 131..132}, {77..80, 108..109, 111, 131..132}, {108..109, 111, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 142 in rule realIntervals
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 143 in rule booleanValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 144 in rule characterValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 145 in rule dateValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 146 in rule dateIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[79, 99]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 147 in rule dateIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[80, 99]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 148 in rule dateIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{77..80}, 99]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 149 in rule dateIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{79, 99}, {77..80, 99}, 99]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 150 in rule dateIntervals
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 151 in rule timeValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 152 in rule timeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[79, 100]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 153 in rule timeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[80, 100]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 154 in rule timeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{77..80}, 100]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 155 in rule timeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{79, 100}, {77..80, 100}, 100]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 156 in rule timeIntervals
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 157 in rule dateTimeValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 158 in rule dateTimeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[79, 101]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 159 in rule dateTimeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[80, 101]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 160 in rule dateTimeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{77..80}, 101]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 161 in rule dateTimeIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{79, 101}, {77..80, 101}, 101]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 162 in rule dateTimeIntervals
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 163 in rule durationValue
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{131..132}, 102]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 164 in rule durationValues
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 165 in rule durationIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[79, {102, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 166 in rule durationIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[80, {102, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 167 in rule durationIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{77..80}, {102, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 168 in rule durationIntervalRange
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[{79, 102, 131..132}, {77..80, 102, 131..132}, {102, 131..132}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 169 in rule durationIntervals
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {115, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 170 in rule termCodeListValue
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[114, {<EOF>, 117, 119, 121}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 171 in rule adlPath
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[81, {31, 70..72, 81, 84, 107..111, 117, 121, 131..132, 135}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 172 in rule adlPathSegment
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[118, {31, 70..72, 81, 84, 107..111, 117, 121, 131..132, 135}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 173 in rule adlPathPredicate
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[87, {94..95, 97}]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 174 in rule augmentedAdlPath
2025-02-15 15:52:44:347 LL1 LogManager.java:25 look=[81, 117]
2025-02-15 15:52:44:347 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:347 LL1 LogManager.java:25 
DECISION 175 in rule modelSubPath
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[81, null]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 176 in rule odinObject
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{135..136}, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 177 in rule odinObject
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{135..136}, {80, 116}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 178 in rule odinObject
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[<EOF>, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 179 in rule odinAttrVal
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[115, {<EOF>, 79, 135..136}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 180 in rule odinObjectBlock
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{80, 116}, 80]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 181 in rule odinObjectValueBlock
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[116, 80]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 182 in rule odinObjectValueBlock
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{135..136}, 79]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 183 in rule odinObjectValueBlock
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[118, 79]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 184 in rule odinObjectValueBlock
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{59, 82, 90..91, 99..104, 107..112, 116, 118, 120, 131..132}, {135..136}, 118, 137, 79]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 185 in rule odinPathList
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 79]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 186 in rule odinPathList
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114, 79]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 187 in rule odinPath
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[118, 81]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 188 in rule odinPath
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[81, {79, 114}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 189 in rule odinPathSegment
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[118, {79, 81, 114}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 190 in rule primitiveListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[59, {107, 110, 131..132}, {108..109, 111, 131..132}, {103..104}, 112, {90..91}, 99, 100, 101, {102, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 191 in rule primitiveIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[82, 82, 82, 82, 82, 82]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 192 in rule stringListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 193 in rule stringListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 194 in rule integerListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 195 in rule integerListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 196 in rule integerIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[79, {107, 110, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 197 in rule integerIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[80, {107, 110, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 198 in rule integerIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{77..80}, {107, 110, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 199 in rule integerIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[82, 82, 82]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 200 in rule integerIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 201 in rule integerIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 202 in rule realListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 203 in rule realListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 204 in rule realIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[79, {108..109, 111, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 205 in rule realIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[80, {108..109, 111, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 206 in rule realIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{77..80}, {108..109, 111, 131..132}]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 207 in rule realIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[82, 82, 82]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 208 in rule realIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 209 in rule realIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 210 in rule booleanListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 211 in rule booleanListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 212 in rule characterListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 213 in rule characterListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 214 in rule dateListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 215 in rule dateListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 216 in rule dateIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[79, 99]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 217 in rule dateIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[80, 99]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 218 in rule dateIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{77..80}, 99]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 219 in rule dateIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[82, 82, 82]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 220 in rule dateIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 221 in rule dateIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 222 in rule timeListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 223 in rule timeListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 224 in rule timeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[79, 100]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 225 in rule timeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[80, 100]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 226 in rule timeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{77..80}, 100]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 227 in rule timeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[82, 82, 82]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 228 in rule timeIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 229 in rule timeIntervalListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 230 in rule dateTimeListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 231 in rule dateTimeListValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 232 in rule dateTimeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[79, 101]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 233 in rule dateTimeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[80, 101]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 234 in rule dateTimeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[{77..80}, 101]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 235 in rule dateTimeIntervalValue
2025-02-15 15:52:44:348 LL1 LogManager.java:25 look=[82, 82, 82]
2025-02-15 15:52:44:348 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:348 LL1 LogManager.java:25 
DECISION 236 in rule dateTimeIntervalListValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 237 in rule dateTimeIntervalListValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 238 in rule durationListValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 239 in rule durationListValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 240 in rule durationIntervalValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[79, {102, 131..132}]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 241 in rule durationIntervalValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[80, {102, 131..132}]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 242 in rule durationIntervalValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[{77..80}, {102, 131..132}]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 243 in rule durationIntervalValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[82, 82, 82]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 244 in rule durationIntervalListValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[114, <EOF>]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? true
2025-02-15 15:52:44:349 LL1 LogManager.java:25 
DECISION 245 in rule durationIntervalListValue
2025-02-15 15:52:44:349 LL1 LogManager.java:25 look=[114, 114]
2025-02-15 15:52:44:349 LL1 LogManager.java:25 LL(1)? false
2025-02-15 15:52:44:359 action-translator LogManager.java:25 translate 
2025-02-15 15:52:44:360 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2025-02-15 15:52:44:360 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate 
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2025-02-15 15:52:44:361 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:362 action-translator LogManager.java:25 translate 
2025-02-15 15:52:44:362 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2025-02-15 15:52:44:362 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:362 action-translator LogManager.java:25 translate this.precpred(this._ctx, 2)
2025-02-15 15:52:44:363 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2025-02-15 15:52:44:363 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:363 action-translator LogManager.java:25 translate this.precpred(this._ctx, 2)
2025-02-15 15:52:44:363 action-translator LogManager.java:25 translate 
2025-02-15 15:52:44:364 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:364 action-translator LogManager.java:25 translate this.precpred(this._ctx, 2)
2025-02-15 15:52:44:364 action-translator LogManager.java:25 translate this.precpred(this._ctx, 3)
2025-02-15 15:52:44:364 action-translator LogManager.java:25 translate this.precpred(this._ctx, 2)
