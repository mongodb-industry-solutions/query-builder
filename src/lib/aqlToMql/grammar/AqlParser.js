// Generated from AqlParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import AqlParserListener from './AqlParserListener.js';
import AqlParserVisitor from './AqlParserVisitor.js';

const serializedATN = [4,1,148,2051,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,1,0,1,0,1,0,3,0,412,8,0,1,0,3,0,415,8,0,1,0,3,0,
418,8,0,1,0,3,0,421,8,0,1,0,1,0,1,1,1,1,3,1,427,8,1,1,1,3,1,430,8,1,1,1,
1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,445,8,4,10,4,12,4,448,
9,4,1,5,1,5,1,5,1,5,3,5,454,8,5,1,6,1,6,1,6,5,6,459,8,6,10,6,12,6,462,9,
6,1,7,1,7,1,7,3,7,467,8,7,1,8,1,8,1,9,1,9,1,9,1,9,3,9,475,8,9,1,10,1,10,
3,10,479,8,10,1,11,1,11,3,11,483,8,11,1,12,1,12,3,12,487,8,12,1,12,1,12,
1,12,1,13,1,13,1,13,1,13,1,13,3,13,497,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,3,14,507,8,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,515,8,14,10,14,
12,14,518,9,14,1,15,1,15,3,15,522,8,15,1,15,1,15,1,15,1,15,3,15,528,8,15,
1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,538,8,16,1,16,1,16,1,16,1,16,
1,16,1,16,5,16,546,8,16,10,16,12,16,549,9,16,1,17,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,569,
8,17,1,18,1,18,3,18,573,8,18,1,19,1,19,1,19,1,19,3,19,579,8,19,1,20,1,20,
1,21,1,21,1,21,1,21,1,21,3,21,588,8,21,1,22,1,22,1,22,3,22,593,8,22,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,607,8,23,10,
23,12,23,610,9,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,618,8,24,1,25,1,25,
1,25,1,25,3,25,624,8,25,1,26,1,26,5,26,628,8,26,10,26,12,26,631,9,26,1,27,
1,27,1,27,1,27,1,27,1,27,3,27,639,8,27,1,28,1,28,1,28,1,28,1,28,3,28,646,
8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,
29,661,8,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,669,8,29,10,29,12,29,672,
9,29,1,30,1,30,1,30,3,30,677,8,30,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
3,32,687,8,32,1,33,1,33,1,33,1,33,5,33,693,8,33,10,33,12,33,696,9,33,3,33,
698,8,33,1,33,1,33,1,34,1,34,1,34,3,34,705,8,34,1,34,1,34,3,34,709,8,34,
1,34,1,34,1,34,1,34,1,34,1,34,3,34,717,8,34,1,35,1,35,1,36,1,36,1,36,1,36,
1,36,1,36,1,36,1,36,1,36,1,36,3,36,731,8,36,1,36,1,36,1,37,1,37,1,37,3,37,
738,8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
3,42,753,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,761,8,43,1,44,1,44,1,45,
1,45,1,45,3,45,768,8,45,1,46,1,46,1,46,3,46,773,8,46,1,47,1,47,3,47,777,
8,47,1,47,3,47,780,8,47,1,47,1,47,1,47,1,47,1,47,3,47,787,8,47,1,48,4,48,
790,8,48,11,48,12,48,791,1,48,3,48,795,8,48,1,49,1,49,1,49,1,49,1,50,1,50,
3,50,803,8,50,1,50,3,50,806,8,50,1,50,1,50,1,50,1,50,3,50,812,8,50,1,50,
1,50,3,50,816,8,50,1,51,4,51,819,8,51,11,51,12,51,820,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,3,52,830,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
840,8,53,1,54,1,54,1,54,3,54,845,8,54,1,54,1,54,1,55,1,55,1,55,3,55,852,
8,55,1,55,1,55,1,55,1,55,1,55,3,55,859,8,55,1,56,1,56,1,56,1,56,3,56,865,
8,56,1,56,1,56,1,56,3,56,870,8,56,1,56,3,56,873,8,56,1,56,3,56,876,8,56,
1,56,3,56,879,8,56,1,57,1,57,4,57,883,8,57,11,57,12,57,884,1,58,1,58,4,58,
889,8,58,11,58,12,58,890,1,59,1,59,1,59,1,59,1,59,1,59,1,60,3,60,900,8,60,
1,60,1,60,5,60,904,8,60,10,60,12,60,907,9,60,1,61,1,61,1,61,1,61,1,61,1,
61,1,62,1,62,1,62,1,62,3,62,919,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,
1,64,1,64,3,64,930,8,64,3,64,932,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,66,
1,66,1,66,1,66,1,66,3,66,945,8,66,1,67,1,67,3,67,949,8,67,1,68,1,68,1,68,
1,69,1,69,1,69,1,70,1,70,1,70,5,70,960,8,70,10,70,12,70,963,9,70,1,70,1,
70,3,70,967,8,70,1,71,1,71,3,71,971,8,71,1,72,1,72,1,72,1,72,1,73,1,73,4,
73,979,8,73,11,73,12,73,980,1,74,1,74,1,74,1,74,1,74,5,74,988,8,74,10,74,
12,74,991,9,74,1,74,1,74,3,74,995,8,74,1,75,1,75,1,76,1,76,1,76,3,76,1002,
8,76,1,77,1,77,3,77,1006,8,77,1,77,1,77,1,77,1,77,1,77,3,77,1013,8,77,1,
78,4,78,1016,8,78,11,78,12,78,1017,1,78,3,78,1021,8,78,1,79,1,79,1,79,1,
79,1,79,3,79,1028,8,79,1,79,1,79,3,79,1032,8,79,1,80,4,80,1035,8,80,11,80,
12,80,1036,1,81,1,81,1,81,1,81,3,81,1043,8,81,1,82,1,82,1,82,1,82,1,82,3,
82,1050,8,82,1,83,1,83,1,83,1,83,1,84,1,84,1,84,3,84,1059,8,84,1,84,1,84,
1,85,1,85,1,85,1,86,1,86,1,86,3,86,1069,8,86,3,86,1071,8,86,1,86,1,86,1,
87,1,87,4,87,1077,8,87,11,87,12,87,1078,1,88,1,88,1,88,1,89,1,89,1,89,3,
89,1087,8,89,3,89,1089,8,89,1,89,1,89,1,90,1,90,4,90,1095,8,90,11,90,12,
90,1096,1,91,1,91,1,91,1,92,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,95,
1,95,3,95,1113,8,95,1,96,1,96,1,96,3,96,1118,8,96,1,97,1,97,1,97,1,97,3,
97,1124,8,97,1,98,1,98,3,98,1128,8,98,1,98,3,98,1131,8,98,1,99,1,99,1,99,
1,100,1,100,1,100,1,100,3,100,1140,8,100,1,100,3,100,1143,8,100,1,101,1,
101,1,101,1,102,1,102,1,102,1,102,3,102,1152,8,102,1,102,3,102,1155,8,102,
1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,1165,8,104,1,104,3,
104,1168,8,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,3,106,1178,
8,106,1,106,3,106,1181,8,106,1,107,1,107,1,107,1,108,1,108,1,108,1,108,1,
108,3,108,1191,8,108,1,108,3,108,1194,8,108,1,109,1,109,1,109,1,110,1,110,
1,110,1,110,3,110,1203,8,110,3,110,1205,8,110,1,110,1,110,1,110,1,110,3,
110,1211,8,110,1,110,3,110,1214,8,110,1,111,1,111,1,111,1,112,1,112,1,112,
3,112,1222,8,112,1,112,3,112,1225,8,112,1,113,1,113,1,113,1,114,1,114,1,
114,1,114,1,114,3,114,1235,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,115,1,115,3,115,1247,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,
117,1,117,1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,1,
119,1,119,1,119,1,119,3,119,1271,8,119,1,120,1,120,1,120,1,120,1,120,1,120,
3,120,1279,8,120,1,121,1,121,1,122,1,122,1,122,5,122,1286,8,122,10,122,12,
122,1289,9,122,1,123,3,123,1292,8,123,1,123,1,123,1,124,1,124,1,124,5,124,
1299,8,124,10,124,12,124,1302,9,124,1,125,1,125,1,125,1,125,1,126,3,126,
1309,8,126,1,126,1,126,1,126,3,126,1314,8,126,1,126,1,126,1,126,3,126,1319,
8,126,1,126,1,126,1,126,1,126,1,126,3,126,1326,8,126,1,127,1,127,1,127,5,
127,1331,8,127,10,127,12,127,1334,9,127,1,128,3,128,1337,8,128,1,128,1,128,
1,129,1,129,1,129,5,129,1344,8,129,10,129,12,129,1347,9,129,1,130,1,130,
1,130,1,130,1,131,3,131,1354,8,131,1,131,1,131,1,131,3,131,1359,8,131,1,
131,1,131,1,131,3,131,1364,8,131,1,131,1,131,1,131,1,131,1,131,3,131,1371,
8,131,1,132,1,132,1,132,5,132,1376,8,132,10,132,12,132,1379,9,132,1,133,
1,133,1,134,1,134,1,134,5,134,1386,8,134,10,134,12,134,1389,9,134,1,135,
1,135,1,136,1,136,1,136,5,136,1396,8,136,10,136,12,136,1399,9,136,1,137,
1,137,1,138,1,138,1,138,5,138,1406,8,138,10,138,12,138,1409,9,138,1,139,
1,139,1,139,1,139,1,140,3,140,1416,8,140,1,140,1,140,1,140,3,140,1421,8,
140,1,140,1,140,1,140,3,140,1426,8,140,1,140,1,140,1,140,1,140,1,140,3,140,
1433,8,140,1,141,1,141,1,141,5,141,1438,8,141,10,141,12,141,1441,9,141,1,
142,1,142,1,143,1,143,1,143,5,143,1448,8,143,10,143,12,143,1451,9,143,1,
144,1,144,1,144,1,144,1,145,3,145,1458,8,145,1,145,1,145,1,145,3,145,1463,
8,145,1,145,1,145,1,145,3,145,1468,8,145,1,145,1,145,1,145,1,145,1,145,3,
145,1475,8,145,1,146,1,146,1,146,5,146,1480,8,146,10,146,12,146,1483,9,146,
1,147,1,147,1,148,1,148,1,148,5,148,1490,8,148,10,148,12,148,1493,9,148,
1,149,1,149,1,149,1,149,1,150,3,150,1500,8,150,1,150,1,150,1,150,3,150,1505,
8,150,1,150,1,150,1,150,3,150,1510,8,150,1,150,1,150,1,150,1,150,1,150,3,
150,1517,8,150,1,151,1,151,1,151,5,151,1522,8,151,10,151,12,151,1525,9,151,
1,152,3,152,1528,8,152,1,152,1,152,1,153,1,153,1,153,5,153,1535,8,153,10,
153,12,153,1538,9,153,1,154,1,154,1,154,1,154,1,155,3,155,1545,8,155,1,155,
1,155,1,155,3,155,1550,8,155,1,155,1,155,1,155,3,155,1555,8,155,1,155,1,
155,1,155,1,155,1,155,3,155,1562,8,155,1,156,1,156,1,156,5,156,1567,8,156,
10,156,12,156,1570,9,156,1,157,1,157,1,158,1,158,1,158,5,158,1577,8,158,
10,158,12,158,1580,9,158,1,159,1,159,1,160,1,160,4,160,1586,8,160,11,160,
12,160,1587,1,161,1,161,1,161,1,161,1,161,3,161,1595,8,161,1,162,1,162,3,
162,1599,8,162,1,163,1,163,1,164,1,164,1,165,1,165,1,165,3,165,1608,8,165,
1,166,1,166,1,166,1,167,4,167,1614,8,167,11,167,12,167,1615,1,168,1,168,
1,168,1,169,4,169,1622,8,169,11,169,12,169,1623,1,169,3,169,1627,8,169,1,
169,3,169,1630,8,169,1,170,1,170,1,170,1,170,3,170,1636,8,170,1,171,1,171,
1,172,1,172,3,172,1642,8,172,1,173,3,173,1645,8,173,1,173,1,173,1,173,4,
173,1650,8,173,11,173,12,173,1651,1,173,4,173,1655,8,173,11,173,12,173,1656,
1,173,3,173,1660,8,173,1,173,1,173,1,174,1,174,1,174,1,174,1,175,1,175,1,
175,1,175,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,1,
178,1,178,1,178,4,178,1685,8,178,11,178,12,178,1686,3,178,1689,8,178,1,179,
3,179,1692,8,179,1,179,4,179,1695,8,179,11,179,12,179,1696,1,180,1,180,1,
180,3,180,1702,8,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
1,181,3,181,1714,8,181,1,182,1,182,1,182,1,182,1,182,1,182,3,182,1722,8,
182,1,183,1,183,1,183,4,183,1727,8,183,11,183,12,183,1728,1,183,1,183,3,
183,1733,8,183,1,184,1,184,1,184,4,184,1738,8,184,11,184,12,184,1739,1,184,
1,184,3,184,1744,8,184,1,185,1,185,3,185,1748,8,185,1,185,1,185,1,185,3,
185,1753,8,185,1,185,1,185,1,185,1,185,1,185,3,185,1760,8,185,1,185,1,185,
1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,1771,8,185,1,186,1,186,1,
186,4,186,1776,8,186,11,186,12,186,1777,1,186,1,186,3,186,1782,8,186,1,187,
1,187,1,187,4,187,1787,8,187,11,187,12,187,1788,1,187,1,187,3,187,1793,8,
187,1,188,1,188,3,188,1797,8,188,1,188,1,188,1,188,3,188,1802,8,188,1,188,
1,188,1,188,1,188,1,188,3,188,1809,8,188,1,188,1,188,1,188,1,188,1,188,1,
188,1,188,1,188,1,188,3,188,1820,8,188,1,189,1,189,1,189,4,189,1825,8,189,
11,189,12,189,1826,1,189,1,189,3,189,1831,8,189,1,190,1,190,1,190,4,190,
1836,8,190,11,190,12,190,1837,1,190,1,190,3,190,1842,8,190,1,191,1,191,1,
191,4,191,1847,8,191,11,191,12,191,1848,1,191,1,191,3,191,1853,8,191,1,192,
1,192,1,192,4,192,1858,8,192,11,192,12,192,1859,1,192,1,192,3,192,1864,8,
192,1,193,1,193,3,193,1868,8,193,1,193,1,193,1,193,3,193,1873,8,193,1,193,
1,193,1,193,1,193,1,193,3,193,1880,8,193,1,193,1,193,1,193,1,193,1,193,1,
193,1,193,1,193,1,193,3,193,1891,8,193,1,194,1,194,1,194,4,194,1896,8,194,
11,194,12,194,1897,1,194,1,194,3,194,1902,8,194,1,195,1,195,1,195,4,195,
1907,8,195,11,195,12,195,1908,1,195,1,195,3,195,1913,8,195,1,196,1,196,3,
196,1917,8,196,1,196,1,196,1,196,3,196,1922,8,196,1,196,1,196,1,196,1,196,
1,196,3,196,1929,8,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,196,1,
196,3,196,1940,8,196,1,197,1,197,1,197,4,197,1945,8,197,11,197,12,197,1946,
1,197,1,197,3,197,1951,8,197,1,198,1,198,1,198,4,198,1956,8,198,11,198,12,
198,1957,1,198,1,198,3,198,1962,8,198,1,199,1,199,3,199,1966,8,199,1,199,
1,199,1,199,3,199,1971,8,199,1,199,1,199,1,199,1,199,1,199,3,199,1978,8,
199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,1989,8,199,
1,200,1,200,1,200,4,200,1994,8,200,11,200,12,200,1995,1,200,1,200,3,200,
2000,8,200,1,201,1,201,1,201,4,201,2005,8,201,11,201,12,201,2006,1,201,1,
201,3,201,2011,8,201,1,202,1,202,3,202,2015,8,202,1,202,1,202,1,202,3,202,
2020,8,202,1,202,1,202,1,202,1,202,1,202,3,202,2027,8,202,1,202,1,202,1,
202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2038,8,202,1,203,1,203,1,203,
4,203,2043,8,203,11,203,12,203,2044,1,203,1,203,3,203,2049,8,203,1,203,0,
4,28,32,46,58,204,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
380,382,384,386,388,390,392,394,396,398,400,402,404,406,0,23,1,0,135,136,
1,0,11,14,2,0,59,59,138,138,3,0,76,76,81,81,133,133,1,0,131,132,1,0,19,20,
1,0,48,51,2,0,25,25,32,36,1,0,37,41,1,0,42,46,2,0,61,62,77,80,1,0,56,58,
1,0,23,24,2,0,76,76,107,107,1,0,67,68,2,0,95,95,97,97,2,0,96,96,98,98,2,
0,107,107,110,110,2,0,108,109,111,111,1,0,103,104,1,0,90,91,1,0,77,80,2,
0,94,95,97,97,2203,0,408,1,0,0,0,2,424,1,0,0,0,4,433,1,0,0,0,6,436,1,0,0,
0,8,439,1,0,0,0,10,449,1,0,0,0,12,455,1,0,0,0,14,463,1,0,0,0,16,468,1,0,
0,0,18,474,1,0,0,0,20,476,1,0,0,0,22,482,1,0,0,0,24,484,1,0,0,0,26,496,1,
0,0,0,28,506,1,0,0,0,30,519,1,0,0,0,32,537,1,0,0,0,34,568,1,0,0,0,36,572,
1,0,0,0,38,578,1,0,0,0,40,580,1,0,0,0,42,587,1,0,0,0,44,592,1,0,0,0,46,594,
1,0,0,0,48,617,1,0,0,0,50,623,1,0,0,0,52,625,1,0,0,0,54,632,1,0,0,0,56,640,
1,0,0,0,58,660,1,0,0,0,60,676,1,0,0,0,62,678,1,0,0,0,64,686,1,0,0,0,66,688,
1,0,0,0,68,716,1,0,0,0,70,718,1,0,0,0,72,720,1,0,0,0,74,737,1,0,0,0,76,739,
1,0,0,0,78,741,1,0,0,0,80,743,1,0,0,0,82,745,1,0,0,0,84,752,1,0,0,0,86,760,
1,0,0,0,88,762,1,0,0,0,90,767,1,0,0,0,92,769,1,0,0,0,94,774,1,0,0,0,96,794,
1,0,0,0,98,796,1,0,0,0,100,800,1,0,0,0,102,818,1,0,0,0,104,829,1,0,0,0,106,
831,1,0,0,0,108,841,1,0,0,0,110,848,1,0,0,0,112,860,1,0,0,0,114,880,1,0,
0,0,116,886,1,0,0,0,118,892,1,0,0,0,120,899,1,0,0,0,122,908,1,0,0,0,124,
918,1,0,0,0,126,920,1,0,0,0,128,926,1,0,0,0,130,933,1,0,0,0,132,944,1,0,
0,0,134,948,1,0,0,0,136,950,1,0,0,0,138,953,1,0,0,0,140,956,1,0,0,0,142,
970,1,0,0,0,144,972,1,0,0,0,146,976,1,0,0,0,148,982,1,0,0,0,150,996,1,0,
0,0,152,1001,1,0,0,0,154,1003,1,0,0,0,156,1020,1,0,0,0,158,1022,1,0,0,0,
160,1034,1,0,0,0,162,1042,1,0,0,0,164,1049,1,0,0,0,166,1051,1,0,0,0,168,
1055,1,0,0,0,170,1062,1,0,0,0,172,1065,1,0,0,0,174,1074,1,0,0,0,176,1080,
1,0,0,0,178,1083,1,0,0,0,180,1092,1,0,0,0,182,1098,1,0,0,0,184,1101,1,0,
0,0,186,1104,1,0,0,0,188,1106,1,0,0,0,190,1112,1,0,0,0,192,1117,1,0,0,0,
194,1123,1,0,0,0,196,1127,1,0,0,0,198,1132,1,0,0,0,200,1139,1,0,0,0,202,
1144,1,0,0,0,204,1151,1,0,0,0,206,1156,1,0,0,0,208,1164,1,0,0,0,210,1169,
1,0,0,0,212,1177,1,0,0,0,214,1182,1,0,0,0,216,1190,1,0,0,0,218,1195,1,0,
0,0,220,1210,1,0,0,0,222,1215,1,0,0,0,224,1221,1,0,0,0,226,1226,1,0,0,0,
228,1234,1,0,0,0,230,1246,1,0,0,0,232,1248,1,0,0,0,234,1252,1,0,0,0,236,
1256,1,0,0,0,238,1270,1,0,0,0,240,1278,1,0,0,0,242,1280,1,0,0,0,244,1282,
1,0,0,0,246,1291,1,0,0,0,248,1295,1,0,0,0,250,1303,1,0,0,0,252,1325,1,0,
0,0,254,1327,1,0,0,0,256,1336,1,0,0,0,258,1340,1,0,0,0,260,1348,1,0,0,0,
262,1370,1,0,0,0,264,1372,1,0,0,0,266,1380,1,0,0,0,268,1382,1,0,0,0,270,
1390,1,0,0,0,272,1392,1,0,0,0,274,1400,1,0,0,0,276,1402,1,0,0,0,278,1410,
1,0,0,0,280,1432,1,0,0,0,282,1434,1,0,0,0,284,1442,1,0,0,0,286,1444,1,0,
0,0,288,1452,1,0,0,0,290,1474,1,0,0,0,292,1476,1,0,0,0,294,1484,1,0,0,0,
296,1486,1,0,0,0,298,1494,1,0,0,0,300,1516,1,0,0,0,302,1518,1,0,0,0,304,
1527,1,0,0,0,306,1531,1,0,0,0,308,1539,1,0,0,0,310,1561,1,0,0,0,312,1563,
1,0,0,0,314,1571,1,0,0,0,316,1573,1,0,0,0,318,1581,1,0,0,0,320,1585,1,0,
0,0,322,1589,1,0,0,0,324,1598,1,0,0,0,326,1600,1,0,0,0,328,1602,1,0,0,0,
330,1604,1,0,0,0,332,1609,1,0,0,0,334,1613,1,0,0,0,336,1617,1,0,0,0,338,
1626,1,0,0,0,340,1631,1,0,0,0,342,1637,1,0,0,0,344,1641,1,0,0,0,346,1644,
1,0,0,0,348,1663,1,0,0,0,350,1667,1,0,0,0,352,1671,1,0,0,0,354,1675,1,0,
0,0,356,1679,1,0,0,0,358,1691,1,0,0,0,360,1698,1,0,0,0,362,1713,1,0,0,0,
364,1721,1,0,0,0,366,1723,1,0,0,0,368,1734,1,0,0,0,370,1770,1,0,0,0,372,
1772,1,0,0,0,374,1783,1,0,0,0,376,1819,1,0,0,0,378,1821,1,0,0,0,380,1832,
1,0,0,0,382,1843,1,0,0,0,384,1854,1,0,0,0,386,1890,1,0,0,0,388,1892,1,0,
0,0,390,1903,1,0,0,0,392,1939,1,0,0,0,394,1941,1,0,0,0,396,1952,1,0,0,0,
398,1988,1,0,0,0,400,1990,1,0,0,0,402,2001,1,0,0,0,404,2037,1,0,0,0,406,
2039,1,0,0,0,408,409,3,2,1,0,409,411,3,4,2,0,410,412,3,6,3,0,411,410,1,0,
0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,3,8,4,0,414,413,1,0,0,0,414,
415,1,0,0,0,415,417,1,0,0,0,416,418,3,10,5,0,417,416,1,0,0,0,417,418,1,0,
0,0,418,420,1,0,0,0,419,421,5,63,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,
422,1,0,0,0,422,423,5,0,0,1,423,1,1,0,0,0,424,426,5,5,0,0,425,427,5,17,0,
0,426,425,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,430,3,92,46,0,429,
428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,3,12,6,0,432,3,1,0,0,
0,433,434,5,7,0,0,434,435,3,22,11,0,435,5,1,0,0,0,436,437,5,8,0,0,437,438,
3,32,16,0,438,7,1,0,0,0,439,440,5,9,0,0,440,441,5,10,0,0,441,446,3,20,10,
0,442,443,5,114,0,0,443,445,3,20,10,0,444,442,1,0,0,0,445,448,1,0,0,0,446,
444,1,0,0,0,446,447,1,0,0,0,447,9,1,0,0,0,448,446,1,0,0,0,449,450,5,15,0,
0,450,453,5,107,0,0,451,452,5,16,0,0,452,454,5,107,0,0,453,451,1,0,0,0,453,
454,1,0,0,0,454,11,1,0,0,0,455,460,3,14,7,0,456,457,5,114,0,0,457,459,3,
14,7,0,458,456,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,
13,1,0,0,0,462,460,1,0,0,0,463,466,3,18,9,0,464,465,5,6,0,0,465,467,3,16,
8,0,466,464,1,0,0,0,466,467,1,0,0,0,467,15,1,0,0,0,468,469,7,0,0,0,469,17,
1,0,0,0,470,475,3,52,26,0,471,475,3,68,34,0,472,475,3,64,32,0,473,475,3,
84,42,0,474,470,1,0,0,0,474,471,1,0,0,0,474,472,1,0,0,0,474,473,1,0,0,0,
475,19,1,0,0,0,476,478,3,332,166,0,477,479,7,1,0,0,478,477,1,0,0,0,478,479,
1,0,0,0,479,21,1,0,0,0,480,483,3,30,15,0,481,483,3,24,12,0,482,480,1,0,0,
0,482,481,1,0,0,0,483,23,1,0,0,0,484,486,3,30,15,0,485,487,5,28,0,0,486,
485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,25,0,0,489,490,3,26,
13,0,490,25,1,0,0,0,491,497,3,22,11,0,492,493,5,116,0,0,493,494,3,28,14,
0,494,495,5,117,0,0,495,497,1,0,0,0,496,491,1,0,0,0,496,492,1,0,0,0,497,
27,1,0,0,0,498,499,6,14,-1,0,499,500,5,28,0,0,500,507,3,28,14,5,501,507,
3,22,11,0,502,503,5,116,0,0,503,504,3,28,14,0,504,505,5,117,0,0,505,507,
1,0,0,0,506,498,1,0,0,0,506,501,1,0,0,0,506,502,1,0,0,0,507,516,1,0,0,0,
508,509,10,4,0,0,509,510,5,26,0,0,510,515,3,28,14,5,511,512,10,3,0,0,512,
513,5,27,0,0,513,515,3,28,14,4,514,508,1,0,0,0,514,511,1,0,0,0,515,518,1,
0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,29,1,0,0,0,518,516,1,0,0,0,519,
521,5,135,0,0,520,522,5,136,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,527,
1,0,0,0,523,524,5,118,0,0,524,525,3,326,163,0,525,526,5,119,0,0,526,528,
1,0,0,0,527,523,1,0,0,0,527,528,1,0,0,0,528,31,1,0,0,0,529,530,6,16,-1,0,
530,531,5,28,0,0,531,538,3,32,16,5,532,533,5,116,0,0,533,534,3,32,16,0,534,
535,5,117,0,0,535,538,1,0,0,0,536,538,3,34,17,0,537,529,1,0,0,0,537,532,
1,0,0,0,537,536,1,0,0,0,538,547,1,0,0,0,539,540,10,4,0,0,540,541,5,26,0,
0,541,546,3,32,16,5,542,543,10,3,0,0,543,544,5,27,0,0,544,546,3,32,16,4,
545,539,1,0,0,0,545,542,1,0,0,0,546,549,1,0,0,0,547,545,1,0,0,0,547,548,
1,0,0,0,548,33,1,0,0,0,549,547,1,0,0,0,550,551,5,29,0,0,551,569,3,52,26,
0,552,553,3,36,18,0,553,554,5,31,0,0,554,555,3,42,21,0,555,569,1,0,0,0,556,
557,3,52,26,0,557,558,5,30,0,0,558,559,3,40,20,0,559,569,1,0,0,0,560,561,
3,52,26,0,561,562,3,82,41,0,562,563,3,36,18,0,563,569,1,0,0,0,564,565,3,
64,32,0,565,566,3,82,41,0,566,567,3,36,18,0,567,569,1,0,0,0,568,550,1,0,
0,0,568,552,1,0,0,0,568,556,1,0,0,0,568,560,1,0,0,0,568,564,1,0,0,0,569,
35,1,0,0,0,570,573,3,38,19,0,571,573,3,46,23,0,572,570,1,0,0,0,572,571,1,
0,0,0,573,37,1,0,0,0,574,579,3,52,26,0,575,579,3,84,42,0,576,579,3,64,32,
0,577,579,5,138,0,0,578,574,1,0,0,0,578,575,1,0,0,0,578,576,1,0,0,0,578,
577,1,0,0,0,579,39,1,0,0,0,580,581,7,2,0,0,581,41,1,0,0,0,582,583,5,120,
0,0,583,584,3,44,22,0,584,585,5,121,0,0,585,588,1,0,0,0,586,588,3,72,36,
0,587,582,1,0,0,0,587,586,1,0,0,0,588,43,1,0,0,0,589,593,3,152,76,0,590,
593,5,54,0,0,591,593,5,138,0,0,592,589,1,0,0,0,592,590,1,0,0,0,592,591,1,
0,0,0,593,45,1,0,0,0,594,595,6,23,-1,0,595,596,3,48,24,0,596,608,1,0,0,0,
597,598,10,4,0,0,598,599,5,134,0,0,599,607,3,46,23,4,600,601,10,3,0,0,601,
602,7,3,0,0,602,607,3,46,23,4,603,604,10,2,0,0,604,605,7,4,0,0,605,607,3,
46,23,3,606,597,1,0,0,0,606,600,1,0,0,0,606,603,1,0,0,0,607,610,1,0,0,0,
608,606,1,0,0,0,608,609,1,0,0,0,609,47,1,0,0,0,610,608,1,0,0,0,611,618,3,
50,25,0,612,618,3,38,19,0,613,614,5,116,0,0,614,615,3,46,23,0,615,616,5,
117,0,0,616,618,1,0,0,0,617,611,1,0,0,0,617,612,1,0,0,0,617,613,1,0,0,0,
618,49,1,0,0,0,619,624,3,246,123,0,620,624,3,256,128,0,621,624,3,88,44,0,
622,624,3,304,152,0,623,619,1,0,0,0,623,620,1,0,0,0,623,621,1,0,0,0,623,
622,1,0,0,0,624,51,1,0,0,0,625,629,5,136,0,0,626,628,3,54,27,0,627,626,1,
0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,53,1,0,0,0,631,
629,1,0,0,0,632,633,5,81,0,0,633,638,5,136,0,0,634,635,5,118,0,0,635,636,
3,56,28,0,636,637,5,119,0,0,637,639,1,0,0,0,638,634,1,0,0,0,638,639,1,0,
0,0,639,55,1,0,0,0,640,645,3,324,162,0,641,642,5,26,0,0,642,646,3,58,29,
0,643,644,5,114,0,0,644,646,3,90,45,0,645,641,1,0,0,0,645,643,1,0,0,0,645,
646,1,0,0,0,646,57,1,0,0,0,647,648,6,29,-1,0,648,649,3,332,166,0,649,650,
5,31,0,0,650,651,5,53,0,0,651,661,1,0,0,0,652,653,3,332,166,0,653,654,3,
82,41,0,654,655,3,60,30,0,655,661,1,0,0,0,656,657,5,116,0,0,657,658,3,58,
29,0,658,659,5,117,0,0,659,661,1,0,0,0,660,647,1,0,0,0,660,652,1,0,0,0,660,
656,1,0,0,0,661,670,1,0,0,0,662,663,10,3,0,0,663,664,5,26,0,0,664,669,3,
58,29,4,665,666,10,2,0,0,666,667,5,27,0,0,667,669,3,58,29,3,668,662,1,0,
0,0,668,665,1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,
59,1,0,0,0,672,670,1,0,0,0,673,677,3,84,42,0,674,677,3,332,166,0,675,677,
5,138,0,0,676,673,1,0,0,0,676,674,1,0,0,0,676,675,1,0,0,0,677,61,1,0,0,0,
678,679,7,5,0,0,679,63,1,0,0,0,680,687,3,72,36,0,681,682,3,74,37,0,682,683,
3,66,33,0,683,687,1,0,0,0,684,685,5,136,0,0,685,687,3,66,33,0,686,680,1,
0,0,0,686,681,1,0,0,0,686,684,1,0,0,0,687,65,1,0,0,0,688,697,5,116,0,0,689,
694,3,38,19,0,690,691,5,114,0,0,691,693,3,38,19,0,692,690,1,0,0,0,693,696,
1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,
697,689,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,5,117,0,0,700,67,
1,0,0,0,701,702,5,47,0,0,702,708,5,116,0,0,703,705,5,17,0,0,704,703,1,0,
0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,709,3,330,165,0,707,709,5,76,0,0,
708,704,1,0,0,0,708,707,1,0,0,0,709,710,1,0,0,0,710,717,5,117,0,0,711,712,
3,70,35,0,712,713,5,116,0,0,713,714,3,330,165,0,714,715,5,117,0,0,715,717,
1,0,0,0,716,701,1,0,0,0,716,711,1,0,0,0,717,69,1,0,0,0,718,719,7,6,0,0,719,
71,1,0,0,0,720,721,5,52,0,0,721,722,5,116,0,0,722,723,5,59,0,0,723,724,5,
114,0,0,724,725,5,59,0,0,725,730,5,114,0,0,726,727,3,76,38,0,727,728,3,66,
33,0,728,731,1,0,0,0,729,731,5,59,0,0,730,726,1,0,0,0,730,729,1,0,0,0,731,
732,1,0,0,0,732,733,5,117,0,0,733,73,1,0,0,0,734,738,3,76,38,0,735,738,3,
78,39,0,736,738,3,80,40,0,737,734,1,0,0,0,737,735,1,0,0,0,737,736,1,0,0,
0,738,75,1,0,0,0,739,740,7,7,0,0,740,77,1,0,0,0,741,742,7,8,0,0,742,79,1,
0,0,0,743,744,7,9,0,0,744,81,1,0,0,0,745,746,7,10,0,0,746,83,1,0,0,0,747,
753,5,59,0,0,748,753,3,86,43,0,749,753,3,88,44,0,750,753,5,55,0,0,751,753,
5,21,0,0,752,747,1,0,0,0,752,748,1,0,0,0,752,749,1,0,0,0,752,750,1,0,0,0,
752,751,1,0,0,0,753,85,1,0,0,0,754,761,5,107,0,0,755,761,5,108,0,0,756,761,
5,110,0,0,757,761,5,111,0,0,758,759,5,132,0,0,759,761,3,86,43,0,760,754,
1,0,0,0,760,755,1,0,0,0,760,756,1,0,0,0,760,757,1,0,0,0,760,758,1,0,0,0,
761,87,1,0,0,0,762,763,7,11,0,0,763,89,1,0,0,0,764,768,5,59,0,0,765,768,
3,328,164,0,766,768,5,60,0,0,767,764,1,0,0,0,767,765,1,0,0,0,767,766,1,0,
0,0,768,91,1,0,0,0,769,770,5,22,0,0,770,772,5,107,0,0,771,773,7,12,0,0,772,
771,1,0,0,0,772,773,1,0,0,0,773,93,1,0,0,0,774,776,3,148,74,0,775,777,3,
98,49,0,776,775,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,780,3,130,65,
0,779,778,1,0,0,0,779,780,1,0,0,0,780,786,1,0,0,0,781,782,5,31,0,0,782,783,
5,120,0,0,783,784,3,96,48,0,784,785,5,121,0,0,785,787,1,0,0,0,786,781,1,
0,0,0,786,787,1,0,0,0,787,95,1,0,0,0,788,790,3,100,50,0,789,788,1,0,0,0,
790,791,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,795,1,0,0,0,793,795,
5,76,0,0,794,789,1,0,0,0,794,793,1,0,0,0,795,97,1,0,0,0,796,797,5,118,0,
0,797,798,3,186,93,0,798,799,5,119,0,0,799,99,1,0,0,0,800,802,3,150,75,0,
801,803,3,122,61,0,802,801,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,806,
3,126,63,0,805,804,1,0,0,0,805,806,1,0,0,0,806,815,1,0,0,0,807,808,5,31,
0,0,808,811,5,120,0,0,809,812,3,102,51,0,810,812,3,190,95,0,811,809,1,0,
0,0,811,810,1,0,0,0,812,813,1,0,0,0,813,814,5,121,0,0,814,816,1,0,0,0,815,
807,1,0,0,0,815,816,1,0,0,0,816,101,1,0,0,0,817,819,3,104,52,0,818,817,1,
0,0,0,819,820,1,0,0,0,820,818,1,0,0,0,820,821,1,0,0,0,821,103,1,0,0,0,822,
830,3,94,47,0,823,830,3,106,53,0,824,830,3,108,54,0,825,830,3,112,56,0,826,
830,3,110,55,0,827,830,3,140,70,0,828,830,3,146,73,0,829,822,1,0,0,0,829,
823,1,0,0,0,829,824,1,0,0,0,829,825,1,0,0,0,829,826,1,0,0,0,829,827,1,0,
0,0,829,828,1,0,0,0,830,105,1,0,0,0,831,832,5,71,0,0,832,833,3,148,74,0,
833,834,5,118,0,0,834,835,3,186,93,0,835,836,5,114,0,0,836,837,5,87,0,0,
837,839,5,119,0,0,838,840,3,130,65,0,839,838,1,0,0,0,839,840,1,0,0,0,840,
107,1,0,0,0,841,842,5,70,0,0,842,844,3,148,74,0,843,845,3,130,65,0,844,843,
1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,3,320,160,0,847,109,1,0,
0,0,848,849,3,148,74,0,849,851,3,98,49,0,850,852,3,130,65,0,851,850,1,0,
0,0,851,852,1,0,0,0,852,858,1,0,0,0,853,854,5,31,0,0,854,855,5,120,0,0,855,
856,3,190,95,0,856,857,5,121,0,0,857,859,1,0,0,0,858,853,1,0,0,0,858,859,
1,0,0,0,859,111,1,0,0,0,860,861,5,72,0,0,861,862,3,148,74,0,862,878,3,98,
49,0,863,865,3,130,65,0,864,863,1,0,0,0,864,865,1,0,0,0,865,875,1,0,0,0,
866,867,5,31,0,0,867,869,5,120,0,0,868,870,3,114,57,0,869,868,1,0,0,0,869,
870,1,0,0,0,870,872,1,0,0,0,871,873,3,116,58,0,872,871,1,0,0,0,872,873,1,
0,0,0,873,874,1,0,0,0,874,876,5,121,0,0,875,866,1,0,0,0,875,876,1,0,0,0,
876,879,1,0,0,0,877,879,5,75,0,0,878,864,1,0,0,0,878,877,1,0,0,0,879,113,
1,0,0,0,880,882,5,73,0,0,881,883,3,118,59,0,882,881,1,0,0,0,883,884,1,0,
0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,115,1,0,0,0,886,888,5,74,0,0,887,
889,3,118,59,0,888,887,1,0,0,0,889,890,1,0,0,0,890,888,1,0,0,0,890,891,1,
0,0,0,891,117,1,0,0,0,892,893,3,120,60,0,893,894,5,31,0,0,894,895,5,120,
0,0,895,896,5,148,0,0,896,897,5,121,0,0,897,119,1,0,0,0,898,900,5,81,0,0,
899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,905,5,136,0,0,902,904,
3,320,160,0,903,902,1,0,0,0,904,907,1,0,0,0,905,903,1,0,0,0,905,906,1,0,
0,0,906,121,1,0,0,0,907,905,1,0,0,0,908,909,5,64,0,0,909,910,5,31,0,0,910,
911,5,120,0,0,911,912,3,124,62,0,912,913,5,121,0,0,913,123,1,0,0,0,914,919,
5,107,0,0,915,916,5,107,0,0,916,917,5,83,0,0,917,919,5,107,0,0,918,914,1,
0,0,0,918,915,1,0,0,0,919,125,1,0,0,0,920,921,5,66,0,0,921,922,5,31,0,0,
922,923,5,120,0,0,923,924,3,128,64,0,924,925,5,121,0,0,925,127,1,0,0,0,926,
931,3,132,66,0,927,929,3,134,67,0,928,930,3,134,67,0,929,928,1,0,0,0,929,
930,1,0,0,0,930,932,1,0,0,0,931,927,1,0,0,0,931,932,1,0,0,0,932,129,1,0,
0,0,933,934,5,65,0,0,934,935,5,31,0,0,935,936,5,120,0,0,936,937,3,132,66,
0,937,938,5,121,0,0,938,131,1,0,0,0,939,945,5,107,0,0,940,945,5,76,0,0,941,
942,5,107,0,0,942,943,5,83,0,0,943,945,7,13,0,0,944,939,1,0,0,0,944,940,
1,0,0,0,944,941,1,0,0,0,945,133,1,0,0,0,946,949,3,136,68,0,947,949,3,138,
69,0,948,946,1,0,0,0,948,947,1,0,0,0,949,135,1,0,0,0,950,951,5,115,0,0,951,
952,7,14,0,0,952,137,1,0,0,0,953,954,5,115,0,0,954,955,5,69,0,0,955,139,
1,0,0,0,956,961,3,144,72,0,957,958,5,114,0,0,958,960,3,144,72,0,959,957,
1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,966,1,0,0,0,
963,961,1,0,0,0,964,965,5,115,0,0,965,967,3,142,71,0,966,964,1,0,0,0,966,
967,1,0,0,0,967,141,1,0,0,0,968,971,3,246,123,0,969,971,3,256,128,0,970,
968,1,0,0,0,970,969,1,0,0,0,971,143,1,0,0,0,972,973,3,142,71,0,973,974,5,
82,0,0,974,975,3,164,82,0,975,145,1,0,0,0,976,978,5,84,0,0,977,979,5,139,
0,0,978,977,1,0,0,0,979,980,1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,
147,1,0,0,0,982,994,5,135,0,0,983,984,5,80,0,0,984,989,3,148,74,0,985,986,
5,114,0,0,986,988,3,148,74,0,987,985,1,0,0,0,988,991,1,0,0,0,989,987,1,0,
0,0,989,990,1,0,0,0,990,992,1,0,0,0,991,989,1,0,0,0,992,993,5,79,0,0,993,
995,1,0,0,0,994,983,1,0,0,0,994,995,1,0,0,0,995,149,1,0,0,0,996,997,5,136,
0,0,997,151,1,0,0,0,998,1002,3,154,77,0,999,1002,3,190,95,0,1000,1002,3,
146,73,0,1001,998,1,0,0,0,1001,999,1,0,0,0,1001,1000,1,0,0,0,1002,153,1,
0,0,0,1003,1005,3,148,74,0,1004,1006,3,98,49,0,1005,1004,1,0,0,0,1005,1006,
1,0,0,0,1006,1012,1,0,0,0,1007,1008,5,31,0,0,1008,1009,5,120,0,0,1009,1010,
3,156,78,0,1010,1011,5,121,0,0,1011,1013,1,0,0,0,1012,1007,1,0,0,0,1012,
1013,1,0,0,0,1013,155,1,0,0,0,1014,1016,3,158,79,0,1015,1014,1,0,0,0,1016,
1017,1,0,0,0,1017,1015,1,0,0,0,1017,1018,1,0,0,0,1018,1021,1,0,0,0,1019,
1021,5,76,0,0,1020,1015,1,0,0,0,1020,1019,1,0,0,0,1021,157,1,0,0,0,1022,
1031,3,150,75,0,1023,1024,5,31,0,0,1024,1027,5,120,0,0,1025,1028,3,160,80,
0,1026,1028,3,190,95,0,1027,1025,1,0,0,0,1027,1026,1,0,0,0,1028,1029,1,0,
0,0,1029,1030,5,121,0,0,1030,1032,1,0,0,0,1031,1023,1,0,0,0,1031,1032,1,
0,0,0,1032,159,1,0,0,0,1033,1035,3,162,81,0,1034,1033,1,0,0,0,1035,1036,
1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,161,1,0,0,0,1038,1043,3,
154,77,0,1039,1043,3,110,55,0,1040,1043,3,140,70,0,1041,1043,3,146,73,0,
1042,1038,1,0,0,0,1042,1039,1,0,0,0,1042,1040,1,0,0,0,1042,1041,1,0,0,0,
1043,163,1,0,0,0,1044,1050,3,166,83,0,1045,1050,3,168,84,0,1046,1050,3,172,
86,0,1047,1050,3,178,89,0,1048,1050,5,92,0,0,1049,1044,1,0,0,0,1049,1045,
1,0,0,0,1049,1046,1,0,0,0,1049,1047,1,0,0,0,1049,1048,1,0,0,0,1050,165,1,
0,0,0,1051,1052,5,118,0,0,1052,1053,3,186,93,0,1053,1054,5,119,0,0,1054,
167,1,0,0,0,1055,1056,5,118,0,0,1056,1058,3,188,94,0,1057,1059,3,170,85,
0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1061,5,119,
0,0,1061,169,1,0,0,0,1062,1063,5,115,0,0,1063,1064,3,186,93,0,1064,171,1,
0,0,0,1065,1070,5,122,0,0,1066,1068,3,174,87,0,1067,1069,3,170,85,0,1068,
1067,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,1066,1,0,0,0,1070,
1071,1,0,0,0,1071,1072,1,0,0,0,1072,1073,5,119,0,0,1073,173,1,0,0,0,1074,
1076,3,186,93,0,1075,1077,3,176,88,0,1076,1075,1,0,0,0,1077,1078,1,0,0,0,
1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,175,1,0,0,0,1080,1081,5,114,0,0,
1081,1082,3,186,93,0,1082,177,1,0,0,0,1083,1088,5,123,0,0,1084,1086,3,180,
90,0,1085,1087,3,184,92,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1089,
1,0,0,0,1088,1084,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,1091,
5,119,0,0,1091,179,1,0,0,0,1092,1094,5,144,0,0,1093,1095,3,182,91,0,1094,
1093,1,0,0,0,1095,1096,1,0,0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,
181,1,0,0,0,1098,1099,5,114,0,0,1099,1100,5,144,0,0,1100,183,1,0,0,0,1101,
1102,5,115,0,0,1102,1103,5,144,0,0,1103,185,1,0,0,0,1104,1105,7,15,0,0,1105,
187,1,0,0,0,1106,1107,7,16,0,0,1107,189,1,0,0,0,1108,1113,3,192,96,0,1109,
1113,3,224,112,0,1110,1113,3,164,82,0,1111,1113,3,196,98,0,1112,1108,1,0,
0,0,1112,1109,1,0,0,0,1112,1110,1,0,0,0,1112,1111,1,0,0,0,1113,191,1,0,0,
0,1114,1118,3,200,100,0,1115,1118,3,204,102,0,1116,1118,3,194,97,0,1117,
1114,1,0,0,0,1117,1115,1,0,0,0,1117,1116,1,0,0,0,1118,193,1,0,0,0,1119,1124,
3,212,106,0,1120,1124,3,216,108,0,1121,1124,3,208,104,0,1122,1124,3,220,
110,0,1123,1119,1,0,0,0,1123,1120,1,0,0,0,1123,1121,1,0,0,0,1123,1122,1,
0,0,0,1124,195,1,0,0,0,1125,1128,3,266,133,0,1126,1128,3,268,134,0,1127,
1125,1,0,0,0,1127,1126,1,0,0,0,1128,1130,1,0,0,0,1129,1131,3,198,99,0,1130,
1129,1,0,0,0,1130,1131,1,0,0,0,1131,197,1,0,0,0,1132,1133,5,115,0,0,1133,
1134,3,266,133,0,1134,199,1,0,0,0,1135,1140,3,246,123,0,1136,1140,3,248,
124,0,1137,1140,3,250,125,0,1138,1140,3,254,127,0,1139,1135,1,0,0,0,1139,
1136,1,0,0,0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,1142,1,0,0,0,1141,
1143,3,202,101,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,201,1,0,0,0,1144,
1145,5,115,0,0,1145,1146,3,246,123,0,1146,203,1,0,0,0,1147,1152,3,256,128,
0,1148,1152,3,258,129,0,1149,1152,3,260,130,0,1150,1152,3,264,132,0,1151,
1147,1,0,0,0,1151,1148,1,0,0,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,
1154,1,0,0,0,1153,1155,3,206,103,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,
205,1,0,0,0,1156,1157,5,115,0,0,1157,1158,3,256,128,0,1158,207,1,0,0,0,1159,
1165,5,126,0,0,1160,1165,3,294,147,0,1161,1165,3,296,148,0,1162,1165,3,298,
149,0,1163,1165,3,302,151,0,1164,1159,1,0,0,0,1164,1160,1,0,0,0,1164,1161,
1,0,0,0,1164,1162,1,0,0,0,1164,1163,1,0,0,0,1165,1167,1,0,0,0,1166,1168,
3,210,105,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,209,1,0,0,0,1169,1170,
5,115,0,0,1170,1171,3,294,147,0,1171,211,1,0,0,0,1172,1178,5,124,0,0,1173,
1178,3,274,137,0,1174,1178,3,276,138,0,1175,1178,3,278,139,0,1176,1178,3,
282,141,0,1177,1172,1,0,0,0,1177,1173,1,0,0,0,1177,1174,1,0,0,0,1177,1175,
1,0,0,0,1177,1176,1,0,0,0,1178,1180,1,0,0,0,1179,1181,3,214,107,0,1180,1179,
1,0,0,0,1180,1181,1,0,0,0,1181,213,1,0,0,0,1182,1183,5,115,0,0,1183,1184,
3,274,137,0,1184,215,1,0,0,0,1185,1191,5,125,0,0,1186,1191,3,284,142,0,1187,
1191,3,286,143,0,1188,1191,3,288,144,0,1189,1191,3,292,146,0,1190,1185,1,
0,0,0,1190,1186,1,0,0,0,1190,1187,1,0,0,0,1190,1188,1,0,0,0,1190,1189,1,
0,0,0,1191,1193,1,0,0,0,1192,1194,3,218,109,0,1193,1192,1,0,0,0,1193,1194,
1,0,0,0,1194,217,1,0,0,0,1195,1196,5,115,0,0,1196,1197,3,284,142,0,1197,
219,1,0,0,0,1198,1204,5,127,0,0,1199,1202,5,81,0,0,1200,1203,3,308,154,0,
1201,1203,3,304,152,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1203,1205,1,0,
0,0,1204,1199,1,0,0,0,1204,1205,1,0,0,0,1205,1211,1,0,0,0,1206,1211,3,304,
152,0,1207,1211,3,306,153,0,1208,1211,3,308,154,0,1209,1211,3,312,156,0,
1210,1198,1,0,0,0,1210,1206,1,0,0,0,1210,1207,1,0,0,0,1210,1208,1,0,0,0,
1210,1209,1,0,0,0,1211,1213,1,0,0,0,1212,1214,3,222,111,0,1213,1212,1,0,
0,0,1213,1214,1,0,0,0,1214,221,1,0,0,0,1215,1216,5,115,0,0,1216,1217,3,304,
152,0,1217,223,1,0,0,0,1218,1222,3,242,121,0,1219,1222,3,244,122,0,1220,
1222,5,148,0,0,1221,1218,1,0,0,0,1221,1219,1,0,0,0,1221,1220,1,0,0,0,1222,
1224,1,0,0,0,1223,1225,3,226,113,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,
225,1,0,0,0,1226,1227,5,115,0,0,1227,1228,3,242,121,0,1228,227,1,0,0,0,1229,
1235,3,230,115,0,1230,1235,3,232,116,0,1231,1235,3,234,117,0,1232,1235,3,
236,118,0,1233,1235,3,240,120,0,1234,1229,1,0,0,0,1234,1230,1,0,0,0,1234,
1231,1,0,0,0,1234,1232,1,0,0,0,1234,1233,1,0,0,0,1235,229,1,0,0,0,1236,1247,
3,242,121,0,1237,1247,3,246,123,0,1238,1247,3,256,128,0,1239,1247,3,266,
133,0,1240,1247,3,270,135,0,1241,1247,3,314,157,0,1242,1247,3,274,137,0,
1243,1247,3,284,142,0,1244,1247,3,294,147,0,1245,1247,3,304,152,0,1246,1236,
1,0,0,0,1246,1237,1,0,0,0,1246,1238,1,0,0,0,1246,1239,1,0,0,0,1246,1240,
1,0,0,0,1246,1241,1,0,0,0,1246,1242,1,0,0,0,1246,1243,1,0,0,0,1246,1244,
1,0,0,0,1246,1245,1,0,0,0,1247,231,1,0,0,0,1248,1249,5,116,0,0,1249,1250,
3,238,119,0,1250,1251,5,117,0,0,1251,233,1,0,0,0,1252,1253,5,118,0,0,1253,
1254,3,238,119,0,1254,1255,5,119,0,0,1255,235,1,0,0,0,1256,1257,5,120,0,
0,1257,1258,3,238,119,0,1258,1259,5,121,0,0,1259,237,1,0,0,0,1260,1271,3,
244,122,0,1261,1271,3,248,124,0,1262,1271,3,258,129,0,1263,1271,3,268,134,
0,1264,1271,3,272,136,0,1265,1271,3,316,158,0,1266,1271,3,276,138,0,1267,
1271,3,286,143,0,1268,1271,3,296,148,0,1269,1271,3,306,153,0,1270,1260,1,
0,0,0,1270,1261,1,0,0,0,1270,1262,1,0,0,0,1270,1263,1,0,0,0,1270,1264,1,
0,0,0,1270,1265,1,0,0,0,1270,1266,1,0,0,0,1270,1267,1,0,0,0,1270,1268,1,
0,0,0,1270,1269,1,0,0,0,1271,239,1,0,0,0,1272,1279,3,250,125,0,1273,1279,
3,260,130,0,1274,1279,3,278,139,0,1275,1279,3,288,144,0,1276,1279,3,298,
149,0,1277,1279,3,308,154,0,1278,1272,1,0,0,0,1278,1273,1,0,0,0,1278,1274,
1,0,0,0,1278,1275,1,0,0,0,1278,1276,1,0,0,0,1278,1277,1,0,0,0,1279,241,1,
0,0,0,1280,1281,5,59,0,0,1281,243,1,0,0,0,1282,1287,3,242,121,0,1283,1284,
5,114,0,0,1284,1286,3,242,121,0,1285,1283,1,0,0,0,1286,1289,1,0,0,0,1287,
1285,1,0,0,0,1287,1288,1,0,0,0,1288,245,1,0,0,0,1289,1287,1,0,0,0,1290,1292,
7,4,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,1294,
7,17,0,0,1294,247,1,0,0,0,1295,1300,3,246,123,0,1296,1297,5,114,0,0,1297,
1299,3,246,123,0,1298,1296,1,0,0,0,1299,1302,1,0,0,0,1300,1298,1,0,0,0,1300,
1301,1,0,0,0,1301,249,1,0,0,0,1302,1300,1,0,0,0,1303,1304,5,82,0,0,1304,
1305,3,252,126,0,1305,1306,5,82,0,0,1306,251,1,0,0,0,1307,1309,5,79,0,0,
1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,1310,1,0,0,0,1310,1311,3,246,123,
0,1311,1313,5,83,0,0,1312,1314,5,80,0,0,1313,1312,1,0,0,0,1313,1314,1,0,
0,0,1314,1315,1,0,0,0,1315,1316,3,246,123,0,1316,1326,1,0,0,0,1317,1319,
3,318,159,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1326,
3,246,123,0,1321,1322,3,246,123,0,1322,1323,5,130,0,0,1323,1324,3,246,123,
0,1324,1326,1,0,0,0,1325,1308,1,0,0,0,1325,1318,1,0,0,0,1325,1321,1,0,0,
0,1326,253,1,0,0,0,1327,1332,3,250,125,0,1328,1329,5,114,0,0,1329,1331,3,
250,125,0,1330,1328,1,0,0,0,1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,
1,0,0,0,1333,255,1,0,0,0,1334,1332,1,0,0,0,1335,1337,7,4,0,0,1336,1335,1,
0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1339,7,18,0,0,1339,257,1,
0,0,0,1340,1345,3,256,128,0,1341,1342,5,114,0,0,1342,1344,3,256,128,0,1343,
1341,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,1346,
259,1,0,0,0,1347,1345,1,0,0,0,1348,1349,5,82,0,0,1349,1350,3,262,131,0,1350,
1351,5,82,0,0,1351,261,1,0,0,0,1352,1354,5,79,0,0,1353,1352,1,0,0,0,1353,
1354,1,0,0,0,1354,1355,1,0,0,0,1355,1356,3,256,128,0,1356,1358,5,83,0,0,
1357,1359,5,80,0,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,
1360,1361,3,256,128,0,1361,1371,1,0,0,0,1362,1364,3,318,159,0,1363,1362,
1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1371,3,256,128,0,1366,1367,
3,256,128,0,1367,1368,5,130,0,0,1368,1369,3,256,128,0,1369,1371,1,0,0,0,
1370,1353,1,0,0,0,1370,1363,1,0,0,0,1370,1366,1,0,0,0,1371,263,1,0,0,0,1372,
1377,3,260,130,0,1373,1374,5,114,0,0,1374,1376,3,260,130,0,1375,1373,1,0,
0,0,1376,1379,1,0,0,0,1377,1375,1,0,0,0,1377,1378,1,0,0,0,1378,265,1,0,0,
0,1379,1377,1,0,0,0,1380,1381,7,19,0,0,1381,267,1,0,0,0,1382,1387,3,266,
133,0,1383,1384,5,114,0,0,1384,1386,3,266,133,0,1385,1383,1,0,0,0,1386,1389,
1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,269,1,0,0,0,1389,1387,1,
0,0,0,1390,1391,5,112,0,0,1391,271,1,0,0,0,1392,1397,3,270,135,0,1393,1394,
5,114,0,0,1394,1396,3,270,135,0,1395,1393,1,0,0,0,1396,1399,1,0,0,0,1397,
1395,1,0,0,0,1397,1398,1,0,0,0,1398,273,1,0,0,0,1399,1397,1,0,0,0,1400,1401,
5,99,0,0,1401,275,1,0,0,0,1402,1407,3,274,137,0,1403,1404,5,114,0,0,1404,
1406,3,274,137,0,1405,1403,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,
1408,1,0,0,0,1408,277,1,0,0,0,1409,1407,1,0,0,0,1410,1411,5,82,0,0,1411,
1412,3,280,140,0,1412,1413,5,82,0,0,1413,279,1,0,0,0,1414,1416,5,79,0,0,
1415,1414,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,1417,1418,3,274,137,
0,1418,1420,5,83,0,0,1419,1421,5,80,0,0,1420,1419,1,0,0,0,1420,1421,1,0,
0,0,1421,1422,1,0,0,0,1422,1423,3,274,137,0,1423,1433,1,0,0,0,1424,1426,
3,318,159,0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,1433,
3,274,137,0,1428,1429,3,274,137,0,1429,1430,5,130,0,0,1430,1431,3,304,152,
0,1431,1433,1,0,0,0,1432,1415,1,0,0,0,1432,1425,1,0,0,0,1432,1428,1,0,0,
0,1433,281,1,0,0,0,1434,1439,3,278,139,0,1435,1436,5,114,0,0,1436,1438,3,
278,139,0,1437,1435,1,0,0,0,1438,1441,1,0,0,0,1439,1437,1,0,0,0,1439,1440,
1,0,0,0,1440,283,1,0,0,0,1441,1439,1,0,0,0,1442,1443,5,100,0,0,1443,285,
1,0,0,0,1444,1449,3,284,142,0,1445,1446,5,114,0,0,1446,1448,3,284,142,0,
1447,1445,1,0,0,0,1448,1451,1,0,0,0,1449,1447,1,0,0,0,1449,1450,1,0,0,0,
1450,287,1,0,0,0,1451,1449,1,0,0,0,1452,1453,5,82,0,0,1453,1454,3,290,145,
0,1454,1455,5,82,0,0,1455,289,1,0,0,0,1456,1458,5,79,0,0,1457,1456,1,0,0,
0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,1460,3,284,142,0,1460,1462,5,
83,0,0,1461,1463,5,80,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1464,
1,0,0,0,1464,1465,3,284,142,0,1465,1475,1,0,0,0,1466,1468,3,318,159,0,1467,
1466,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1475,3,284,142,0,1470,
1471,3,284,142,0,1471,1472,5,130,0,0,1472,1473,3,304,152,0,1473,1475,1,0,
0,0,1474,1457,1,0,0,0,1474,1467,1,0,0,0,1474,1470,1,0,0,0,1475,291,1,0,0,
0,1476,1481,3,288,144,0,1477,1478,5,114,0,0,1478,1480,3,288,144,0,1479,1477,
1,0,0,0,1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,1482,1,0,0,0,1482,293,1,
0,0,0,1483,1481,1,0,0,0,1484,1485,5,101,0,0,1485,295,1,0,0,0,1486,1491,3,
294,147,0,1487,1488,5,114,0,0,1488,1490,3,294,147,0,1489,1487,1,0,0,0,1490,
1493,1,0,0,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,297,1,0,0,0,1493,1491,
1,0,0,0,1494,1495,5,82,0,0,1495,1496,3,300,150,0,1496,1497,5,82,0,0,1497,
299,1,0,0,0,1498,1500,5,79,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,
1501,1,0,0,0,1501,1502,3,294,147,0,1502,1504,5,83,0,0,1503,1505,5,80,0,0,
1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1507,3,294,147,
0,1507,1517,1,0,0,0,1508,1510,3,318,159,0,1509,1508,1,0,0,0,1509,1510,1,
0,0,0,1510,1511,1,0,0,0,1511,1517,3,294,147,0,1512,1513,3,294,147,0,1513,
1514,5,130,0,0,1514,1515,3,304,152,0,1515,1517,1,0,0,0,1516,1499,1,0,0,0,
1516,1509,1,0,0,0,1516,1512,1,0,0,0,1517,301,1,0,0,0,1518,1523,3,298,149,
0,1519,1520,5,114,0,0,1520,1522,3,298,149,0,1521,1519,1,0,0,0,1522,1525,
1,0,0,0,1523,1521,1,0,0,0,1523,1524,1,0,0,0,1524,303,1,0,0,0,1525,1523,1,
0,0,0,1526,1528,7,4,0,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,1,
0,0,0,1529,1530,5,102,0,0,1530,305,1,0,0,0,1531,1536,3,304,152,0,1532,1533,
5,114,0,0,1533,1535,3,304,152,0,1534,1532,1,0,0,0,1535,1538,1,0,0,0,1536,
1534,1,0,0,0,1536,1537,1,0,0,0,1537,307,1,0,0,0,1538,1536,1,0,0,0,1539,1540,
5,82,0,0,1540,1541,3,310,155,0,1541,1542,5,82,0,0,1542,309,1,0,0,0,1543,
1545,5,79,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,
1547,3,304,152,0,1547,1549,5,83,0,0,1548,1550,5,80,0,0,1549,1548,1,0,0,0,
1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1552,3,304,152,0,1552,1562,1,0,
0,0,1553,1555,3,318,159,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,1556,
1,0,0,0,1556,1562,3,304,152,0,1557,1558,3,304,152,0,1558,1559,5,130,0,0,
1559,1560,3,304,152,0,1560,1562,1,0,0,0,1561,1544,1,0,0,0,1561,1554,1,0,
0,0,1561,1557,1,0,0,0,1562,311,1,0,0,0,1563,1568,3,308,154,0,1564,1565,5,
114,0,0,1565,1567,3,308,154,0,1566,1564,1,0,0,0,1567,1570,1,0,0,0,1568,1566,
1,0,0,0,1568,1569,1,0,0,0,1569,313,1,0,0,0,1570,1568,1,0,0,0,1571,1572,7,
20,0,0,1572,315,1,0,0,0,1573,1578,3,314,157,0,1574,1575,5,114,0,0,1575,1577,
3,314,157,0,1576,1574,1,0,0,0,1577,1580,1,0,0,0,1578,1576,1,0,0,0,1578,1579,
1,0,0,0,1579,317,1,0,0,0,1580,1578,1,0,0,0,1581,1582,7,21,0,0,1582,319,1,
0,0,0,1583,1584,5,81,0,0,1584,1586,3,322,161,0,1585,1583,1,0,0,0,1586,1587,
1,0,0,0,1587,1585,1,0,0,0,1587,1588,1,0,0,0,1588,321,1,0,0,0,1589,1594,5,
136,0,0,1590,1591,5,118,0,0,1591,1592,3,324,162,0,1592,1593,5,119,0,0,1593,
1595,1,0,0,0,1594,1590,1,0,0,0,1594,1595,1,0,0,0,1595,323,1,0,0,0,1596,1599,
3,326,163,0,1597,1599,3,328,164,0,1598,1596,1,0,0,0,1598,1597,1,0,0,0,1599,
325,1,0,0,0,1600,1601,5,87,0,0,1601,327,1,0,0,0,1602,1603,7,22,0,0,1603,
329,1,0,0,0,1604,1605,5,136,0,0,1605,1607,3,320,160,0,1606,1608,3,334,167,
0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,331,1,0,0,0,1609,1610,5,136,0,
0,1610,1611,3,334,167,0,1611,333,1,0,0,0,1612,1614,3,336,168,0,1613,1612,
1,0,0,0,1614,1615,1,0,0,0,1615,1613,1,0,0,0,1615,1616,1,0,0,0,1616,335,1,
0,0,0,1617,1618,5,81,0,0,1618,1619,5,136,0,0,1619,337,1,0,0,0,1620,1622,
3,340,170,0,1621,1620,1,0,0,0,1622,1623,1,0,0,0,1623,1621,1,0,0,0,1623,1624,
1,0,0,0,1624,1627,1,0,0,0,1625,1627,3,346,173,0,1626,1621,1,0,0,0,1626,1625,
1,0,0,0,1627,1629,1,0,0,0,1628,1630,5,0,0,1,1629,1628,1,0,0,0,1629,1630,
1,0,0,0,1630,339,1,0,0,0,1631,1632,3,342,171,0,1632,1633,5,62,0,0,1633,1635,
3,344,172,0,1634,1636,5,115,0,0,1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,
341,1,0,0,0,1637,1638,7,0,0,0,1638,343,1,0,0,0,1639,1642,3,346,173,0,1640,
1642,3,354,177,0,1641,1639,1,0,0,0,1641,1640,1,0,0,0,1642,345,1,0,0,0,1643,
1645,3,348,174,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,1646,1,0,0,0,1646,
1659,5,80,0,0,1647,1660,3,228,114,0,1648,1650,3,340,170,0,1649,1648,1,0,
0,0,1650,1651,1,0,0,0,1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,1660,1,0,
0,0,1653,1655,3,350,175,0,1654,1653,1,0,0,0,1655,1656,1,0,0,0,1656,1654,
1,0,0,0,1656,1657,1,0,0,0,1657,1660,1,0,0,0,1658,1660,5,137,0,0,1659,1647,
1,0,0,0,1659,1649,1,0,0,0,1659,1654,1,0,0,0,1659,1658,1,0,0,0,1659,1660,
1,0,0,0,1660,1661,1,0,0,0,1661,1662,5,79,0,0,1662,347,1,0,0,0,1663,1664,
5,116,0,0,1664,1665,3,148,74,0,1665,1666,5,117,0,0,1666,349,1,0,0,0,1667,
1668,3,352,176,0,1668,1669,5,62,0,0,1669,1670,3,344,172,0,1670,351,1,0,0,
0,1671,1672,5,118,0,0,1672,1673,3,230,115,0,1673,1674,5,119,0,0,1674,353,
1,0,0,0,1675,1676,5,80,0,0,1676,1677,3,356,178,0,1677,1678,5,79,0,0,1678,
355,1,0,0,0,1679,1688,3,358,179,0,1680,1681,5,114,0,0,1681,1689,5,129,0,
0,1682,1683,5,114,0,0,1683,1685,3,358,179,0,1684,1682,1,0,0,0,1685,1686,
1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,1688,1680,
1,0,0,0,1688,1684,1,0,0,0,1688,1689,1,0,0,0,1689,357,1,0,0,0,1690,1692,3,
352,176,0,1691,1690,1,0,0,0,1691,1692,1,0,0,0,1692,1694,1,0,0,0,1693,1695,
3,360,180,0,1694,1693,1,0,0,0,1695,1696,1,0,0,0,1696,1694,1,0,0,0,1696,1697,
1,0,0,0,1697,359,1,0,0,0,1698,1699,5,81,0,0,1699,1701,5,136,0,0,1700,1702,
3,352,176,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,361,1,0,0,0,1703,1714,
3,366,183,0,1704,1714,3,368,184,0,1705,1714,3,374,187,0,1706,1714,3,380,
190,0,1707,1714,3,382,191,0,1708,1714,3,316,158,0,1709,1714,3,384,192,0,
1710,1714,3,390,195,0,1711,1714,3,396,198,0,1712,1714,3,402,201,0,1713,1703,
1,0,0,0,1713,1704,1,0,0,0,1713,1705,1,0,0,0,1713,1706,1,0,0,0,1713,1707,
1,0,0,0,1713,1708,1,0,0,0,1713,1709,1,0,0,0,1713,1710,1,0,0,0,1713,1711,
1,0,0,0,1713,1712,1,0,0,0,1714,363,1,0,0,0,1715,1722,3,370,185,0,1716,1722,
3,376,188,0,1717,1722,3,386,193,0,1718,1722,3,392,196,0,1719,1722,3,398,
199,0,1720,1722,3,404,202,0,1721,1715,1,0,0,0,1721,1716,1,0,0,0,1721,1717,
1,0,0,0,1721,1718,1,0,0,0,1721,1719,1,0,0,0,1721,1720,1,0,0,0,1722,365,1,
0,0,0,1723,1732,3,242,121,0,1724,1725,5,114,0,0,1725,1727,3,242,121,0,1726,
1724,1,0,0,0,1727,1728,1,0,0,0,1728,1726,1,0,0,0,1728,1729,1,0,0,0,1729,
1733,1,0,0,0,1730,1731,5,114,0,0,1731,1733,5,129,0,0,1732,1726,1,0,0,0,1732,
1730,1,0,0,0,1733,367,1,0,0,0,1734,1743,3,246,123,0,1735,1736,5,114,0,0,
1736,1738,3,246,123,0,1737,1735,1,0,0,0,1738,1739,1,0,0,0,1739,1737,1,0,
0,0,1739,1740,1,0,0,0,1740,1744,1,0,0,0,1741,1742,5,114,0,0,1742,1744,5,
129,0,0,1743,1737,1,0,0,0,1743,1741,1,0,0,0,1744,369,1,0,0,0,1745,1747,5,
82,0,0,1746,1748,5,79,0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,
1,0,0,0,1749,1750,3,246,123,0,1750,1752,5,83,0,0,1751,1753,5,80,0,0,1752,
1751,1,0,0,0,1752,1753,1,0,0,0,1753,1754,1,0,0,0,1754,1755,3,246,123,0,1755,
1756,5,82,0,0,1756,1771,1,0,0,0,1757,1759,5,82,0,0,1758,1760,3,318,159,0,
1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,3,246,123,
0,1762,1763,5,82,0,0,1763,1771,1,0,0,0,1764,1765,5,82,0,0,1765,1766,3,246,
123,0,1766,1767,5,130,0,0,1767,1768,3,246,123,0,1768,1769,5,82,0,0,1769,
1771,1,0,0,0,1770,1745,1,0,0,0,1770,1757,1,0,0,0,1770,1764,1,0,0,0,1771,
371,1,0,0,0,1772,1781,3,370,185,0,1773,1774,5,114,0,0,1774,1776,3,370,185,
0,1775,1773,1,0,0,0,1776,1777,1,0,0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,
0,1778,1782,1,0,0,0,1779,1780,5,114,0,0,1780,1782,5,129,0,0,1781,1775,1,
0,0,0,1781,1779,1,0,0,0,1782,373,1,0,0,0,1783,1792,3,256,128,0,1784,1785,
5,114,0,0,1785,1787,3,256,128,0,1786,1784,1,0,0,0,1787,1788,1,0,0,0,1788,
1786,1,0,0,0,1788,1789,1,0,0,0,1789,1793,1,0,0,0,1790,1791,5,114,0,0,1791,
1793,5,129,0,0,1792,1786,1,0,0,0,1792,1790,1,0,0,0,1793,375,1,0,0,0,1794,
1796,5,82,0,0,1795,1797,5,79,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,
1798,1,0,0,0,1798,1799,3,256,128,0,1799,1801,5,83,0,0,1800,1802,5,80,0,0,
1801,1800,1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1804,3,256,128,
0,1804,1805,5,82,0,0,1805,1820,1,0,0,0,1806,1808,5,82,0,0,1807,1809,3,318,
159,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,1810,1811,3,
256,128,0,1811,1812,5,82,0,0,1812,1820,1,0,0,0,1813,1814,5,82,0,0,1814,1815,
3,256,128,0,1815,1816,5,130,0,0,1816,1817,3,256,128,0,1817,1818,5,82,0,0,
1818,1820,1,0,0,0,1819,1794,1,0,0,0,1819,1806,1,0,0,0,1819,1813,1,0,0,0,
1820,377,1,0,0,0,1821,1830,3,376,188,0,1822,1823,5,114,0,0,1823,1825,3,376,
188,0,1824,1822,1,0,0,0,1825,1826,1,0,0,0,1826,1824,1,0,0,0,1826,1827,1,
0,0,0,1827,1831,1,0,0,0,1828,1829,5,114,0,0,1829,1831,5,129,0,0,1830,1824,
1,0,0,0,1830,1828,1,0,0,0,1831,379,1,0,0,0,1832,1841,3,266,133,0,1833,1834,
5,114,0,0,1834,1836,3,266,133,0,1835,1833,1,0,0,0,1836,1837,1,0,0,0,1837,
1835,1,0,0,0,1837,1838,1,0,0,0,1838,1842,1,0,0,0,1839,1840,5,114,0,0,1840,
1842,5,129,0,0,1841,1835,1,0,0,0,1841,1839,1,0,0,0,1842,381,1,0,0,0,1843,
1852,3,270,135,0,1844,1845,5,114,0,0,1845,1847,3,270,135,0,1846,1844,1,0,
0,0,1847,1848,1,0,0,0,1848,1846,1,0,0,0,1848,1849,1,0,0,0,1849,1853,1,0,
0,0,1850,1851,5,114,0,0,1851,1853,5,129,0,0,1852,1846,1,0,0,0,1852,1850,
1,0,0,0,1853,383,1,0,0,0,1854,1863,3,274,137,0,1855,1856,5,114,0,0,1856,
1858,3,274,137,0,1857,1855,1,0,0,0,1858,1859,1,0,0,0,1859,1857,1,0,0,0,1859,
1860,1,0,0,0,1860,1864,1,0,0,0,1861,1862,5,114,0,0,1862,1864,5,129,0,0,1863,
1857,1,0,0,0,1863,1861,1,0,0,0,1864,385,1,0,0,0,1865,1867,5,82,0,0,1866,
1868,5,79,0,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1869,1,0,0,0,1869,
1870,3,274,137,0,1870,1872,5,83,0,0,1871,1873,5,80,0,0,1872,1871,1,0,0,0,
1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1875,3,274,137,0,1875,1876,5,82,
0,0,1876,1891,1,0,0,0,1877,1879,5,82,0,0,1878,1880,3,318,159,0,1879,1878,
1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,1882,3,274,137,0,1882,1883,
5,82,0,0,1883,1891,1,0,0,0,1884,1885,5,82,0,0,1885,1886,3,274,137,0,1886,
1887,5,130,0,0,1887,1888,3,304,152,0,1888,1889,5,82,0,0,1889,1891,1,0,0,
0,1890,1865,1,0,0,0,1890,1877,1,0,0,0,1890,1884,1,0,0,0,1891,387,1,0,0,0,
1892,1901,3,386,193,0,1893,1894,5,114,0,0,1894,1896,3,386,193,0,1895,1893,
1,0,0,0,1896,1897,1,0,0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,0,1898,1902,
1,0,0,0,1899,1900,5,114,0,0,1900,1902,5,129,0,0,1901,1895,1,0,0,0,1901,1899,
1,0,0,0,1902,389,1,0,0,0,1903,1912,3,284,142,0,1904,1905,5,114,0,0,1905,
1907,3,284,142,0,1906,1904,1,0,0,0,1907,1908,1,0,0,0,1908,1906,1,0,0,0,1908,
1909,1,0,0,0,1909,1913,1,0,0,0,1910,1911,5,114,0,0,1911,1913,5,129,0,0,1912,
1906,1,0,0,0,1912,1910,1,0,0,0,1913,391,1,0,0,0,1914,1916,5,82,0,0,1915,
1917,5,79,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,
1919,3,284,142,0,1919,1921,5,83,0,0,1920,1922,5,80,0,0,1921,1920,1,0,0,0,
1921,1922,1,0,0,0,1922,1923,1,0,0,0,1923,1924,3,284,142,0,1924,1925,5,82,
0,0,1925,1940,1,0,0,0,1926,1928,5,82,0,0,1927,1929,3,318,159,0,1928,1927,
1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,1931,3,284,142,0,1931,1932,
5,82,0,0,1932,1940,1,0,0,0,1933,1934,5,82,0,0,1934,1935,3,284,142,0,1935,
1936,5,130,0,0,1936,1937,3,304,152,0,1937,1938,5,82,0,0,1938,1940,1,0,0,
0,1939,1914,1,0,0,0,1939,1926,1,0,0,0,1939,1933,1,0,0,0,1940,393,1,0,0,0,
1941,1950,3,392,196,0,1942,1943,5,114,0,0,1943,1945,3,392,196,0,1944,1942,
1,0,0,0,1945,1946,1,0,0,0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,1951,
1,0,0,0,1948,1949,5,114,0,0,1949,1951,5,129,0,0,1950,1944,1,0,0,0,1950,1948,
1,0,0,0,1951,395,1,0,0,0,1952,1961,3,294,147,0,1953,1954,5,114,0,0,1954,
1956,3,294,147,0,1955,1953,1,0,0,0,1956,1957,1,0,0,0,1957,1955,1,0,0,0,1957,
1958,1,0,0,0,1958,1962,1,0,0,0,1959,1960,5,114,0,0,1960,1962,5,129,0,0,1961,
1955,1,0,0,0,1961,1959,1,0,0,0,1962,397,1,0,0,0,1963,1965,5,82,0,0,1964,
1966,5,79,0,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,
1968,3,294,147,0,1968,1970,5,83,0,0,1969,1971,5,80,0,0,1970,1969,1,0,0,0,
1970,1971,1,0,0,0,1971,1972,1,0,0,0,1972,1973,3,294,147,0,1973,1974,5,82,
0,0,1974,1989,1,0,0,0,1975,1977,5,82,0,0,1976,1978,3,318,159,0,1977,1976,
1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,0,0,0,1979,1980,3,294,147,0,1980,1981,
5,82,0,0,1981,1989,1,0,0,0,1982,1983,5,82,0,0,1983,1984,3,294,147,0,1984,
1985,5,130,0,0,1985,1986,3,304,152,0,1986,1987,5,82,0,0,1987,1989,1,0,0,
0,1988,1963,1,0,0,0,1988,1975,1,0,0,0,1988,1982,1,0,0,0,1989,399,1,0,0,0,
1990,1999,3,398,199,0,1991,1992,5,114,0,0,1992,1994,3,398,199,0,1993,1991,
1,0,0,0,1994,1995,1,0,0,0,1995,1993,1,0,0,0,1995,1996,1,0,0,0,1996,2000,
1,0,0,0,1997,1998,5,114,0,0,1998,2000,5,129,0,0,1999,1993,1,0,0,0,1999,1997,
1,0,0,0,2000,401,1,0,0,0,2001,2010,3,304,152,0,2002,2003,5,114,0,0,2003,
2005,3,304,152,0,2004,2002,1,0,0,0,2005,2006,1,0,0,0,2006,2004,1,0,0,0,2006,
2007,1,0,0,0,2007,2011,1,0,0,0,2008,2009,5,114,0,0,2009,2011,5,129,0,0,2010,
2004,1,0,0,0,2010,2008,1,0,0,0,2011,403,1,0,0,0,2012,2014,5,82,0,0,2013,
2015,5,79,0,0,2014,2013,1,0,0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,
2017,3,304,152,0,2017,2019,5,83,0,0,2018,2020,5,80,0,0,2019,2018,1,0,0,0,
2019,2020,1,0,0,0,2020,2021,1,0,0,0,2021,2022,3,304,152,0,2022,2023,5,82,
0,0,2023,2038,1,0,0,0,2024,2026,5,82,0,0,2025,2027,3,318,159,0,2026,2025,
1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2029,3,304,152,0,2029,2030,
5,82,0,0,2030,2038,1,0,0,0,2031,2032,5,82,0,0,2032,2033,3,304,152,0,2033,
2034,5,130,0,0,2034,2035,3,304,152,0,2035,2036,5,82,0,0,2036,2038,1,0,0,
0,2037,2012,1,0,0,0,2037,2024,1,0,0,0,2037,2031,1,0,0,0,2038,405,1,0,0,0,
2039,2048,3,404,202,0,2040,2041,5,114,0,0,2041,2043,3,404,202,0,2042,2040,
1,0,0,0,2043,2044,1,0,0,0,2044,2042,1,0,0,0,2044,2045,1,0,0,0,2045,2049,
1,0,0,0,2046,2047,5,114,0,0,2047,2049,5,129,0,0,2048,2042,1,0,0,0,2048,2046,
1,0,0,0,2049,407,1,0,0,0,246,411,414,417,420,426,429,446,453,460,466,474,
478,482,486,496,506,514,516,521,527,537,545,547,568,572,578,587,592,606,
608,617,623,629,638,645,660,668,670,676,686,694,697,704,708,716,730,737,
752,760,767,772,776,779,786,791,794,802,805,811,815,820,829,839,844,851,
858,864,869,872,875,878,884,890,899,905,918,929,931,944,948,961,966,970,
980,989,994,1001,1005,1012,1017,1020,1027,1031,1036,1042,1049,1058,1068,
1070,1078,1086,1088,1096,1112,1117,1123,1127,1130,1139,1142,1151,1154,1164,
1167,1177,1180,1190,1193,1202,1204,1210,1213,1221,1224,1234,1246,1270,1278,
1287,1291,1300,1308,1313,1318,1325,1332,1336,1345,1353,1358,1363,1370,1377,
1387,1397,1407,1415,1420,1425,1432,1439,1449,1457,1462,1467,1474,1481,1491,
1499,1504,1509,1516,1523,1527,1536,1544,1549,1554,1561,1568,1578,1587,1594,
1598,1607,1615,1623,1626,1629,1635,1641,1644,1651,1656,1659,1686,1688,1691,
1696,1701,1713,1721,1728,1732,1739,1743,1747,1752,1759,1770,1777,1781,1788,
1792,1796,1801,1808,1819,1826,1830,1837,1841,1848,1852,1859,1863,1867,1872,
1879,1890,1897,1901,1908,1912,1916,1921,1928,1939,1946,1950,1957,1961,1965,
1970,1977,1988,1995,1999,2006,2010,2014,2019,2026,2037,2044,2048];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class AqlParser extends antlr4.Parser {

    static grammarFileName = "AqlParser.g4";
    static literalNames = [ null, null, null, null, null, "'SELECT'", null, 
                            "'FROM'", "'WHERE'", "'ORDER'", null, "'DESC'", 
                            "'DESCENDING'", "'ASC'", "'ASCENDING'", "'LIMIT'", 
                            "'OFFSET'", "'DISTINCT'", "'VERSION'", "'LATEST_VERSION'", 
                            "'ALL_VERSIONS'", "'NULL'", "'TOP'", "'FORWARD'", 
                            "'BACKWARD'", "'CONTAINS'", null, null, null, 
                            null, null, "'matches'", "'LENGTH'", "'POSITION'", 
                            "'SUBSTRING'", "'CONCAT'", "'CONCAT_WS'", "'ABS'", 
                            "'MOD'", "'CEIL'", "'FLOOR'", "'ROUND'", null, 
                            null, null, "'NOW'", null, null, null, null, 
                            null, null, "'TERMINOLOGY'", null, null, null, 
                            null, null, null, null, null, null, "'='", "'--'", 
                            "'existence'", "'occurrences'", "'cardinality'", 
                            "'ordered'", "'unordered'", "'unique'", "'use_node'", 
                            "'use_archetype'", "'allow_archetype'", "'include'", 
                            "'exclude'", "'closed'", "'*'", null, null, 
                            "'>'", "'<'", "'/'", "'|'", "'..'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'.'", "','", "';'", "'('", 
                            "')'", "'['", "']'", "'{'", "'}'", null, null, 
                            null, null, null, null, "'::'", "'...'", null, 
                            "'+'", "'-'", "'%'", "'^'" ];
    static symbolicNames = [ null, "WS", "UNICODE_BOM", "CMT_LINE", "EOL", 
                             "SYM_SELECT", "SYM_AS", "SYM_FROM", "SYM_WHERE", 
                             "SYM_ORDER", "SYM_BY", "SYM_DESC", "SYM_DESCENDING", 
                             "SYM_ASC", "SYM_ASCENDING", "SYM_LIMIT", "SYM_OFFSET", 
                             "SYM_DISTINCT", "SYM_VERSION", "SYM_LATEST_VERSION", 
                             "SYM_ALL_VERSIONS", "SYM_NULL", "SYM_TOP", 
                             "SYM_FORWARD", "SYM_BACKWARD", "SYM_CONTAINS", 
                             "SYM_AND", "SYM_OR", "SYM_NOT", "SYM_EXISTS", 
                             "SYM_LIKE", "SYM_MATCHES", "SYM_LENGTH", "SYM_POSITION", 
                             "SYM_SUBSTRING", "SYM_CONCAT", "SYM_CONCAT_WS", 
                             "SYM_ABS", "SYM_MOD", "SYM_CEIL", "SYM_FLOOR", 
                             "SYM_ROUND", "SYM_CURRENT_DATE", "SYM_CURRENT_TIME", 
                             "SYM_CURRENT_DATE_TIME", "SYM_NOW", "SYM_CURRENT_TIMEZONE", 
                             "SYM_COUNT", "SYM_MIN", "SYM_MAX", "SYM_SUM", 
                             "SYM_AVG", "SYM_TERMINOLOGY", "CONTAINED_REGEX", 
                             "AQL_URI", "BOOLEAN", "DATE_STRING", "TIME_STRING", 
                             "DATE_TIME_STRING", "STRING", "QUALIFIED_TERM_CODE", 
                             "SYM_NE", "SYM_EQ", "SYM_DOUBLE_DASH", "SYM_EXISTENCE", 
                             "SYM_OCCURRENCES", "SYM_CARDINALITY", "SYM_ORDERED", 
                             "SYM_UNORDERED", "SYM_UNIQUE", "SYM_USE_NODE", 
                             "SYM_USE_ARCHETYPE", "SYM_ALLOW_ARCHETYPE", 
                             "SYM_INCLUDE", "SYM_EXCLUDE", "SYM_CLOSED", 
                             "SYM_ASTERISK", "SYM_LE", "SYM_GE", "SYM_GT", 
                             "SYM_LT", "SYM_SLASH", "SYM_IVL_DELIM", "SYM_IVL_SEP", 
                             "ODIN14_BLOCK_START", "OBJECT_VERSION_ID", 
                             "ARCHETYPE_HRID", "ARCHETYPE_REF", "VERSION_ID", 
                             "FULLY_QUALIFIED_RM_ENTITY", "QUALIFIED_TERM_CODE_ID", 
                             "LOCAL_TERM_CODE_ID", "QUALIFIED_TERM_CODE_REF", 
                             "ROOT_ID_CODE", "ID_CODE", "AT_CODE", "AC_CODE", 
                             "ADL14_AT_CODE", "ADL14_AC_CODE", "ISO8601_DATE_AUGMENTED", 
                             "ISO8601_TIME_AUGMENTED", "ISO8601_DATE_TIME_AUGMENTED", 
                             "ISO8601_DURATION", "SYM_TRUE", "SYM_FALSE", 
                             "GUID", "UUID", "INTEGER", "REAL", "REAL_PERCENT", 
                             "SCI_INTEGER", "SCI_REAL", "CHARACTER", "SYM_DOT", 
                             "SYM_COMMA", "SYM_SEMI_COLON", "SYM_LPAREN", 
                             "SYM_RPAREN", "SYM_LBRACKET", "SYM_RBRACKET", 
                             "SYM_LCURLY", "SYM_RCURLY", "C_LOCAL_TERM_CODE_START", 
                             "C_EXTERNAL_TERM_CODE_START", "DATE_CONSTRAINT_PATTERN", 
                             "TIME_CONSTRAINT_PATTERN", "DATE_TIME_CONSTRAINT_PATTERN", 
                             "DURATION_CONSTRAINT_PATTERN", "SYM_NAMESPACE_SEP", 
                             "SYM_LIST_CONTINUE", "SYM_PLUS_OR_MINUS", "SYM_PLUS", 
                             "SYM_MINUS", "SYM_PERCENT", "SYM_CARET", "UC_ID", 
                             "LC_ID", "ODIN_URI", "PARAMETER", "ODIN14_BLOCK_LINE", 
                             "WS_ODIN", "CMT_LINE_L", "EOL_L", "WS_L", "C_EXTERNAL_TERM_CODE_STRING", 
                             "CMT_LINE_X", "EOL_X", "WS_X", "DELIMITED_REGEX" ];
    static ruleNames = [ "aqlQuery", "selectClause", "fromClause", "whereClause", 
                         "orderByClause", "limitClause", "resultTable", 
                         "columnSpec", "columnAlias", "columnValue", "orderByExpr", 
                         "modelTypeConstraint", "modelTypeChain", "modelTypeSubChain", 
                         "modelTypeExpr", "modelType", "whereExpr", "whereBooleanLeaf", 
                         "comparisonOperand", "value", "likeOperand", "matchesOperand", 
                         "matchesConstraint", "arithmeticExpr", "arithmeticLeaf", 
                         "arithmeticLiteral", "dataMatchPath", "dataMatchPathSegment", 
                         "dataMatchPathPredicate", "dataMatchPathValuePredicate", 
                         "modelPathComparatorValue", "versionPredicate", 
                         "functionCall", "functionArgs", "aggregateFunctionCall", 
                         "aggregateMathFunction", "terminologyFunctionCall", 
                         "builtInFunction", "stringFunction", "numericFunction", 
                         "dateTimeFunction", "comparisonOperator", "primitiveLiteral", 
                         "numericLiteral", "aqlDateTimeLiteral", "modelSpecificPredicateShortcut", 
                         "top", "cComplexObject", "cComplexObjectDef", "nodeId", 
                         "cAttribute", "cAttributeDef", "cRegularObject", 
                         "cArchetypeRoot", "cComplexObjectProxy", "cRegularPrimitiveObject", 
                         "archetypeSlot", "cIncludes", "cExcludes", "archetypeIdConstraint", 
                         "archetypeIdPath", "cExistence", "existence", "cCardinality", 
                         "cardinality", "cOccurrences", "multiplicity", 
                         "multiplicityMod", "orderingMod", "uniqueMod", 
                         "cOrdinal", "ordinalValue", "ordinalTerm", "domainSpecificExtension", 
                         "rmTypeId", "rmAttributeId", "cObjectMatcher", 
                         "cComplexObjectMatcher", "cComplexObjectMatcherDef", 
                         "cAttributeMatcher", "cAttributeMatcherDef", "cRegularObjectMatcher", 
                         "cTerminologyCode", "terminologyLocalCode", "valueSetCode", 
                         "termCodeDefault", "cLocalTermCode", "localCodesList", 
                         "termCodeItem", "cExternalTermCode", "externalCodesList", 
                         "externalTermCodeItem", "externalTermCodeDefault", 
                         "adl14_at_code", "adl14_ac_code", "cInlinePrimitiveObject", 
                         "cInlineOrderedObject", "cInlineDTemporalObject", 
                         "cBoolean", "assumedBooleanValue", "cInteger", 
                         "assumedIntegerValue", "cReal", "assumedRealValue", 
                         "cDateTime", "assumedDateTimeValue", "cDate", "assumedDateValue", 
                         "cTime", "assumedTimeValue", "cDuration", "assumedDurationValue", 
                         "cString", "assumedStringValue", "primitiveObject", 
                         "primitiveValue", "primitiveList", "primitiveArray", 
                         "primitiveSet", "primitiveValues", "primitiveInterval", 
                         "stringValue", "stringValues", "integerValue", 
                         "integerValues", "integerInterval", "integerIntervalRange", 
                         "integerIntervals", "realValue", "realValues", 
                         "realInterval", "realIntervalRange", "realIntervals", 
                         "booleanValue", "booleanValues", "characterValue", 
                         "characterValues", "dateValue", "dateValues", "dateInterval", 
                         "dateIntervalRange", "dateIntervals", "timeValue", 
                         "timeValues", "timeInterval", "timeIntervalRange", 
                         "timeIntervals", "dateTimeValue", "dateTimeValues", 
                         "dateTimeInterval", "dateTimeIntervalRange", "dateTimeIntervals", 
                         "durationValue", "durationValues", "durationInterval", 
                         "durationIntervalRange", "durationIntervals", "termCodeValue", 
                         "termCodeListValue", "relop", "adlPath", "adlPathSegment", 
                         "adlPathPredicate", "archetypeIdPredicate", "idCode", 
                         "augmentedAdlPath", "modelPath", "modelSubPath", 
                         "modelPathSegment", "odinObject", "odinAttrVal", 
                         "odinAttrName", "odinObjectBlock", "odinObjectValueBlock", 
                         "rmTypeSpec", "odinKeyedObject", "odinKeySpec", 
                         "odinObjectReferenceBlock", "odinPathList", "odinPath", 
                         "odinPathSegment", "primitiveListValue", "primitiveIntervalValue", 
                         "stringListValue", "integerListValue", "integerIntervalValue", 
                         "integerIntervalListValue", "realListValue", "realIntervalValue", 
                         "realIntervalListValue", "booleanListValue", "characterListValue", 
                         "dateListValue", "dateIntervalValue", "dateIntervalListValue", 
                         "timeListValue", "timeIntervalValue", "timeIntervalListValue", 
                         "dateTimeListValue", "dateTimeIntervalValue", "dateTimeIntervalListValue", 
                         "durationListValue", "durationIntervalValue", "durationIntervalListValue" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = AqlParser.ruleNames;
        this.literalNames = AqlParser.literalNames;
        this.symbolicNames = AqlParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 14:
    	    		return this.modelTypeExpr_sempred(localctx, predIndex);
    	case 16:
    	    		return this.whereExpr_sempred(localctx, predIndex);
    	case 23:
    	    		return this.arithmeticExpr_sempred(localctx, predIndex);
    	case 29:
    	    		return this.dataMatchPathValuePredicate_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    modelTypeExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 4);
    		case 1:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    whereExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 4);
    		case 3:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    arithmeticExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 4);
    		case 5:
    			return this.precpred(this._ctx, 3);
    		case 6:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dataMatchPathValuePredicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 3);
    		case 8:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	aqlQuery() {
	    let localctx = new AqlQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, AqlParser.RULE_aqlQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 408;
	        this.selectClause();
	        this.state = 409;
	        this.fromClause();
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 410;
	            this.whereClause();
	        }

	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 413;
	            this.orderByClause();
	        }

	        this.state = 417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===15) {
	            this.state = 416;
	            this.limitClause();
	        }

	        this.state = 420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 419;
	            this.match(AqlParser.SYM_DOUBLE_DASH);
	        }

	        this.state = 422;
	        this.match(AqlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, AqlParser.RULE_selectClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 424;
	        this.match(AqlParser.SYM_SELECT);
	        this.state = 426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 425;
	            this.match(AqlParser.SYM_DISTINCT);
	        }

	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22) {
	            this.state = 428;
	            this.top();
	        }

	        this.state = 431;
	        this.resultTable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, AqlParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 433;
	        this.match(AqlParser.SYM_FROM);
	        this.state = 434;
	        this.modelTypeConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, AqlParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(AqlParser.SYM_WHERE);
	        this.state = 437;
	        this.whereExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, AqlParser.RULE_orderByClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        this.match(AqlParser.SYM_ORDER);
	        this.state = 440;
	        this.match(AqlParser.SYM_BY);
	        this.state = 441;
	        this.orderByExpr();
	        this.state = 446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 442;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 443;
	            this.orderByExpr();
	            this.state = 448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, AqlParser.RULE_limitClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 449;
	        this.match(AqlParser.SYM_LIMIT);
	        this.state = 450;
	        localctx.limit = this.match(AqlParser.INTEGER);
	        this.state = 453;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16) {
	            this.state = 451;
	            this.match(AqlParser.SYM_OFFSET);
	            this.state = 452;
	            localctx.offset = this.match(AqlParser.INTEGER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resultTable() {
	    let localctx = new ResultTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, AqlParser.RULE_resultTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.columnSpec();
	        this.state = 460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 456;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 457;
	            this.columnSpec();
	            this.state = 462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnSpec() {
	    let localctx = new ColumnSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, AqlParser.RULE_columnSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.columnValue();
	        this.state = 466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 464;
	            this.match(AqlParser.SYM_AS);
	            this.state = 465;
	            this.columnAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAlias() {
	    let localctx = new ColumnAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, AqlParser.RULE_columnAlias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        _la = this._input.LA(1);
	        if(!(_la===135 || _la===136)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnValue() {
	    let localctx = new ColumnValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, AqlParser.RULE_columnValue);
	    try {
	        this.state = 474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 470;
	            this.dataMatchPath();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 471;
	            this.aggregateFunctionCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 472;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 473;
	            this.primitiveLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByExpr() {
	    let localctx = new OrderByExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, AqlParser.RULE_orderByExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 476;
	        this.modelPath();
	        this.state = 478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 30720) !== 0)) {
	            this.state = 477;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 30720) !== 0))) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelTypeConstraint() {
	    let localctx = new ModelTypeConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, AqlParser.RULE_modelTypeConstraint);
	    try {
	        this.state = 482;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 480;
	            this.modelType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 481;
	            this.modelTypeChain();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelTypeChain() {
	    let localctx = new ModelTypeChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, AqlParser.RULE_modelTypeChain);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this.modelType();
	        this.state = 486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28) {
	            this.state = 485;
	            this.match(AqlParser.SYM_NOT);
	        }

	        this.state = 488;
	        this.match(AqlParser.SYM_CONTAINS);
	        this.state = 489;
	        this.modelTypeSubChain();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelTypeSubChain() {
	    let localctx = new ModelTypeSubChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, AqlParser.RULE_modelTypeSubChain);
	    try {
	        this.state = 496;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 491;
	            this.modelTypeConstraint();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 492;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 493;
	            this.modelTypeExpr(0);
	            this.state = 494;
	            this.match(AqlParser.SYM_RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	modelTypeExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ModelTypeExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 28;
	    this.enterRecursionRule(localctx, 28, AqlParser.RULE_modelTypeExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.state = 499;
	            this.match(AqlParser.SYM_NOT);
	            this.state = 500;
	            this.modelTypeExpr(5);
	            break;
	        case 135:
	            this.state = 501;
	            this.modelTypeConstraint();
	            break;
	        case 116:
	            this.state = 502;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 503;
	            this.modelTypeExpr(0);
	            this.state = 504;
	            this.match(AqlParser.SYM_RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 516;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 514;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ModelTypeExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_modelTypeExpr);
	                    this.state = 508;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 509;
	                    this.match(AqlParser.SYM_AND);
	                    this.state = 510;
	                    this.modelTypeExpr(5);
	                    break;

	                case 2:
	                    localctx = new ModelTypeExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_modelTypeExpr);
	                    this.state = 511;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 512;
	                    this.match(AqlParser.SYM_OR);
	                    this.state = 513;
	                    this.modelTypeExpr(4);
	                    break;

	                } 
	            }
	            this.state = 518;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	modelType() {
	    let localctx = new ModelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, AqlParser.RULE_modelType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        localctx.typeName = this.match(AqlParser.UC_ID);
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 520;
	            localctx.variableName = this.match(AqlParser.LC_ID);

	        }
	        this.state = 527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 523;
	            this.match(AqlParser.SYM_LBRACKET);
	            this.state = 524;
	            this.archetypeIdPredicate();
	            this.state = 525;
	            this.match(AqlParser.SYM_RBRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	whereExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new WhereExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 32;
	    this.enterRecursionRule(localctx, 32, AqlParser.RULE_whereExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 530;
	            this.match(AqlParser.SYM_NOT);
	            this.state = 531;
	            this.whereExpr(5);
	            break;

	        case 2:
	            this.state = 532;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 533;
	            this.whereExpr(0);
	            this.state = 534;
	            this.match(AqlParser.SYM_RPAREN);
	            break;

	        case 3:
	            this.state = 536;
	            this.whereBooleanLeaf();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 547;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 545;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new WhereExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_whereExpr);
	                    this.state = 539;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 540;
	                    this.match(AqlParser.SYM_AND);
	                    this.state = 541;
	                    this.whereExpr(5);
	                    break;

	                case 2:
	                    localctx = new WhereExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_whereExpr);
	                    this.state = 542;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 543;
	                    this.match(AqlParser.SYM_OR);
	                    this.state = 544;
	                    this.whereExpr(4);
	                    break;

	                } 
	            }
	            this.state = 549;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	whereBooleanLeaf() {
	    let localctx = new WhereBooleanLeafContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, AqlParser.RULE_whereBooleanLeaf);
	    try {
	        this.state = 568;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 550;
	            this.match(AqlParser.SYM_EXISTS);
	            this.state = 551;
	            this.dataMatchPath();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 552;
	            this.comparisonOperand();
	            this.state = 553;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 554;
	            this.matchesOperand();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 556;
	            this.dataMatchPath();
	            this.state = 557;
	            this.match(AqlParser.SYM_LIKE);
	            this.state = 558;
	            this.likeOperand();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 560;
	            this.dataMatchPath();
	            this.state = 561;
	            this.comparisonOperator();
	            this.state = 562;
	            this.comparisonOperand();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 564;
	            this.functionCall();
	            this.state = 565;
	            this.comparisonOperator();
	            this.state = 566;
	            this.comparisonOperand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperand() {
	    let localctx = new ComparisonOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, AqlParser.RULE_comparisonOperand);
	    try {
	        this.state = 572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 570;
	            this.value();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 571;
	            this.arithmeticExpr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, AqlParser.RULE_value);
	    try {
	        this.state = 578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 574;
	            this.dataMatchPath();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 575;
	            this.primitiveLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 576;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 577;
	            this.match(AqlParser.PARAMETER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeOperand() {
	    let localctx = new LikeOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, AqlParser.RULE_likeOperand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 580;
	        _la = this._input.LA(1);
	        if(!(_la===59 || _la===138)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchesOperand() {
	    let localctx = new MatchesOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, AqlParser.RULE_matchesOperand);
	    try {
	        this.state = 587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 120:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 582;
	            this.match(AqlParser.SYM_LCURLY);
	            this.state = 583;
	            this.matchesConstraint();
	            this.state = 584;
	            this.match(AqlParser.SYM_RCURLY);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 586;
	            this.terminologyFunctionCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchesConstraint() {
	    let localctx = new MatchesConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, AqlParser.RULE_matchesConstraint);
	    try {
	        this.state = 592;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	        case 82:
	        case 84:
	        case 92:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 118:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 135:
	        case 148:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 589;
	            this.cObjectMatcher();
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 590;
	            this.match(AqlParser.AQL_URI);
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 591;
	            this.match(AqlParser.PARAMETER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	arithmeticExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ArithmeticExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 46;
	    this.enterRecursionRule(localctx, 46, AqlParser.RULE_arithmeticExpr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 595;
	        this.arithmeticLeaf();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 608;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 606;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_arithmeticExpr);
	                    this.state = 597;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 598;
	                    this.match(AqlParser.SYM_CARET);
	                    this.state = 599;
	                    this.arithmeticExpr(4);
	                    break;

	                case 2:
	                    localctx = new ArithmeticExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_arithmeticExpr);
	                    this.state = 600;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 601;
	                    _la = this._input.LA(1);
	                    if(!(_la===76 || _la===81 || _la===133)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 602;
	                    this.arithmeticExpr(4);
	                    break;

	                case 3:
	                    localctx = new ArithmeticExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_arithmeticExpr);
	                    this.state = 603;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 604;
	                    _la = this._input.LA(1);
	                    if(!(_la===131 || _la===132)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 605;
	                    this.arithmeticExpr(3);
	                    break;

	                } 
	            }
	            this.state = 610;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	arithmeticLeaf() {
	    let localctx = new ArithmeticLeafContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, AqlParser.RULE_arithmeticLeaf);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.arithmeticLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.value();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 613;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 614;
	            this.arithmeticExpr(0);
	            this.state = 615;
	            this.match(AqlParser.SYM_RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmeticLiteral() {
	    let localctx = new ArithmeticLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, AqlParser.RULE_arithmeticLiteral);
	    try {
	        this.state = 623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 619;
	            this.integerValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 620;
	            this.realValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 621;
	            this.aqlDateTimeLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 622;
	            this.durationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataMatchPath() {
	    let localctx = new DataMatchPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, AqlParser.RULE_dataMatchPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        localctx.variableName = this.match(AqlParser.LC_ID);
	        this.state = 629;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 626;
	                this.dataMatchPathSegment(); 
	            }
	            this.state = 631;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataMatchPathSegment() {
	    let localctx = new DataMatchPathSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, AqlParser.RULE_dataMatchPathSegment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(AqlParser.SYM_SLASH);
	        this.state = 633;
	        localctx.attributeId = this.match(AqlParser.LC_ID);
	        this.state = 638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 634;
	            this.match(AqlParser.SYM_LBRACKET);
	            this.state = 635;
	            this.dataMatchPathPredicate();
	            this.state = 636;
	            this.match(AqlParser.SYM_RBRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataMatchPathPredicate() {
	    let localctx = new DataMatchPathPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, AqlParser.RULE_dataMatchPathPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.adlPathPredicate();
	        this.state = 645;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 26:
	        	this.state = 641;
	        	this.match(AqlParser.SYM_AND);
	        	this.state = 642;
	        	this.dataMatchPathValuePredicate(0);
	        	break;
	        case 114:
	        	this.state = 643;
	        	this.match(AqlParser.SYM_COMMA);
	        	this.state = 644;
	        	this.modelSpecificPredicateShortcut();
	        	break;
	        case 119:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	dataMatchPathValuePredicate(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DataMatchPathValuePredicateContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 58;
	    this.enterRecursionRule(localctx, 58, AqlParser.RULE_dataMatchPathValuePredicate, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 648;
	            this.modelPath();
	            this.state = 649;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 650;
	            this.match(AqlParser.CONTAINED_REGEX);
	            break;

	        case 2:
	            this.state = 652;
	            this.modelPath();
	            this.state = 653;
	            this.comparisonOperator();
	            this.state = 654;
	            this.modelPathComparatorValue();
	            break;

	        case 3:
	            this.state = 656;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 657;
	            this.dataMatchPathValuePredicate(0);
	            this.state = 658;
	            this.match(AqlParser.SYM_RPAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 670;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 668;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DataMatchPathValuePredicateContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_dataMatchPathValuePredicate);
	                    this.state = 662;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 663;
	                    this.match(AqlParser.SYM_AND);
	                    this.state = 664;
	                    this.dataMatchPathValuePredicate(4);
	                    break;

	                case 2:
	                    localctx = new DataMatchPathValuePredicateContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, AqlParser.RULE_dataMatchPathValuePredicate);
	                    this.state = 665;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 666;
	                    this.match(AqlParser.SYM_OR);
	                    this.state = 667;
	                    this.dataMatchPathValuePredicate(3);
	                    break;

	                } 
	            }
	            this.state = 672;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	modelPathComparatorValue() {
	    let localctx = new ModelPathComparatorValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, AqlParser.RULE_modelPathComparatorValue);
	    try {
	        this.state = 676;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 673;
	            this.primitiveLiteral();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 674;
	            this.modelPath();
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 675;
	            this.match(AqlParser.PARAMETER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionPredicate() {
	    let localctx = new VersionPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, AqlParser.RULE_versionPredicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        _la = this._input.LA(1);
	        if(!(_la===19 || _la===20)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, AqlParser.RULE_functionCall);
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 52:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 680;
	            this.terminologyFunctionCall();
	            break;
	        case 25:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 681;
	            this.builtInFunction();
	            this.state = 682;
	            this.functionArgs();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 684;
	            this.match(AqlParser.LC_ID);
	            this.state = 685;
	            this.functionArgs();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgs() {
	    let localctx = new FunctionArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, AqlParser.RULE_functionArgs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(AqlParser.SYM_LPAREN);
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21 || _la===25 || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 261128191) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 2717909019) !== 0)) {
	            this.state = 689;
	            this.value();
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===114) {
	                this.state = 690;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 691;
	                this.value();
	                this.state = 696;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 699;
	        this.match(AqlParser.SYM_RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunctionCall() {
	    let localctx = new AggregateFunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, AqlParser.RULE_aggregateFunctionCall);
	    var _la = 0;
	    try {
	        this.state = 716;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 47:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 701;
	            localctx.name = this.match(AqlParser.SYM_COUNT);
	            this.state = 702;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 708;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 17:
	            case 136:
	                this.state = 704;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===17) {
	                    this.state = 703;
	                    this.match(AqlParser.SYM_DISTINCT);
	                }

	                this.state = 706;
	                this.augmentedAdlPath();
	                break;
	            case 76:
	                this.state = 707;
	                this.match(AqlParser.SYM_ASTERISK);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 710;
	            this.match(AqlParser.SYM_RPAREN);
	            break;
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 711;
	            this.aggregateMathFunction();
	            this.state = 712;
	            this.match(AqlParser.SYM_LPAREN);
	            this.state = 713;
	            this.augmentedAdlPath();
	            this.state = 714;
	            this.match(AqlParser.SYM_RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateMathFunction() {
	    let localctx = new AggregateMathFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, AqlParser.RULE_aggregateMathFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 718;
	        _la = this._input.LA(1);
	        if(!(((((_la - 48)) & ~0x1f) === 0 && ((1 << (_la - 48)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	terminologyFunctionCall() {
	    let localctx = new TerminologyFunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, AqlParser.RULE_terminologyFunctionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 720;
	        this.match(AqlParser.SYM_TERMINOLOGY);
	        this.state = 721;
	        this.match(AqlParser.SYM_LPAREN);
	        this.state = 722;
	        localctx.operation = this.match(AqlParser.STRING);
	        this.state = 723;
	        this.match(AqlParser.SYM_COMMA);
	        this.state = 724;
	        localctx.source = this.match(AqlParser.STRING);
	        this.state = 725;
	        this.match(AqlParser.SYM_COMMA);
	        this.state = 730;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	            this.state = 726;
	            this.stringFunction();
	            this.state = 727;
	            this.functionArgs();
	            break;
	        case 59:
	            this.state = 729;
	            this.match(AqlParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 732;
	        this.match(AqlParser.SYM_RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInFunction() {
	    let localctx = new BuiltInFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, AqlParser.RULE_builtInFunction);
	    try {
	        this.state = 737;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 734;
	            this.stringFunction();
	            break;
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 735;
	            this.numericFunction();
	            break;
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 736;
	            this.dateTimeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringFunction() {
	    let localctx = new StringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, AqlParser.RULE_stringFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 3969) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericFunction() {
	    let localctx = new NumericFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, AqlParser.RULE_numericFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        _la = this._input.LA(1);
	        if(!(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeFunction() {
	    let localctx = new DateTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, AqlParser.RULE_dateTimeFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        _la = this._input.LA(1);
	        if(!(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 31) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, AqlParser.RULE_comparisonOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        _la = this._input.LA(1);
	        if(!(((((_la - 61)) & ~0x1f) === 0 && ((1 << (_la - 61)) & 983043) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveLiteral() {
	    let localctx = new PrimitiveLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, AqlParser.RULE_primitiveLiteral);
	    try {
	        this.state = 752;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 747;
	            this.match(AqlParser.STRING);
	            break;
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 748;
	            this.numericLiteral();
	            break;
	        case 56:
	        case 57:
	        case 58:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 749;
	            this.aqlDateTimeLiteral();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 750;
	            this.match(AqlParser.BOOLEAN);
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 751;
	            this.match(AqlParser.SYM_NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, AqlParser.RULE_numericLiteral);
	    try {
	        this.state = 760;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 754;
	            this.match(AqlParser.INTEGER);
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 755;
	            this.match(AqlParser.REAL);
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 756;
	            this.match(AqlParser.SCI_INTEGER);
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 757;
	            this.match(AqlParser.SCI_REAL);
	            break;
	        case 132:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 758;
	            this.match(AqlParser.SYM_MINUS);
	            this.state = 759;
	            this.numericLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aqlDateTimeLiteral() {
	    let localctx = new AqlDateTimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, AqlParser.RULE_aqlDateTimeLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        _la = this._input.LA(1);
	        if(!(((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelSpecificPredicateShortcut() {
	    let localctx = new ModelSpecificPredicateShortcutContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, AqlParser.RULE_modelSpecificPredicateShortcut);
	    try {
	        this.state = 767;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 764;
	            this.match(AqlParser.STRING);
	            break;
	        case 94:
	        case 95:
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 765;
	            this.idCode();
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 766;
	            this.match(AqlParser.QUALIFIED_TERM_CODE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	top() {
	    let localctx = new TopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, AqlParser.RULE_top);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        this.match(AqlParser.SYM_TOP);
	        this.state = 770;
	        this.match(AqlParser.INTEGER);
	        this.state = 772;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23 || _la===24) {
	            this.state = 771;
	            localctx.direction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===23 || _la===24)) {
	                localctx.direction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cComplexObject() {
	    let localctx = new CComplexObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, AqlParser.RULE_cComplexObject);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        this.rmTypeId();
	        this.state = 776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 775;
	            this.nodeId();
	        }

	        this.state = 779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 778;
	            this.cOccurrences();
	        }

	        this.state = 786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 781;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 782;
	            this.match(AqlParser.SYM_LCURLY);
	            this.state = 783;
	            this.cComplexObjectDef();
	            this.state = 784;
	            this.match(AqlParser.SYM_RCURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cComplexObjectDef() {
	    let localctx = new CComplexObjectDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, AqlParser.RULE_cComplexObjectDef);
	    var _la = 0;
	    try {
	        this.state = 794;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 789; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 788;
	                this.cAttribute();
	                this.state = 791; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===136);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 793;
	            this.match(AqlParser.SYM_ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeId() {
	    let localctx = new NodeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, AqlParser.RULE_nodeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.match(AqlParser.SYM_LBRACKET);
	        this.state = 797;
	        this.adl14_at_code();
	        this.state = 798;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cAttribute() {
	    let localctx = new CAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, AqlParser.RULE_cAttribute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.rmAttributeId();
	        this.state = 802;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 801;
	            this.cExistence();
	        }

	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 804;
	            this.cCardinality();
	        }

	        this.state = 815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 807;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 808;
	            this.match(AqlParser.SYM_LCURLY);
	            this.state = 811;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 809;
	                this.cAttributeDef();
	                break;

	            case 2:
	                this.state = 810;
	                this.cInlinePrimitiveObject();
	                break;

	            }
	            this.state = 813;
	            this.match(AqlParser.SYM_RCURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cAttributeDef() {
	    let localctx = new CAttributeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, AqlParser.RULE_cAttributeDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 817;
	            this.cRegularObject();
	            this.state = 820; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 16391) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 318767135) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cRegularObject() {
	    let localctx = new CRegularObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, AqlParser.RULE_cRegularObject);
	    try {
	        this.state = 829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 822;
	            this.cComplexObject();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 823;
	            this.cArchetypeRoot();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 824;
	            this.cComplexObjectProxy();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 825;
	            this.archetypeSlot();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 826;
	            this.cRegularPrimitiveObject();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 827;
	            this.cOrdinal();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 828;
	            this.domainSpecificExtension();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cArchetypeRoot() {
	    let localctx = new CArchetypeRootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, AqlParser.RULE_cArchetypeRoot);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(AqlParser.SYM_USE_ARCHETYPE);
	        this.state = 832;
	        this.rmTypeId();
	        this.state = 833;
	        this.match(AqlParser.SYM_LBRACKET);
	        this.state = 834;
	        this.adl14_at_code();
	        this.state = 835;
	        this.match(AqlParser.SYM_COMMA);
	        this.state = 836;
	        this.match(AqlParser.ARCHETYPE_REF);
	        this.state = 837;
	        this.match(AqlParser.SYM_RBRACKET);
	        this.state = 839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 838;
	            this.cOccurrences();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cComplexObjectProxy() {
	    let localctx = new CComplexObjectProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, AqlParser.RULE_cComplexObjectProxy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.match(AqlParser.SYM_USE_NODE);
	        this.state = 842;
	        this.rmTypeId();
	        this.state = 844;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 843;
	            this.cOccurrences();
	        }

	        this.state = 846;
	        this.adlPath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cRegularPrimitiveObject() {
	    let localctx = new CRegularPrimitiveObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, AqlParser.RULE_cRegularPrimitiveObject);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.rmTypeId();
	        this.state = 849;
	        this.nodeId();
	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 850;
	            this.cOccurrences();
	        }

	        this.state = 858;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 853;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 854;
	            this.match(AqlParser.SYM_LCURLY);
	            this.state = 855;
	            this.cInlinePrimitiveObject();
	            this.state = 856;
	            this.match(AqlParser.SYM_RCURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	archetypeSlot() {
	    let localctx = new ArchetypeSlotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, AqlParser.RULE_archetypeSlot);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.match(AqlParser.SYM_ALLOW_ARCHETYPE);
	        this.state = 861;
	        this.rmTypeId();
	        this.state = 862;
	        this.nodeId();
	        this.state = 878;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	        case 65:
	        case 70:
	        case 71:
	        case 72:
	        case 84:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 121:
	        case 131:
	        case 132:
	        case 135:
	            this.state = 864;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 863;
	                this.cOccurrences();
	            }

	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31) {
	                this.state = 866;
	                this.match(AqlParser.SYM_MATCHES);
	                this.state = 867;
	                this.match(AqlParser.SYM_LCURLY);
	                this.state = 869;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===73) {
	                    this.state = 868;
	                    this.cIncludes();
	                }

	                this.state = 872;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===74) {
	                    this.state = 871;
	                    this.cExcludes();
	                }

	                this.state = 874;
	                this.match(AqlParser.SYM_RCURLY);
	            }

	            break;
	        case 75:
	            this.state = 877;
	            this.match(AqlParser.SYM_CLOSED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cIncludes() {
	    let localctx = new CIncludesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, AqlParser.RULE_cIncludes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 880;
	        this.match(AqlParser.SYM_INCLUDE);
	        this.state = 882; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 881;
	            this.archetypeIdConstraint();
	            this.state = 884; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===81 || _la===136);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cExcludes() {
	    let localctx = new CExcludesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, AqlParser.RULE_cExcludes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.match(AqlParser.SYM_EXCLUDE);
	        this.state = 888; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 887;
	            this.archetypeIdConstraint();
	            this.state = 890; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===81 || _la===136);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	archetypeIdConstraint() {
	    let localctx = new ArchetypeIdConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, AqlParser.RULE_archetypeIdConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 892;
	        this.archetypeIdPath();
	        this.state = 893;
	        this.match(AqlParser.SYM_MATCHES);
	        this.state = 894;
	        this.match(AqlParser.SYM_LCURLY);
	        this.state = 895;
	        this.match(AqlParser.DELIMITED_REGEX);
	        this.state = 896;
	        this.match(AqlParser.SYM_RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	archetypeIdPath() {
	    let localctx = new ArchetypeIdPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, AqlParser.RULE_archetypeIdPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===81) {
	            this.state = 898;
	            this.match(AqlParser.SYM_SLASH);
	        }

	        this.state = 901;
	        this.match(AqlParser.LC_ID);
	        this.state = 905;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===81) {
	            this.state = 902;
	            this.adlPath();
	            this.state = 907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cExistence() {
	    let localctx = new CExistenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, AqlParser.RULE_cExistence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(AqlParser.SYM_EXISTENCE);
	        this.state = 909;
	        this.match(AqlParser.SYM_MATCHES);
	        this.state = 910;
	        this.match(AqlParser.SYM_LCURLY);
	        this.state = 911;
	        this.existence();
	        this.state = 912;
	        this.match(AqlParser.SYM_RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existence() {
	    let localctx = new ExistenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, AqlParser.RULE_existence);
	    try {
	        this.state = 918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 914;
	            this.match(AqlParser.INTEGER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 915;
	            this.match(AqlParser.INTEGER);
	            this.state = 916;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 917;
	            this.match(AqlParser.INTEGER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cCardinality() {
	    let localctx = new CCardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, AqlParser.RULE_cCardinality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(AqlParser.SYM_CARDINALITY);
	        this.state = 921;
	        this.match(AqlParser.SYM_MATCHES);
	        this.state = 922;
	        this.match(AqlParser.SYM_LCURLY);
	        this.state = 923;
	        this.cardinality();
	        this.state = 924;
	        this.match(AqlParser.SYM_RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinality() {
	    let localctx = new CardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, AqlParser.RULE_cardinality);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.multiplicity();
	        this.state = 931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 927;
	            this.multiplicityMod();
	            this.state = 929;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===115) {
	                this.state = 928;
	                this.multiplicityMod();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cOccurrences() {
	    let localctx = new COccurrencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, AqlParser.RULE_cOccurrences);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.match(AqlParser.SYM_OCCURRENCES);
	        this.state = 934;
	        this.match(AqlParser.SYM_MATCHES);
	        this.state = 935;
	        this.match(AqlParser.SYM_LCURLY);
	        this.state = 936;
	        this.multiplicity();
	        this.state = 937;
	        this.match(AqlParser.SYM_RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicity() {
	    let localctx = new MultiplicityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, AqlParser.RULE_multiplicity);
	    var _la = 0;
	    try {
	        this.state = 944;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 939;
	            this.match(AqlParser.INTEGER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 940;
	            this.match(AqlParser.SYM_ASTERISK);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 941;
	            this.match(AqlParser.INTEGER);
	            this.state = 942;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 943;
	            _la = this._input.LA(1);
	            if(!(_la===76 || _la===107)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicityMod() {
	    let localctx = new MultiplicityModContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, AqlParser.RULE_multiplicityMod);
	    try {
	        this.state = 948;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 946;
	            this.orderingMod();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 947;
	            this.uniqueMod();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderingMod() {
	    let localctx = new OrderingModContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, AqlParser.RULE_orderingMod);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 951;
	        _la = this._input.LA(1);
	        if(!(_la===67 || _la===68)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueMod() {
	    let localctx = new UniqueModContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, AqlParser.RULE_uniqueMod);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 953;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 954;
	        this.match(AqlParser.SYM_UNIQUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cOrdinal() {
	    let localctx = new COrdinalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, AqlParser.RULE_cOrdinal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.ordinalTerm();
	        this.state = 961;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 957;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 958;
	            this.ordinalTerm();
	            this.state = 963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 964;
	            this.match(AqlParser.SYM_SEMI_COLON);
	            this.state = 965;
	            this.ordinalValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinalValue() {
	    let localctx = new OrdinalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, AqlParser.RULE_ordinalValue);
	    try {
	        this.state = 970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 968;
	            this.integerValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 969;
	            this.realValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinalTerm() {
	    let localctx = new OrdinalTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, AqlParser.RULE_ordinalTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.ordinalValue();
	        this.state = 973;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 974;
	        this.cTerminologyCode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainSpecificExtension() {
	    let localctx = new DomainSpecificExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, AqlParser.RULE_domainSpecificExtension);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 976;
	        this.match(AqlParser.ODIN14_BLOCK_START);
	        this.state = 978; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 977;
	            this.match(AqlParser.ODIN14_BLOCK_LINE);
	            this.state = 980; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===139);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rmTypeId() {
	    let localctx = new RmTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, AqlParser.RULE_rmTypeId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.match(AqlParser.UC_ID);
	        this.state = 994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80) {
	            this.state = 983;
	            this.match(AqlParser.SYM_LT);
	            this.state = 984;
	            this.rmTypeId();
	            this.state = 989;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===114) {
	                this.state = 985;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 986;
	                this.rmTypeId();
	                this.state = 991;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 992;
	            this.match(AqlParser.SYM_GT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rmAttributeId() {
	    let localctx = new RmAttributeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, AqlParser.RULE_rmAttributeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 996;
	        this.match(AqlParser.LC_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cObjectMatcher() {
	    let localctx = new CObjectMatcherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, AqlParser.RULE_cObjectMatcher);
	    try {
	        this.state = 1001;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 998;
	            this.cComplexObjectMatcher();
	            break;
	        case 59:
	        case 82:
	        case 92:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 118:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 999;
	            this.cInlinePrimitiveObject();
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1000;
	            this.domainSpecificExtension();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cComplexObjectMatcher() {
	    let localctx = new CComplexObjectMatcherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, AqlParser.RULE_cComplexObjectMatcher);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1003;
	        this.rmTypeId();
	        this.state = 1005;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1004;
	            this.nodeId();
	        }

	        this.state = 1012;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 1007;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 1008;
	            this.match(AqlParser.SYM_LCURLY);
	            this.state = 1009;
	            this.cComplexObjectMatcherDef();
	            this.state = 1010;
	            this.match(AqlParser.SYM_RCURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cComplexObjectMatcherDef() {
	    let localctx = new CComplexObjectMatcherDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, AqlParser.RULE_cComplexObjectMatcherDef);
	    var _la = 0;
	    try {
	        this.state = 1020;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1015; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1014;
	                this.cAttributeMatcher();
	                this.state = 1017; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===136);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1019;
	            this.match(AqlParser.SYM_ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cAttributeMatcher() {
	    let localctx = new CAttributeMatcherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, AqlParser.RULE_cAttributeMatcher);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1022;
	        this.rmAttributeId();
	        this.state = 1031;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 1023;
	            this.match(AqlParser.SYM_MATCHES);
	            this.state = 1024;
	            this.match(AqlParser.SYM_LCURLY);
	            this.state = 1027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1025;
	                this.cAttributeMatcherDef();
	                break;

	            case 2:
	                this.state = 1026;
	                this.cInlinePrimitiveObject();
	                break;

	            }
	            this.state = 1029;
	            this.match(AqlParser.SYM_RCURLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cAttributeMatcherDef() {
	    let localctx = new CAttributeMatcherDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, AqlParser.RULE_cAttributeMatcherDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1034; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1033;
	            this.cRegularObjectMatcher();
	            this.state = 1036; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 84)) & ~0x1f) === 0 && ((1 << (_la - 84)) & 260046849) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 19) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cRegularObjectMatcher() {
	    let localctx = new CRegularObjectMatcherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, AqlParser.RULE_cRegularObjectMatcher);
	    try {
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1038;
	            this.cComplexObjectMatcher();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1039;
	            this.cRegularPrimitiveObject();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1040;
	            this.cOrdinal();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1041;
	            this.domainSpecificExtension();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cTerminologyCode() {
	    let localctx = new CTerminologyCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, AqlParser.RULE_cTerminologyCode);
	    try {
	        this.state = 1049;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1044;
	            this.terminologyLocalCode();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1045;
	            this.valueSetCode();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1046;
	            this.cLocalTermCode();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1047;
	            this.cExternalTermCode();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1048;
	            this.match(AqlParser.QUALIFIED_TERM_CODE_REF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	terminologyLocalCode() {
	    let localctx = new TerminologyLocalCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, AqlParser.RULE_terminologyLocalCode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1051;
	        this.match(AqlParser.SYM_LBRACKET);
	        this.state = 1052;
	        this.adl14_at_code();
	        this.state = 1053;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueSetCode() {
	    let localctx = new ValueSetCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, AqlParser.RULE_valueSetCode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1055;
	        this.match(AqlParser.SYM_LBRACKET);
	        this.state = 1056;
	        this.adl14_ac_code();
	        this.state = 1058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1057;
	            this.termCodeDefault();
	        }

	        this.state = 1060;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termCodeDefault() {
	    let localctx = new TermCodeDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, AqlParser.RULE_termCodeDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1062;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1063;
	        this.adl14_at_code();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cLocalTermCode() {
	    let localctx = new CLocalTermCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, AqlParser.RULE_cLocalTermCode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1065;
	        this.match(AqlParser.C_LOCAL_TERM_CODE_START);
	        this.state = 1070;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===95 || _la===97) {
	            this.state = 1066;
	            this.localCodesList();
	            this.state = 1068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===115) {
	                this.state = 1067;
	                this.termCodeDefault();
	            }

	        }

	        this.state = 1072;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localCodesList() {
	    let localctx = new LocalCodesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, AqlParser.RULE_localCodesList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1074;
	        this.adl14_at_code();
	        this.state = 1076; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1075;
	            this.termCodeItem();
	            this.state = 1078; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===114);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termCodeItem() {
	    let localctx = new TermCodeItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, AqlParser.RULE_termCodeItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1080;
	        this.match(AqlParser.SYM_COMMA);
	        this.state = 1081;
	        this.adl14_at_code();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cExternalTermCode() {
	    let localctx = new CExternalTermCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, AqlParser.RULE_cExternalTermCode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1083;
	        this.match(AqlParser.C_EXTERNAL_TERM_CODE_START);
	        this.state = 1088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===144) {
	            this.state = 1084;
	            this.externalCodesList();
	            this.state = 1086;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===115) {
	                this.state = 1085;
	                this.externalTermCodeDefault();
	            }

	        }

	        this.state = 1090;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalCodesList() {
	    let localctx = new ExternalCodesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, AqlParser.RULE_externalCodesList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1092;
	        this.match(AqlParser.C_EXTERNAL_TERM_CODE_STRING);
	        this.state = 1094; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1093;
	            this.externalTermCodeItem();
	            this.state = 1096; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===114);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalTermCodeItem() {
	    let localctx = new ExternalTermCodeItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, AqlParser.RULE_externalTermCodeItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1098;
	        this.match(AqlParser.SYM_COMMA);
	        this.state = 1099;
	        this.match(AqlParser.C_EXTERNAL_TERM_CODE_STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalTermCodeDefault() {
	    let localctx = new ExternalTermCodeDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, AqlParser.RULE_externalTermCodeDefault);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1101;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1102;
	        this.match(AqlParser.C_EXTERNAL_TERM_CODE_STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adl14_at_code() {
	    let localctx = new Adl14_at_codeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, AqlParser.RULE_adl14_at_code);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1104;
	        _la = this._input.LA(1);
	        if(!(_la===95 || _la===97)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adl14_ac_code() {
	    let localctx = new Adl14_ac_codeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, AqlParser.RULE_adl14_ac_code);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1106;
	        _la = this._input.LA(1);
	        if(!(_la===96 || _la===98)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cInlinePrimitiveObject() {
	    let localctx = new CInlinePrimitiveObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, AqlParser.RULE_cInlinePrimitiveObject);
	    try {
	        this.state = 1112;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 82:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1108;
	            this.cInlineOrderedObject();
	            break;
	        case 59:
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1109;
	            this.cString();
	            break;
	        case 92:
	        case 118:
	        case 122:
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1110;
	            this.cTerminologyCode();
	            break;
	        case 103:
	        case 104:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1111;
	            this.cBoolean();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cInlineOrderedObject() {
	    let localctx = new CInlineOrderedObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, AqlParser.RULE_cInlineOrderedObject);
	    try {
	        this.state = 1117;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1114;
	            this.cInteger();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1115;
	            this.cReal();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1116;
	            this.cInlineDTemporalObject();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cInlineDTemporalObject() {
	    let localctx = new CInlineDTemporalObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, AqlParser.RULE_cInlineDTemporalObject);
	    try {
	        this.state = 1123;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1119;
	            this.cDate();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1120;
	            this.cTime();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1121;
	            this.cDateTime();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1122;
	            this.cDuration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cBoolean() {
	    let localctx = new CBooleanContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, AqlParser.RULE_cBoolean);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1127;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1125;
	            this.booleanValue();
	            break;

	        case 2:
	            this.state = 1126;
	            this.booleanValues();
	            break;

	        }
	        this.state = 1130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1129;
	            this.assumedBooleanValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedBooleanValue() {
	    let localctx = new AssumedBooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, AqlParser.RULE_assumedBooleanValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1132;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1133;
	        this.booleanValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cInteger() {
	    let localctx = new CIntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, AqlParser.RULE_cInteger);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1139;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1135;
	            this.integerValue();
	            break;

	        case 2:
	            this.state = 1136;
	            this.integerValues();
	            break;

	        case 3:
	            this.state = 1137;
	            this.integerInterval();
	            break;

	        case 4:
	            this.state = 1138;
	            this.integerIntervals();
	            break;

	        }
	        this.state = 1142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1141;
	            this.assumedIntegerValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedIntegerValue() {
	    let localctx = new AssumedIntegerValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, AqlParser.RULE_assumedIntegerValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1144;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1145;
	        this.integerValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cReal() {
	    let localctx = new CRealContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, AqlParser.RULE_cReal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1151;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1147;
	            this.realValue();
	            break;

	        case 2:
	            this.state = 1148;
	            this.realValues();
	            break;

	        case 3:
	            this.state = 1149;
	            this.realInterval();
	            break;

	        case 4:
	            this.state = 1150;
	            this.realIntervals();
	            break;

	        }
	        this.state = 1154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1153;
	            this.assumedRealValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedRealValue() {
	    let localctx = new AssumedRealValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, AqlParser.RULE_assumedRealValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1157;
	        this.realValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cDateTime() {
	    let localctx = new CDateTimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, AqlParser.RULE_cDateTime);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1164;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1159;
	            this.match(AqlParser.DATE_TIME_CONSTRAINT_PATTERN);
	            break;

	        case 2:
	            this.state = 1160;
	            this.dateTimeValue();
	            break;

	        case 3:
	            this.state = 1161;
	            this.dateTimeValues();
	            break;

	        case 4:
	            this.state = 1162;
	            this.dateTimeInterval();
	            break;

	        case 5:
	            this.state = 1163;
	            this.dateTimeIntervals();
	            break;

	        }
	        this.state = 1167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1166;
	            this.assumedDateTimeValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedDateTimeValue() {
	    let localctx = new AssumedDateTimeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, AqlParser.RULE_assumedDateTimeValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1169;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1170;
	        this.dateTimeValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cDate() {
	    let localctx = new CDateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, AqlParser.RULE_cDate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1172;
	            this.match(AqlParser.DATE_CONSTRAINT_PATTERN);
	            break;

	        case 2:
	            this.state = 1173;
	            this.dateValue();
	            break;

	        case 3:
	            this.state = 1174;
	            this.dateValues();
	            break;

	        case 4:
	            this.state = 1175;
	            this.dateInterval();
	            break;

	        case 5:
	            this.state = 1176;
	            this.dateIntervals();
	            break;

	        }
	        this.state = 1180;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1179;
	            this.assumedDateValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedDateValue() {
	    let localctx = new AssumedDateValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, AqlParser.RULE_assumedDateValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1182;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1183;
	        this.dateValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cTime() {
	    let localctx = new CTimeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, AqlParser.RULE_cTime);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1185;
	            this.match(AqlParser.TIME_CONSTRAINT_PATTERN);
	            break;

	        case 2:
	            this.state = 1186;
	            this.timeValue();
	            break;

	        case 3:
	            this.state = 1187;
	            this.timeValues();
	            break;

	        case 4:
	            this.state = 1188;
	            this.timeInterval();
	            break;

	        case 5:
	            this.state = 1189;
	            this.timeIntervals();
	            break;

	        }
	        this.state = 1193;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1192;
	            this.assumedTimeValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedTimeValue() {
	    let localctx = new AssumedTimeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, AqlParser.RULE_assumedTimeValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1196;
	        this.timeValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cDuration() {
	    let localctx = new CDurationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, AqlParser.RULE_cDuration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1210;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1198;
	            this.match(AqlParser.DURATION_CONSTRAINT_PATTERN);
	            this.state = 1204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81) {
	                this.state = 1199;
	                this.match(AqlParser.SYM_SLASH);
	                this.state = 1202;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 82:
	                    this.state = 1200;
	                    this.durationInterval();
	                    break;
	                case 102:
	                case 131:
	                case 132:
	                    this.state = 1201;
	                    this.durationValue();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;

	        case 2:
	            this.state = 1206;
	            this.durationValue();
	            break;

	        case 3:
	            this.state = 1207;
	            this.durationValues();
	            break;

	        case 4:
	            this.state = 1208;
	            this.durationInterval();
	            break;

	        case 5:
	            this.state = 1209;
	            this.durationIntervals();
	            break;

	        }
	        this.state = 1213;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1212;
	            this.assumedDurationValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedDurationValue() {
	    let localctx = new AssumedDurationValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, AqlParser.RULE_assumedDurationValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1215;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1216;
	        this.durationValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cString() {
	    let localctx = new CStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, AqlParser.RULE_cString);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1221;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1218;
	            this.stringValue();
	            break;

	        case 2:
	            this.state = 1219;
	            this.stringValues();
	            break;

	        case 3:
	            this.state = 1220;
	            this.match(AqlParser.DELIMITED_REGEX);
	            break;

	        }
	        this.state = 1224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1223;
	            this.assumedStringValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumedStringValue() {
	    let localctx = new AssumedStringValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, AqlParser.RULE_assumedStringValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1226;
	        this.match(AqlParser.SYM_SEMI_COLON);
	        this.state = 1227;
	        this.stringValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveObject() {
	    let localctx = new PrimitiveObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, AqlParser.RULE_primitiveObject);
	    try {
	        this.state = 1234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 59:
	        case 90:
	        case 91:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 131:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1229;
	            this.primitiveValue();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1230;
	            this.primitiveList();
	            break;
	        case 118:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1231;
	            this.primitiveArray();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1232;
	            this.primitiveSet();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1233;
	            this.primitiveInterval();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveValue() {
	    let localctx = new PrimitiveValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, AqlParser.RULE_primitiveValue);
	    try {
	        this.state = 1246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1236;
	            this.stringValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1237;
	            this.integerValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1238;
	            this.realValue();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1239;
	            this.booleanValue();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1240;
	            this.characterValue();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1241;
	            this.termCodeValue();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1242;
	            this.dateValue();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1243;
	            this.timeValue();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1244;
	            this.dateTimeValue();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1245;
	            this.durationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveList() {
	    let localctx = new PrimitiveListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, AqlParser.RULE_primitiveList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1248;
	        this.match(AqlParser.SYM_LPAREN);
	        this.state = 1249;
	        this.primitiveValues();
	        this.state = 1250;
	        this.match(AqlParser.SYM_RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveArray() {
	    let localctx = new PrimitiveArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, AqlParser.RULE_primitiveArray);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this.match(AqlParser.SYM_LBRACKET);
	        this.state = 1253;
	        this.primitiveValues();
	        this.state = 1254;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveSet() {
	    let localctx = new PrimitiveSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, AqlParser.RULE_primitiveSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.match(AqlParser.SYM_LCURLY);
	        this.state = 1257;
	        this.primitiveValues();
	        this.state = 1258;
	        this.match(AqlParser.SYM_RCURLY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveValues() {
	    let localctx = new PrimitiveValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, AqlParser.RULE_primitiveValues);
	    try {
	        this.state = 1270;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1260;
	            this.stringValues();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1261;
	            this.integerValues();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1262;
	            this.realValues();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1263;
	            this.booleanValues();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1264;
	            this.characterValues();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1265;
	            this.termCodeListValue();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1266;
	            this.dateValues();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1267;
	            this.timeValues();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1268;
	            this.dateTimeValues();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1269;
	            this.durationValues();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveInterval() {
	    let localctx = new PrimitiveIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, AqlParser.RULE_primitiveInterval);
	    try {
	        this.state = 1278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1272;
	            this.integerInterval();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1273;
	            this.realInterval();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1274;
	            this.dateInterval();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1275;
	            this.timeInterval();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1276;
	            this.dateTimeInterval();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1277;
	            this.durationInterval();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValue() {
	    let localctx = new StringValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, AqlParser.RULE_stringValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1280;
	        this.match(AqlParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringValues() {
	    let localctx = new StringValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, AqlParser.RULE_stringValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1282;
	        this.stringValue();
	        this.state = 1287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1283;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1284;
	            this.stringValue();
	            this.state = 1289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerValue() {
	    let localctx = new IntegerValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, AqlParser.RULE_integerValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 1290;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1293;
	        _la = this._input.LA(1);
	        if(!(_la===107 || _la===110)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerValues() {
	    let localctx = new IntegerValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, AqlParser.RULE_integerValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1295;
	        this.integerValue();
	        this.state = 1300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1296;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1297;
	            this.integerValue();
	            this.state = 1302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerInterval() {
	    let localctx = new IntegerIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, AqlParser.RULE_integerInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 1304;
	        this.integerIntervalRange();
	        this.state = 1305;
	        this.match(AqlParser.SYM_IVL_DELIM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerIntervalRange() {
	    let localctx = new IntegerIntervalRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, AqlParser.RULE_integerIntervalRange);
	    var _la = 0;
	    try {
	        this.state = 1325;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1307;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1310;
	            this.integerValue();
	            this.state = 1311;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1312;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1315;
	            this.integerValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1317;
	                this.relop();
	            }

	            this.state = 1320;
	            this.integerValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1321;
	            this.integerValue();
	            this.state = 1322;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1323;
	            this.integerValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerIntervals() {
	    let localctx = new IntegerIntervalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, AqlParser.RULE_integerIntervals);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1327;
	        this.integerInterval();
	        this.state = 1332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1328;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1329;
	            this.integerInterval();
	            this.state = 1334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realValue() {
	    let localctx = new RealValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, AqlParser.RULE_realValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 1335;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1338;
	        _la = this._input.LA(1);
	        if(!(((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 11) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realValues() {
	    let localctx = new RealValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, AqlParser.RULE_realValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.realValue();
	        this.state = 1345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1341;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1342;
	            this.realValue();
	            this.state = 1347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realInterval() {
	    let localctx = new RealIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, AqlParser.RULE_realInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 1349;
	        this.realIntervalRange();
	        this.state = 1350;
	        this.match(AqlParser.SYM_IVL_DELIM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realIntervalRange() {
	    let localctx = new RealIntervalRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, AqlParser.RULE_realIntervalRange);
	    var _la = 0;
	    try {
	        this.state = 1370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1352;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1355;
	            this.realValue();
	            this.state = 1356;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1357;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1360;
	            this.realValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1362;
	                this.relop();
	            }

	            this.state = 1365;
	            this.realValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1366;
	            this.realValue();
	            this.state = 1367;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1368;
	            this.realValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realIntervals() {
	    let localctx = new RealIntervalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, AqlParser.RULE_realIntervals);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1372;
	        this.realInterval();
	        this.state = 1377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1373;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1374;
	            this.realInterval();
	            this.state = 1379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, AqlParser.RULE_booleanValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1380;
	        _la = this._input.LA(1);
	        if(!(_la===103 || _la===104)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValues() {
	    let localctx = new BooleanValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, AqlParser.RULE_booleanValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1382;
	        this.booleanValue();
	        this.state = 1387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1383;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1384;
	            this.booleanValue();
	            this.state = 1389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterValue() {
	    let localctx = new CharacterValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, AqlParser.RULE_characterValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1390;
	        this.match(AqlParser.CHARACTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterValues() {
	    let localctx = new CharacterValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, AqlParser.RULE_characterValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1392;
	        this.characterValue();
	        this.state = 1397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1393;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1394;
	            this.characterValue();
	            this.state = 1399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateValue() {
	    let localctx = new DateValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, AqlParser.RULE_dateValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this.match(AqlParser.ISO8601_DATE_AUGMENTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateValues() {
	    let localctx = new DateValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, AqlParser.RULE_dateValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.dateValue();
	        this.state = 1407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1403;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1404;
	            this.dateValue();
	            this.state = 1409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateInterval() {
	    let localctx = new DateIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, AqlParser.RULE_dateInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1410;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 1411;
	        this.dateIntervalRange();
	        this.state = 1412;
	        this.match(AqlParser.SYM_IVL_DELIM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateIntervalRange() {
	    let localctx = new DateIntervalRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, AqlParser.RULE_dateIntervalRange);
	    var _la = 0;
	    try {
	        this.state = 1432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1414;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1417;
	            this.dateValue();
	            this.state = 1418;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1419;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1422;
	            this.dateValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1424;
	                this.relop();
	            }

	            this.state = 1427;
	            this.dateValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1428;
	            this.dateValue();
	            this.state = 1429;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1430;
	            this.durationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateIntervals() {
	    let localctx = new DateIntervalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, AqlParser.RULE_dateIntervals);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1434;
	        this.dateInterval();
	        this.state = 1439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1435;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1436;
	            this.dateInterval();
	            this.state = 1441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeValue() {
	    let localctx = new TimeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, AqlParser.RULE_timeValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.match(AqlParser.ISO8601_TIME_AUGMENTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeValues() {
	    let localctx = new TimeValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, AqlParser.RULE_timeValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1444;
	        this.timeValue();
	        this.state = 1449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1445;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1446;
	            this.timeValue();
	            this.state = 1451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeInterval() {
	    let localctx = new TimeIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, AqlParser.RULE_timeInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1452;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 1453;
	        this.timeIntervalRange();
	        this.state = 1454;
	        this.match(AqlParser.SYM_IVL_DELIM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeIntervalRange() {
	    let localctx = new TimeIntervalRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, AqlParser.RULE_timeIntervalRange);
	    var _la = 0;
	    try {
	        this.state = 1474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1456;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1459;
	            this.timeValue();
	            this.state = 1460;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1461;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1464;
	            this.timeValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1467;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1466;
	                this.relop();
	            }

	            this.state = 1469;
	            this.timeValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1470;
	            this.timeValue();
	            this.state = 1471;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1472;
	            this.durationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeIntervals() {
	    let localctx = new TimeIntervalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, AqlParser.RULE_timeIntervals);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1476;
	        this.timeInterval();
	        this.state = 1481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1477;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1478;
	            this.timeInterval();
	            this.state = 1483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValue() {
	    let localctx = new DateTimeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, AqlParser.RULE_dateTimeValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1484;
	        this.match(AqlParser.ISO8601_DATE_TIME_AUGMENTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeValues() {
	    let localctx = new DateTimeValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, AqlParser.RULE_dateTimeValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        this.dateTimeValue();
	        this.state = 1491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1487;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1488;
	            this.dateTimeValue();
	            this.state = 1493;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeInterval() {
	    let localctx = new DateTimeIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, AqlParser.RULE_dateTimeInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 1495;
	        this.dateTimeIntervalRange();
	        this.state = 1496;
	        this.match(AqlParser.SYM_IVL_DELIM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeIntervalRange() {
	    let localctx = new DateTimeIntervalRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, AqlParser.RULE_dateTimeIntervalRange);
	    var _la = 0;
	    try {
	        this.state = 1516;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1499;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1498;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1501;
	            this.dateTimeValue();
	            this.state = 1502;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1503;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1506;
	            this.dateTimeValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1509;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1508;
	                this.relop();
	            }

	            this.state = 1511;
	            this.dateTimeValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1512;
	            this.dateTimeValue();
	            this.state = 1513;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1514;
	            this.durationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeIntervals() {
	    let localctx = new DateTimeIntervalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, AqlParser.RULE_dateTimeIntervals);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1518;
	        this.dateTimeInterval();
	        this.state = 1523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1519;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1520;
	            this.dateTimeInterval();
	            this.state = 1525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValue() {
	    let localctx = new DurationValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, AqlParser.RULE_durationValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131 || _la===132) {
	            this.state = 1526;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===132)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1529;
	        this.match(AqlParser.ISO8601_DURATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationValues() {
	    let localctx = new DurationValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, AqlParser.RULE_durationValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1531;
	        this.durationValue();
	        this.state = 1536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1532;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1533;
	            this.durationValue();
	            this.state = 1538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationInterval() {
	    let localctx = new DurationIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, AqlParser.RULE_durationInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1539;
	        this.match(AqlParser.SYM_IVL_DELIM);
	        this.state = 1540;
	        this.durationIntervalRange();
	        this.state = 1541;
	        this.match(AqlParser.SYM_IVL_DELIM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationIntervalRange() {
	    let localctx = new DurationIntervalRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, AqlParser.RULE_durationIntervalRange);
	    var _la = 0;
	    try {
	        this.state = 1561;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1543;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1546;
	            this.durationValue();
	            this.state = 1547;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1548;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1551;
	            this.durationValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1553;
	                this.relop();
	            }

	            this.state = 1556;
	            this.durationValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1557;
	            this.durationValue();
	            this.state = 1558;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1559;
	            this.durationValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationIntervals() {
	    let localctx = new DurationIntervalsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, AqlParser.RULE_durationIntervals);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1563;
	        this.durationInterval();
	        this.state = 1568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1564;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1565;
	            this.durationInterval();
	            this.state = 1570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termCodeValue() {
	    let localctx = new TermCodeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, AqlParser.RULE_termCodeValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1571;
	        _la = this._input.LA(1);
	        if(!(_la===90 || _la===91)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termCodeListValue() {
	    let localctx = new TermCodeListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, AqlParser.RULE_termCodeListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this.termCodeValue();
	        this.state = 1578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114) {
	            this.state = 1574;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1575;
	            this.termCodeValue();
	            this.state = 1580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relop() {
	    let localctx = new RelopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, AqlParser.RULE_relop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1581;
	        _la = this._input.LA(1);
	        if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adlPath() {
	    let localctx = new AdlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, AqlParser.RULE_adlPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1585; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1583;
	        		this.match(AqlParser.SYM_SLASH);
	        		this.state = 1584;
	        		this.adlPathSegment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1587; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,171, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adlPathSegment() {
	    let localctx = new AdlPathSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, AqlParser.RULE_adlPathSegment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1589;
	        this.match(AqlParser.LC_ID);
	        this.state = 1594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1590;
	            this.match(AqlParser.SYM_LBRACKET);
	            this.state = 1591;
	            this.adlPathPredicate();
	            this.state = 1592;
	            this.match(AqlParser.SYM_RBRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adlPathPredicate() {
	    let localctx = new AdlPathPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, AqlParser.RULE_adlPathPredicate);
	    try {
	        this.state = 1598;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1596;
	            this.archetypeIdPredicate();
	            break;
	        case 94:
	        case 95:
	        case 97:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1597;
	            this.idCode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	archetypeIdPredicate() {
	    let localctx = new ArchetypeIdPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, AqlParser.RULE_archetypeIdPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1600;
	        this.match(AqlParser.ARCHETYPE_REF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idCode() {
	    let localctx = new IdCodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, AqlParser.RULE_idCode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        _la = this._input.LA(1);
	        if(!(((((_la - 94)) & ~0x1f) === 0 && ((1 << (_la - 94)) & 11) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	augmentedAdlPath() {
	    let localctx = new AugmentedAdlPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, AqlParser.RULE_augmentedAdlPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1604;
	        localctx.varName = this.match(AqlParser.LC_ID);
	        this.state = 1605;
	        this.adlPath();
	        this.state = 1607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===81) {
	            this.state = 1606;
	            this.modelSubPath();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelPath() {
	    let localctx = new ModelPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, AqlParser.RULE_modelPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        localctx.varName = this.match(AqlParser.LC_ID);
	        this.state = 1610;
	        this.modelSubPath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelSubPath() {
	    let localctx = new ModelSubPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, AqlParser.RULE_modelSubPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1613; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1612;
	        		this.modelPathSegment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1615; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,175, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelPathSegment() {
	    let localctx = new ModelPathSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, AqlParser.RULE_modelPathSegment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1617;
	        this.match(AqlParser.SYM_SLASH);
	        this.state = 1618;
	        localctx.attributeId = this.match(AqlParser.LC_ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinObject() {
	    let localctx = new OdinObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, AqlParser.RULE_odinObject);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1626;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	        case 136:
	            this.state = 1621; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1620;
	                this.odinAttrVal();
	                this.state = 1623; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===135 || _la===136);
	            break;
	        case 80:
	        case 116:
	            this.state = 1625;
	            this.odinObjectValueBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 1628;
	            this.match(AqlParser.EOF);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinAttrVal() {
	    let localctx = new OdinAttrValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, AqlParser.RULE_odinAttrVal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1631;
	        this.odinAttrName();
	        this.state = 1632;
	        this.match(AqlParser.SYM_EQ);
	        this.state = 1633;
	        this.odinObjectBlock();
	        this.state = 1635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1634;
	            this.match(AqlParser.SYM_SEMI_COLON);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinAttrName() {
	    let localctx = new OdinAttrNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, AqlParser.RULE_odinAttrName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1637;
	        _la = this._input.LA(1);
	        if(!(_la===135 || _la===136)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinObjectBlock() {
	    let localctx = new OdinObjectBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, AqlParser.RULE_odinObjectBlock);
	    try {
	        this.state = 1641;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1639;
	            this.odinObjectValueBlock();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1640;
	            this.odinObjectReferenceBlock();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinObjectValueBlock() {
	    let localctx = new OdinObjectValueBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, AqlParser.RULE_odinObjectValueBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1643;
	            this.rmTypeSpec();
	        }

	        this.state = 1646;
	        this.match(AqlParser.SYM_LT);
	        this.state = 1659;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	        if(la_===1) {
	            this.state = 1647;
	            this.primitiveObject();

	        } else if(la_===2) {
	            this.state = 1649; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1648;
	                this.odinAttrVal();
	                this.state = 1651; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===135 || _la===136);

	        } else if(la_===3) {
	            this.state = 1654; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1653;
	                this.odinKeyedObject();
	                this.state = 1656; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===118);

	        } else if(la_===4) {
	            this.state = 1658;
	            this.match(AqlParser.ODIN_URI);

	        }
	        this.state = 1661;
	        this.match(AqlParser.SYM_GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rmTypeSpec() {
	    let localctx = new RmTypeSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, AqlParser.RULE_rmTypeSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1663;
	        this.match(AqlParser.SYM_LPAREN);
	        this.state = 1664;
	        this.rmTypeId();
	        this.state = 1665;
	        this.match(AqlParser.SYM_RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinKeyedObject() {
	    let localctx = new OdinKeyedObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, AqlParser.RULE_odinKeyedObject);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1667;
	        this.odinKeySpec();
	        this.state = 1668;
	        this.match(AqlParser.SYM_EQ);
	        this.state = 1669;
	        this.odinObjectBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinKeySpec() {
	    let localctx = new OdinKeySpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, AqlParser.RULE_odinKeySpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1671;
	        this.match(AqlParser.SYM_LBRACKET);
	        this.state = 1672;
	        this.primitiveValue();
	        this.state = 1673;
	        this.match(AqlParser.SYM_RBRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinObjectReferenceBlock() {
	    let localctx = new OdinObjectReferenceBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, AqlParser.RULE_odinObjectReferenceBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1675;
	        this.match(AqlParser.SYM_LT);
	        this.state = 1676;
	        this.odinPathList();
	        this.state = 1677;
	        this.match(AqlParser.SYM_GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinPathList() {
	    let localctx = new OdinPathListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, AqlParser.RULE_odinPathList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1679;
	        this.odinPath();
	        this.state = 1688;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        if(la_===1) {
	            this.state = 1680;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1681;
	            this.match(AqlParser.SYM_LIST_CONTINUE);

	        } else if(la_===2) {
	            this.state = 1684; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1682;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1683;
	                this.odinPath();
	                this.state = 1686; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinPath() {
	    let localctx = new OdinPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, AqlParser.RULE_odinPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1690;
	            this.odinKeySpec();
	        }

	        this.state = 1694; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1693;
	            this.odinPathSegment();
	            this.state = 1696; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===81);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	odinPathSegment() {
	    let localctx = new OdinPathSegmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, AqlParser.RULE_odinPathSegment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1698;
	        this.match(AqlParser.SYM_SLASH);
	        this.state = 1699;
	        this.match(AqlParser.LC_ID);
	        this.state = 1701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 1700;
	            this.odinKeySpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveListValue() {
	    let localctx = new PrimitiveListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, AqlParser.RULE_primitiveListValue);
	    try {
	        this.state = 1713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1703;
	            this.stringListValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1704;
	            this.integerListValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1705;
	            this.realListValue();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1706;
	            this.booleanListValue();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1707;
	            this.characterListValue();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1708;
	            this.termCodeListValue();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1709;
	            this.dateListValue();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1710;
	            this.timeListValue();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1711;
	            this.dateTimeListValue();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1712;
	            this.durationListValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveIntervalValue() {
	    let localctx = new PrimitiveIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, AqlParser.RULE_primitiveIntervalValue);
	    try {
	        this.state = 1721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1715;
	            this.integerIntervalValue();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1716;
	            this.realIntervalValue();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1717;
	            this.dateIntervalValue();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1718;
	            this.timeIntervalValue();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1719;
	            this.dateTimeIntervalValue();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1720;
	            this.durationIntervalValue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringListValue() {
	    let localctx = new StringListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, AqlParser.RULE_stringListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1723;
	        this.stringValue();
	        this.state = 1732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1726; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1724;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1725;
	                this.stringValue();
	                this.state = 1728; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1730;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1731;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerListValue() {
	    let localctx = new IntegerListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, AqlParser.RULE_integerListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1734;
	        this.integerValue();
	        this.state = 1743;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1737; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1735;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1736;
	                this.integerValue();
	                this.state = 1739; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1741;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1742;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerIntervalValue() {
	    let localctx = new IntegerIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, AqlParser.RULE_integerIntervalValue);
	    var _la = 0;
	    try {
	        this.state = 1770;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1745;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1746;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1749;
	            this.integerValue();
	            this.state = 1750;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1751;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1754;
	            this.integerValue();
	            this.state = 1755;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1757;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1758;
	                this.relop();
	            }

	            this.state = 1761;
	            this.integerValue();
	            this.state = 1762;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1764;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1765;
	            this.integerValue();
	            this.state = 1766;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1767;
	            this.integerValue();
	            this.state = 1768;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerIntervalListValue() {
	    let localctx = new IntegerIntervalListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, AqlParser.RULE_integerIntervalListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1772;
	        this.integerIntervalValue();
	        this.state = 1781;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1775; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1773;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1774;
	                this.integerIntervalValue();
	                this.state = 1777; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1779;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1780;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realListValue() {
	    let localctx = new RealListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, AqlParser.RULE_realListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1783;
	        this.realValue();
	        this.state = 1792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1786; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1784;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1785;
	                this.realValue();
	                this.state = 1788; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1790;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1791;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realIntervalValue() {
	    let localctx = new RealIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, AqlParser.RULE_realIntervalValue);
	    var _la = 0;
	    try {
	        this.state = 1819;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1794;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1795;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1798;
	            this.realValue();
	            this.state = 1799;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1800;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1803;
	            this.realValue();
	            this.state = 1804;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1806;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1807;
	                this.relop();
	            }

	            this.state = 1810;
	            this.realValue();
	            this.state = 1811;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1813;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1814;
	            this.realValue();
	            this.state = 1815;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1816;
	            this.realValue();
	            this.state = 1817;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realIntervalListValue() {
	    let localctx = new RealIntervalListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, AqlParser.RULE_realIntervalListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1821;
	        this.realIntervalValue();
	        this.state = 1830;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1824; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1822;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1823;
	                this.realIntervalValue();
	                this.state = 1826; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1828;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1829;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanListValue() {
	    let localctx = new BooleanListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, AqlParser.RULE_booleanListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1832;
	        this.booleanValue();
	        this.state = 1841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1835; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1833;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1834;
	                this.booleanValue();
	                this.state = 1837; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1839;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1840;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterListValue() {
	    let localctx = new CharacterListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, AqlParser.RULE_characterListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1843;
	        this.characterValue();
	        this.state = 1852;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1846; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1844;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1845;
	                this.characterValue();
	                this.state = 1848; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1850;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1851;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateListValue() {
	    let localctx = new DateListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, AqlParser.RULE_dateListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1854;
	        this.dateValue();
	        this.state = 1863;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1857; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1855;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1856;
	                this.dateValue();
	                this.state = 1859; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1861;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1862;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateIntervalValue() {
	    let localctx = new DateIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, AqlParser.RULE_dateIntervalValue);
	    var _la = 0;
	    try {
	        this.state = 1890;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1865;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1867;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1866;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1869;
	            this.dateValue();
	            this.state = 1870;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1871;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1874;
	            this.dateValue();
	            this.state = 1875;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1877;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1878;
	                this.relop();
	            }

	            this.state = 1881;
	            this.dateValue();
	            this.state = 1882;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1884;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1885;
	            this.dateValue();
	            this.state = 1886;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1887;
	            this.durationValue();
	            this.state = 1888;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateIntervalListValue() {
	    let localctx = new DateIntervalListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, AqlParser.RULE_dateIntervalListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1892;
	        this.dateIntervalValue();
	        this.state = 1901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1895; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1893;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1894;
	                this.dateIntervalValue();
	                this.state = 1897; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1899;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1900;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeListValue() {
	    let localctx = new TimeListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, AqlParser.RULE_timeListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1903;
	        this.timeValue();
	        this.state = 1912;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1906; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1904;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1905;
	                this.timeValue();
	                this.state = 1908; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1910;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1911;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeIntervalValue() {
	    let localctx = new TimeIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, AqlParser.RULE_timeIntervalValue);
	    var _la = 0;
	    try {
	        this.state = 1939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1914;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1915;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1918;
	            this.timeValue();
	            this.state = 1919;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1920;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1923;
	            this.timeValue();
	            this.state = 1924;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1926;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1928;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1927;
	                this.relop();
	            }

	            this.state = 1930;
	            this.timeValue();
	            this.state = 1931;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1933;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1934;
	            this.timeValue();
	            this.state = 1935;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1936;
	            this.durationValue();
	            this.state = 1937;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeIntervalListValue() {
	    let localctx = new TimeIntervalListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, AqlParser.RULE_timeIntervalListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1941;
	        this.timeIntervalValue();
	        this.state = 1950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1944; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1942;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1943;
	                this.timeIntervalValue();
	                this.state = 1946; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1948;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1949;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeListValue() {
	    let localctx = new DateTimeListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, AqlParser.RULE_dateTimeListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1952;
	        this.dateTimeValue();
	        this.state = 1961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1955; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1953;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1954;
	                this.dateTimeValue();
	                this.state = 1957; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1959;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1960;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeIntervalValue() {
	    let localctx = new DateTimeIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, AqlParser.RULE_dateTimeIntervalValue);
	    var _la = 0;
	    try {
	        this.state = 1988;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1963;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 1964;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 1967;
	            this.dateTimeValue();
	            this.state = 1968;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 1970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 1969;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 1972;
	            this.dateTimeValue();
	            this.state = 1973;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1975;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 1976;
	                this.relop();
	            }

	            this.state = 1979;
	            this.dateTimeValue();
	            this.state = 1980;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1982;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 1983;
	            this.dateTimeValue();
	            this.state = 1984;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 1985;
	            this.durationValue();
	            this.state = 1986;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeIntervalListValue() {
	    let localctx = new DateTimeIntervalListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, AqlParser.RULE_dateTimeIntervalListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1990;
	        this.dateTimeIntervalValue();
	        this.state = 1999;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1993; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1991;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 1992;
	                this.dateTimeIntervalValue();
	                this.state = 1995; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 1997;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 1998;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationListValue() {
	    let localctx = new DurationListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, AqlParser.RULE_durationListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2001;
	        this.durationValue();
	        this.state = 2010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2004; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2002;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 2003;
	                this.durationValue();
	                this.state = 2006; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 2008;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 2009;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationIntervalValue() {
	    let localctx = new DurationIntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, AqlParser.RULE_durationIntervalValue);
	    var _la = 0;
	    try {
	        this.state = 2037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2012;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 2014;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===79) {
	                this.state = 2013;
	                this.match(AqlParser.SYM_GT);
	            }

	            this.state = 2016;
	            this.durationValue();
	            this.state = 2017;
	            this.match(AqlParser.SYM_IVL_SEP);
	            this.state = 2019;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 2018;
	                this.match(AqlParser.SYM_LT);
	            }

	            this.state = 2021;
	            this.durationValue();
	            this.state = 2022;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2024;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 2026;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 15) !== 0)) {
	                this.state = 2025;
	                this.relop();
	            }

	            this.state = 2028;
	            this.durationValue();
	            this.state = 2029;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2031;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            this.state = 2032;
	            this.durationValue();
	            this.state = 2033;
	            this.match(AqlParser.SYM_PLUS_OR_MINUS);
	            this.state = 2034;
	            this.durationValue();
	            this.state = 2035;
	            this.match(AqlParser.SYM_IVL_DELIM);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationIntervalListValue() {
	    let localctx = new DurationIntervalListValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, AqlParser.RULE_durationIntervalListValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2039;
	        this.durationIntervalValue();
	        this.state = 2048;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2042; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2040;
	                this.match(AqlParser.SYM_COMMA);
	                this.state = 2041;
	                this.durationIntervalValue();
	                this.state = 2044; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===114);
	            break;

	        case 2:
	            this.state = 2046;
	            this.match(AqlParser.SYM_COMMA);
	            this.state = 2047;
	            this.match(AqlParser.SYM_LIST_CONTINUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

AqlParser.EOF = antlr4.Token.EOF;
AqlParser.WS = 1;
AqlParser.UNICODE_BOM = 2;
AqlParser.CMT_LINE = 3;
AqlParser.EOL = 4;
AqlParser.SYM_SELECT = 5;
AqlParser.SYM_AS = 6;
AqlParser.SYM_FROM = 7;
AqlParser.SYM_WHERE = 8;
AqlParser.SYM_ORDER = 9;
AqlParser.SYM_BY = 10;
AqlParser.SYM_DESC = 11;
AqlParser.SYM_DESCENDING = 12;
AqlParser.SYM_ASC = 13;
AqlParser.SYM_ASCENDING = 14;
AqlParser.SYM_LIMIT = 15;
AqlParser.SYM_OFFSET = 16;
AqlParser.SYM_DISTINCT = 17;
AqlParser.SYM_VERSION = 18;
AqlParser.SYM_LATEST_VERSION = 19;
AqlParser.SYM_ALL_VERSIONS = 20;
AqlParser.SYM_NULL = 21;
AqlParser.SYM_TOP = 22;
AqlParser.SYM_FORWARD = 23;
AqlParser.SYM_BACKWARD = 24;
AqlParser.SYM_CONTAINS = 25;
AqlParser.SYM_AND = 26;
AqlParser.SYM_OR = 27;
AqlParser.SYM_NOT = 28;
AqlParser.SYM_EXISTS = 29;
AqlParser.SYM_LIKE = 30;
AqlParser.SYM_MATCHES = 31;
AqlParser.SYM_LENGTH = 32;
AqlParser.SYM_POSITION = 33;
AqlParser.SYM_SUBSTRING = 34;
AqlParser.SYM_CONCAT = 35;
AqlParser.SYM_CONCAT_WS = 36;
AqlParser.SYM_ABS = 37;
AqlParser.SYM_MOD = 38;
AqlParser.SYM_CEIL = 39;
AqlParser.SYM_FLOOR = 40;
AqlParser.SYM_ROUND = 41;
AqlParser.SYM_CURRENT_DATE = 42;
AqlParser.SYM_CURRENT_TIME = 43;
AqlParser.SYM_CURRENT_DATE_TIME = 44;
AqlParser.SYM_NOW = 45;
AqlParser.SYM_CURRENT_TIMEZONE = 46;
AqlParser.SYM_COUNT = 47;
AqlParser.SYM_MIN = 48;
AqlParser.SYM_MAX = 49;
AqlParser.SYM_SUM = 50;
AqlParser.SYM_AVG = 51;
AqlParser.SYM_TERMINOLOGY = 52;
AqlParser.CONTAINED_REGEX = 53;
AqlParser.AQL_URI = 54;
AqlParser.BOOLEAN = 55;
AqlParser.DATE_STRING = 56;
AqlParser.TIME_STRING = 57;
AqlParser.DATE_TIME_STRING = 58;
AqlParser.STRING = 59;
AqlParser.QUALIFIED_TERM_CODE = 60;
AqlParser.SYM_NE = 61;
AqlParser.SYM_EQ = 62;
AqlParser.SYM_DOUBLE_DASH = 63;
AqlParser.SYM_EXISTENCE = 64;
AqlParser.SYM_OCCURRENCES = 65;
AqlParser.SYM_CARDINALITY = 66;
AqlParser.SYM_ORDERED = 67;
AqlParser.SYM_UNORDERED = 68;
AqlParser.SYM_UNIQUE = 69;
AqlParser.SYM_USE_NODE = 70;
AqlParser.SYM_USE_ARCHETYPE = 71;
AqlParser.SYM_ALLOW_ARCHETYPE = 72;
AqlParser.SYM_INCLUDE = 73;
AqlParser.SYM_EXCLUDE = 74;
AqlParser.SYM_CLOSED = 75;
AqlParser.SYM_ASTERISK = 76;
AqlParser.SYM_LE = 77;
AqlParser.SYM_GE = 78;
AqlParser.SYM_GT = 79;
AqlParser.SYM_LT = 80;
AqlParser.SYM_SLASH = 81;
AqlParser.SYM_IVL_DELIM = 82;
AqlParser.SYM_IVL_SEP = 83;
AqlParser.ODIN14_BLOCK_START = 84;
AqlParser.OBJECT_VERSION_ID = 85;
AqlParser.ARCHETYPE_HRID = 86;
AqlParser.ARCHETYPE_REF = 87;
AqlParser.VERSION_ID = 88;
AqlParser.FULLY_QUALIFIED_RM_ENTITY = 89;
AqlParser.QUALIFIED_TERM_CODE_ID = 90;
AqlParser.LOCAL_TERM_CODE_ID = 91;
AqlParser.QUALIFIED_TERM_CODE_REF = 92;
AqlParser.ROOT_ID_CODE = 93;
AqlParser.ID_CODE = 94;
AqlParser.AT_CODE = 95;
AqlParser.AC_CODE = 96;
AqlParser.ADL14_AT_CODE = 97;
AqlParser.ADL14_AC_CODE = 98;
AqlParser.ISO8601_DATE_AUGMENTED = 99;
AqlParser.ISO8601_TIME_AUGMENTED = 100;
AqlParser.ISO8601_DATE_TIME_AUGMENTED = 101;
AqlParser.ISO8601_DURATION = 102;
AqlParser.SYM_TRUE = 103;
AqlParser.SYM_FALSE = 104;
AqlParser.GUID = 105;
AqlParser.UUID = 106;
AqlParser.INTEGER = 107;
AqlParser.REAL = 108;
AqlParser.REAL_PERCENT = 109;
AqlParser.SCI_INTEGER = 110;
AqlParser.SCI_REAL = 111;
AqlParser.CHARACTER = 112;
AqlParser.SYM_DOT = 113;
AqlParser.SYM_COMMA = 114;
AqlParser.SYM_SEMI_COLON = 115;
AqlParser.SYM_LPAREN = 116;
AqlParser.SYM_RPAREN = 117;
AqlParser.SYM_LBRACKET = 118;
AqlParser.SYM_RBRACKET = 119;
AqlParser.SYM_LCURLY = 120;
AqlParser.SYM_RCURLY = 121;
AqlParser.C_LOCAL_TERM_CODE_START = 122;
AqlParser.C_EXTERNAL_TERM_CODE_START = 123;
AqlParser.DATE_CONSTRAINT_PATTERN = 124;
AqlParser.TIME_CONSTRAINT_PATTERN = 125;
AqlParser.DATE_TIME_CONSTRAINT_PATTERN = 126;
AqlParser.DURATION_CONSTRAINT_PATTERN = 127;
AqlParser.SYM_NAMESPACE_SEP = 128;
AqlParser.SYM_LIST_CONTINUE = 129;
AqlParser.SYM_PLUS_OR_MINUS = 130;
AqlParser.SYM_PLUS = 131;
AqlParser.SYM_MINUS = 132;
AqlParser.SYM_PERCENT = 133;
AqlParser.SYM_CARET = 134;
AqlParser.UC_ID = 135;
AqlParser.LC_ID = 136;
AqlParser.ODIN_URI = 137;
AqlParser.PARAMETER = 138;
AqlParser.ODIN14_BLOCK_LINE = 139;
AqlParser.WS_ODIN = 140;
AqlParser.CMT_LINE_L = 141;
AqlParser.EOL_L = 142;
AqlParser.WS_L = 143;
AqlParser.C_EXTERNAL_TERM_CODE_STRING = 144;
AqlParser.CMT_LINE_X = 145;
AqlParser.EOL_X = 146;
AqlParser.WS_X = 147;
AqlParser.DELIMITED_REGEX = 148;

AqlParser.RULE_aqlQuery = 0;
AqlParser.RULE_selectClause = 1;
AqlParser.RULE_fromClause = 2;
AqlParser.RULE_whereClause = 3;
AqlParser.RULE_orderByClause = 4;
AqlParser.RULE_limitClause = 5;
AqlParser.RULE_resultTable = 6;
AqlParser.RULE_columnSpec = 7;
AqlParser.RULE_columnAlias = 8;
AqlParser.RULE_columnValue = 9;
AqlParser.RULE_orderByExpr = 10;
AqlParser.RULE_modelTypeConstraint = 11;
AqlParser.RULE_modelTypeChain = 12;
AqlParser.RULE_modelTypeSubChain = 13;
AqlParser.RULE_modelTypeExpr = 14;
AqlParser.RULE_modelType = 15;
AqlParser.RULE_whereExpr = 16;
AqlParser.RULE_whereBooleanLeaf = 17;
AqlParser.RULE_comparisonOperand = 18;
AqlParser.RULE_value = 19;
AqlParser.RULE_likeOperand = 20;
AqlParser.RULE_matchesOperand = 21;
AqlParser.RULE_matchesConstraint = 22;
AqlParser.RULE_arithmeticExpr = 23;
AqlParser.RULE_arithmeticLeaf = 24;
AqlParser.RULE_arithmeticLiteral = 25;
AqlParser.RULE_dataMatchPath = 26;
AqlParser.RULE_dataMatchPathSegment = 27;
AqlParser.RULE_dataMatchPathPredicate = 28;
AqlParser.RULE_dataMatchPathValuePredicate = 29;
AqlParser.RULE_modelPathComparatorValue = 30;
AqlParser.RULE_versionPredicate = 31;
AqlParser.RULE_functionCall = 32;
AqlParser.RULE_functionArgs = 33;
AqlParser.RULE_aggregateFunctionCall = 34;
AqlParser.RULE_aggregateMathFunction = 35;
AqlParser.RULE_terminologyFunctionCall = 36;
AqlParser.RULE_builtInFunction = 37;
AqlParser.RULE_stringFunction = 38;
AqlParser.RULE_numericFunction = 39;
AqlParser.RULE_dateTimeFunction = 40;
AqlParser.RULE_comparisonOperator = 41;
AqlParser.RULE_primitiveLiteral = 42;
AqlParser.RULE_numericLiteral = 43;
AqlParser.RULE_aqlDateTimeLiteral = 44;
AqlParser.RULE_modelSpecificPredicateShortcut = 45;
AqlParser.RULE_top = 46;
AqlParser.RULE_cComplexObject = 47;
AqlParser.RULE_cComplexObjectDef = 48;
AqlParser.RULE_nodeId = 49;
AqlParser.RULE_cAttribute = 50;
AqlParser.RULE_cAttributeDef = 51;
AqlParser.RULE_cRegularObject = 52;
AqlParser.RULE_cArchetypeRoot = 53;
AqlParser.RULE_cComplexObjectProxy = 54;
AqlParser.RULE_cRegularPrimitiveObject = 55;
AqlParser.RULE_archetypeSlot = 56;
AqlParser.RULE_cIncludes = 57;
AqlParser.RULE_cExcludes = 58;
AqlParser.RULE_archetypeIdConstraint = 59;
AqlParser.RULE_archetypeIdPath = 60;
AqlParser.RULE_cExistence = 61;
AqlParser.RULE_existence = 62;
AqlParser.RULE_cCardinality = 63;
AqlParser.RULE_cardinality = 64;
AqlParser.RULE_cOccurrences = 65;
AqlParser.RULE_multiplicity = 66;
AqlParser.RULE_multiplicityMod = 67;
AqlParser.RULE_orderingMod = 68;
AqlParser.RULE_uniqueMod = 69;
AqlParser.RULE_cOrdinal = 70;
AqlParser.RULE_ordinalValue = 71;
AqlParser.RULE_ordinalTerm = 72;
AqlParser.RULE_domainSpecificExtension = 73;
AqlParser.RULE_rmTypeId = 74;
AqlParser.RULE_rmAttributeId = 75;
AqlParser.RULE_cObjectMatcher = 76;
AqlParser.RULE_cComplexObjectMatcher = 77;
AqlParser.RULE_cComplexObjectMatcherDef = 78;
AqlParser.RULE_cAttributeMatcher = 79;
AqlParser.RULE_cAttributeMatcherDef = 80;
AqlParser.RULE_cRegularObjectMatcher = 81;
AqlParser.RULE_cTerminologyCode = 82;
AqlParser.RULE_terminologyLocalCode = 83;
AqlParser.RULE_valueSetCode = 84;
AqlParser.RULE_termCodeDefault = 85;
AqlParser.RULE_cLocalTermCode = 86;
AqlParser.RULE_localCodesList = 87;
AqlParser.RULE_termCodeItem = 88;
AqlParser.RULE_cExternalTermCode = 89;
AqlParser.RULE_externalCodesList = 90;
AqlParser.RULE_externalTermCodeItem = 91;
AqlParser.RULE_externalTermCodeDefault = 92;
AqlParser.RULE_adl14_at_code = 93;
AqlParser.RULE_adl14_ac_code = 94;
AqlParser.RULE_cInlinePrimitiveObject = 95;
AqlParser.RULE_cInlineOrderedObject = 96;
AqlParser.RULE_cInlineDTemporalObject = 97;
AqlParser.RULE_cBoolean = 98;
AqlParser.RULE_assumedBooleanValue = 99;
AqlParser.RULE_cInteger = 100;
AqlParser.RULE_assumedIntegerValue = 101;
AqlParser.RULE_cReal = 102;
AqlParser.RULE_assumedRealValue = 103;
AqlParser.RULE_cDateTime = 104;
AqlParser.RULE_assumedDateTimeValue = 105;
AqlParser.RULE_cDate = 106;
AqlParser.RULE_assumedDateValue = 107;
AqlParser.RULE_cTime = 108;
AqlParser.RULE_assumedTimeValue = 109;
AqlParser.RULE_cDuration = 110;
AqlParser.RULE_assumedDurationValue = 111;
AqlParser.RULE_cString = 112;
AqlParser.RULE_assumedStringValue = 113;
AqlParser.RULE_primitiveObject = 114;
AqlParser.RULE_primitiveValue = 115;
AqlParser.RULE_primitiveList = 116;
AqlParser.RULE_primitiveArray = 117;
AqlParser.RULE_primitiveSet = 118;
AqlParser.RULE_primitiveValues = 119;
AqlParser.RULE_primitiveInterval = 120;
AqlParser.RULE_stringValue = 121;
AqlParser.RULE_stringValues = 122;
AqlParser.RULE_integerValue = 123;
AqlParser.RULE_integerValues = 124;
AqlParser.RULE_integerInterval = 125;
AqlParser.RULE_integerIntervalRange = 126;
AqlParser.RULE_integerIntervals = 127;
AqlParser.RULE_realValue = 128;
AqlParser.RULE_realValues = 129;
AqlParser.RULE_realInterval = 130;
AqlParser.RULE_realIntervalRange = 131;
AqlParser.RULE_realIntervals = 132;
AqlParser.RULE_booleanValue = 133;
AqlParser.RULE_booleanValues = 134;
AqlParser.RULE_characterValue = 135;
AqlParser.RULE_characterValues = 136;
AqlParser.RULE_dateValue = 137;
AqlParser.RULE_dateValues = 138;
AqlParser.RULE_dateInterval = 139;
AqlParser.RULE_dateIntervalRange = 140;
AqlParser.RULE_dateIntervals = 141;
AqlParser.RULE_timeValue = 142;
AqlParser.RULE_timeValues = 143;
AqlParser.RULE_timeInterval = 144;
AqlParser.RULE_timeIntervalRange = 145;
AqlParser.RULE_timeIntervals = 146;
AqlParser.RULE_dateTimeValue = 147;
AqlParser.RULE_dateTimeValues = 148;
AqlParser.RULE_dateTimeInterval = 149;
AqlParser.RULE_dateTimeIntervalRange = 150;
AqlParser.RULE_dateTimeIntervals = 151;
AqlParser.RULE_durationValue = 152;
AqlParser.RULE_durationValues = 153;
AqlParser.RULE_durationInterval = 154;
AqlParser.RULE_durationIntervalRange = 155;
AqlParser.RULE_durationIntervals = 156;
AqlParser.RULE_termCodeValue = 157;
AqlParser.RULE_termCodeListValue = 158;
AqlParser.RULE_relop = 159;
AqlParser.RULE_adlPath = 160;
AqlParser.RULE_adlPathSegment = 161;
AqlParser.RULE_adlPathPredicate = 162;
AqlParser.RULE_archetypeIdPredicate = 163;
AqlParser.RULE_idCode = 164;
AqlParser.RULE_augmentedAdlPath = 165;
AqlParser.RULE_modelPath = 166;
AqlParser.RULE_modelSubPath = 167;
AqlParser.RULE_modelPathSegment = 168;
AqlParser.RULE_odinObject = 169;
AqlParser.RULE_odinAttrVal = 170;
AqlParser.RULE_odinAttrName = 171;
AqlParser.RULE_odinObjectBlock = 172;
AqlParser.RULE_odinObjectValueBlock = 173;
AqlParser.RULE_rmTypeSpec = 174;
AqlParser.RULE_odinKeyedObject = 175;
AqlParser.RULE_odinKeySpec = 176;
AqlParser.RULE_odinObjectReferenceBlock = 177;
AqlParser.RULE_odinPathList = 178;
AqlParser.RULE_odinPath = 179;
AqlParser.RULE_odinPathSegment = 180;
AqlParser.RULE_primitiveListValue = 181;
AqlParser.RULE_primitiveIntervalValue = 182;
AqlParser.RULE_stringListValue = 183;
AqlParser.RULE_integerListValue = 184;
AqlParser.RULE_integerIntervalValue = 185;
AqlParser.RULE_integerIntervalListValue = 186;
AqlParser.RULE_realListValue = 187;
AqlParser.RULE_realIntervalValue = 188;
AqlParser.RULE_realIntervalListValue = 189;
AqlParser.RULE_booleanListValue = 190;
AqlParser.RULE_characterListValue = 191;
AqlParser.RULE_dateListValue = 192;
AqlParser.RULE_dateIntervalValue = 193;
AqlParser.RULE_dateIntervalListValue = 194;
AqlParser.RULE_timeListValue = 195;
AqlParser.RULE_timeIntervalValue = 196;
AqlParser.RULE_timeIntervalListValue = 197;
AqlParser.RULE_dateTimeListValue = 198;
AqlParser.RULE_dateTimeIntervalValue = 199;
AqlParser.RULE_dateTimeIntervalListValue = 200;
AqlParser.RULE_durationListValue = 201;
AqlParser.RULE_durationIntervalValue = 202;
AqlParser.RULE_durationIntervalListValue = 203;

class AqlQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_aqlQuery;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	EOF() {
	    return this.getToken(AqlParser.EOF, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	SYM_DOUBLE_DASH() {
	    return this.getToken(AqlParser.SYM_DOUBLE_DASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAqlQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAqlQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAqlQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_selectClause;
    }

	SYM_SELECT() {
	    return this.getToken(AqlParser.SYM_SELECT, 0);
	};

	resultTable() {
	    return this.getTypedRuleContext(ResultTableContext,0);
	};

	SYM_DISTINCT() {
	    return this.getToken(AqlParser.SYM_DISTINCT, 0);
	};

	top() {
	    return this.getTypedRuleContext(TopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitSelectClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitSelectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_fromClause;
    }

	SYM_FROM() {
	    return this.getToken(AqlParser.SYM_FROM, 0);
	};

	modelTypeConstraint() {
	    return this.getTypedRuleContext(ModelTypeConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitFromClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_whereClause;
    }

	SYM_WHERE() {
	    return this.getToken(AqlParser.SYM_WHERE, 0);
	};

	whereExpr() {
	    return this.getTypedRuleContext(WhereExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_orderByClause;
    }

	SYM_ORDER() {
	    return this.getToken(AqlParser.SYM_ORDER, 0);
	};

	SYM_BY() {
	    return this.getToken(AqlParser.SYM_BY, 0);
	};

	orderByExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExprContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExprContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_limitClause;
        this.limit = null;
        this.offset = null;
    }

	SYM_LIMIT() {
	    return this.getToken(AqlParser.SYM_LIMIT, 0);
	};

	INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.INTEGER);
	    } else {
	        return this.getToken(AqlParser.INTEGER, i);
	    }
	};


	SYM_OFFSET() {
	    return this.getToken(AqlParser.SYM_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_resultTable;
    }

	columnSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnSpecContext);
	    } else {
	        return this.getTypedRuleContext(ColumnSpecContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterResultTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitResultTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitResultTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_columnSpec;
    }

	columnValue() {
	    return this.getTypedRuleContext(ColumnValueContext,0);
	};

	SYM_AS() {
	    return this.getToken(AqlParser.SYM_AS, 0);
	};

	columnAlias() {
	    return this.getTypedRuleContext(ColumnAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterColumnSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitColumnSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitColumnSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_columnAlias;
    }

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	UC_ID() {
	    return this.getToken(AqlParser.UC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterColumnAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitColumnAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitColumnAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_columnValue;
    }

	dataMatchPath() {
	    return this.getTypedRuleContext(DataMatchPathContext,0);
	};

	aggregateFunctionCall() {
	    return this.getTypedRuleContext(AggregateFunctionCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	primitiveLiteral() {
	    return this.getTypedRuleContext(PrimitiveLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterColumnValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitColumnValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitColumnValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_orderByExpr;
        this.order = null;
    }

	modelPath() {
	    return this.getTypedRuleContext(ModelPathContext,0);
	};

	SYM_DESCENDING() {
	    return this.getToken(AqlParser.SYM_DESCENDING, 0);
	};

	SYM_DESC() {
	    return this.getToken(AqlParser.SYM_DESC, 0);
	};

	SYM_ASCENDING() {
	    return this.getToken(AqlParser.SYM_ASCENDING, 0);
	};

	SYM_ASC() {
	    return this.getToken(AqlParser.SYM_ASC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOrderByExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOrderByExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOrderByExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelTypeConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelTypeConstraint;
    }

	modelType() {
	    return this.getTypedRuleContext(ModelTypeContext,0);
	};

	modelTypeChain() {
	    return this.getTypedRuleContext(ModelTypeChainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelTypeConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelTypeConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelTypeConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelTypeChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelTypeChain;
    }

	modelType() {
	    return this.getTypedRuleContext(ModelTypeContext,0);
	};

	SYM_CONTAINS() {
	    return this.getToken(AqlParser.SYM_CONTAINS, 0);
	};

	modelTypeSubChain() {
	    return this.getTypedRuleContext(ModelTypeSubChainContext,0);
	};

	SYM_NOT() {
	    return this.getToken(AqlParser.SYM_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelTypeChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelTypeChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelTypeChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelTypeSubChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelTypeSubChain;
    }

	modelTypeConstraint() {
	    return this.getTypedRuleContext(ModelTypeConstraintContext,0);
	};

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	modelTypeExpr() {
	    return this.getTypedRuleContext(ModelTypeExprContext,0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelTypeSubChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelTypeSubChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelTypeSubChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelTypeExpr;
    }

	SYM_NOT() {
	    return this.getToken(AqlParser.SYM_NOT, 0);
	};

	modelTypeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModelTypeExprContext);
	    } else {
	        return this.getTypedRuleContext(ModelTypeExprContext,i);
	    }
	};

	modelTypeConstraint() {
	    return this.getTypedRuleContext(ModelTypeConstraintContext,0);
	};

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	SYM_AND() {
	    return this.getToken(AqlParser.SYM_AND, 0);
	};

	SYM_OR() {
	    return this.getToken(AqlParser.SYM_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelTypeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelTypeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelTypeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelType;
        this.typeName = null;
        this.variableName = null;
    }

	UC_ID() {
	    return this.getToken(AqlParser.UC_ID, 0);
	};

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	archetypeIdPredicate() {
	    return this.getTypedRuleContext(ArchetypeIdPredicateContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_whereExpr;
    }

	SYM_NOT() {
	    return this.getToken(AqlParser.SYM_NOT, 0);
	};

	whereExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhereExprContext);
	    } else {
	        return this.getTypedRuleContext(WhereExprContext,i);
	    }
	};

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	whereBooleanLeaf() {
	    return this.getTypedRuleContext(WhereBooleanLeafContext,0);
	};

	SYM_AND() {
	    return this.getToken(AqlParser.SYM_AND, 0);
	};

	SYM_OR() {
	    return this.getToken(AqlParser.SYM_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterWhereExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitWhereExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitWhereExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereBooleanLeafContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_whereBooleanLeaf;
    }

	SYM_EXISTS() {
	    return this.getToken(AqlParser.SYM_EXISTS, 0);
	};

	dataMatchPath() {
	    return this.getTypedRuleContext(DataMatchPathContext,0);
	};

	comparisonOperand() {
	    return this.getTypedRuleContext(ComparisonOperandContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	matchesOperand() {
	    return this.getTypedRuleContext(MatchesOperandContext,0);
	};

	SYM_LIKE() {
	    return this.getToken(AqlParser.SYM_LIKE, 0);
	};

	likeOperand() {
	    return this.getTypedRuleContext(LikeOperandContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterWhereBooleanLeaf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitWhereBooleanLeaf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitWhereBooleanLeaf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_comparisonOperand;
    }

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	arithmeticExpr() {
	    return this.getTypedRuleContext(ArithmeticExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterComparisonOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitComparisonOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitComparisonOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_value;
    }

	dataMatchPath() {
	    return this.getTypedRuleContext(DataMatchPathContext,0);
	};

	primitiveLiteral() {
	    return this.getTypedRuleContext(PrimitiveLiteralContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	PARAMETER() {
	    return this.getToken(AqlParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LikeOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_likeOperand;
    }

	STRING() {
	    return this.getToken(AqlParser.STRING, 0);
	};

	PARAMETER() {
	    return this.getToken(AqlParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterLikeOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitLikeOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitLikeOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchesOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_matchesOperand;
    }

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	matchesConstraint() {
	    return this.getTypedRuleContext(MatchesConstraintContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	terminologyFunctionCall() {
	    return this.getTypedRuleContext(TerminologyFunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterMatchesOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitMatchesOperand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitMatchesOperand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchesConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_matchesConstraint;
    }

	cObjectMatcher() {
	    return this.getTypedRuleContext(CObjectMatcherContext,0);
	};

	AQL_URI() {
	    return this.getToken(AqlParser.AQL_URI, 0);
	};

	PARAMETER() {
	    return this.getToken(AqlParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterMatchesConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitMatchesConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitMatchesConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArithmeticExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_arithmeticExpr;
    }

	arithmeticLeaf() {
	    return this.getTypedRuleContext(ArithmeticLeafContext,0);
	};

	arithmeticExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArithmeticExprContext);
	    } else {
	        return this.getTypedRuleContext(ArithmeticExprContext,i);
	    }
	};

	SYM_CARET() {
	    return this.getToken(AqlParser.SYM_CARET, 0);
	};

	SYM_SLASH() {
	    return this.getToken(AqlParser.SYM_SLASH, 0);
	};

	SYM_ASTERISK() {
	    return this.getToken(AqlParser.SYM_ASTERISK, 0);
	};

	SYM_PERCENT() {
	    return this.getToken(AqlParser.SYM_PERCENT, 0);
	};

	SYM_PLUS() {
	    return this.getToken(AqlParser.SYM_PLUS, 0);
	};

	SYM_MINUS() {
	    return this.getToken(AqlParser.SYM_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArithmeticExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArithmeticExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArithmeticExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArithmeticLeafContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_arithmeticLeaf;
    }

	arithmeticLiteral() {
	    return this.getTypedRuleContext(ArithmeticLiteralContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	arithmeticExpr() {
	    return this.getTypedRuleContext(ArithmeticExprContext,0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArithmeticLeaf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArithmeticLeaf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArithmeticLeaf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArithmeticLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_arithmeticLiteral;
    }

	integerValue() {
	    return this.getTypedRuleContext(IntegerValueContext,0);
	};

	realValue() {
	    return this.getTypedRuleContext(RealValueContext,0);
	};

	aqlDateTimeLiteral() {
	    return this.getTypedRuleContext(AqlDateTimeLiteralContext,0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArithmeticLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArithmeticLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArithmeticLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataMatchPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dataMatchPath;
        this.variableName = null;
    }

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	dataMatchPathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataMatchPathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(DataMatchPathSegmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDataMatchPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDataMatchPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDataMatchPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataMatchPathSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dataMatchPathSegment;
        this.attributeId = null;
    }

	SYM_SLASH() {
	    return this.getToken(AqlParser.SYM_SLASH, 0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	dataMatchPathPredicate() {
	    return this.getTypedRuleContext(DataMatchPathPredicateContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDataMatchPathSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDataMatchPathSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDataMatchPathSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataMatchPathPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dataMatchPathPredicate;
    }

	adlPathPredicate() {
	    return this.getTypedRuleContext(AdlPathPredicateContext,0);
	};

	SYM_AND() {
	    return this.getToken(AqlParser.SYM_AND, 0);
	};

	dataMatchPathValuePredicate() {
	    return this.getTypedRuleContext(DataMatchPathValuePredicateContext,0);
	};

	SYM_COMMA() {
	    return this.getToken(AqlParser.SYM_COMMA, 0);
	};

	modelSpecificPredicateShortcut() {
	    return this.getTypedRuleContext(ModelSpecificPredicateShortcutContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDataMatchPathPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDataMatchPathPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDataMatchPathPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataMatchPathValuePredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dataMatchPathValuePredicate;
    }

	modelPath() {
	    return this.getTypedRuleContext(ModelPathContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	CONTAINED_REGEX() {
	    return this.getToken(AqlParser.CONTAINED_REGEX, 0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	modelPathComparatorValue() {
	    return this.getTypedRuleContext(ModelPathComparatorValueContext,0);
	};

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	dataMatchPathValuePredicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataMatchPathValuePredicateContext);
	    } else {
	        return this.getTypedRuleContext(DataMatchPathValuePredicateContext,i);
	    }
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	SYM_AND() {
	    return this.getToken(AqlParser.SYM_AND, 0);
	};

	SYM_OR() {
	    return this.getToken(AqlParser.SYM_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDataMatchPathValuePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDataMatchPathValuePredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDataMatchPathValuePredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelPathComparatorValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelPathComparatorValue;
    }

	primitiveLiteral() {
	    return this.getTypedRuleContext(PrimitiveLiteralContext,0);
	};

	modelPath() {
	    return this.getTypedRuleContext(ModelPathContext,0);
	};

	PARAMETER() {
	    return this.getToken(AqlParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelPathComparatorValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelPathComparatorValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelPathComparatorValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VersionPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_versionPredicate;
    }

	SYM_LATEST_VERSION() {
	    return this.getToken(AqlParser.SYM_LATEST_VERSION, 0);
	};

	SYM_ALL_VERSIONS() {
	    return this.getToken(AqlParser.SYM_ALL_VERSIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterVersionPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitVersionPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitVersionPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_functionCall;
    }

	terminologyFunctionCall() {
	    return this.getTypedRuleContext(TerminologyFunctionCallContext,0);
	};

	builtInFunction() {
	    return this.getTypedRuleContext(BuiltInFunctionContext,0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_functionArgs;
    }

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterFunctionArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitFunctionArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitFunctionArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateFunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_aggregateFunctionCall;
        this.name = null;
    }

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	SYM_COUNT() {
	    return this.getToken(AqlParser.SYM_COUNT, 0);
	};

	augmentedAdlPath() {
	    return this.getTypedRuleContext(AugmentedAdlPathContext,0);
	};

	SYM_ASTERISK() {
	    return this.getToken(AqlParser.SYM_ASTERISK, 0);
	};

	SYM_DISTINCT() {
	    return this.getToken(AqlParser.SYM_DISTINCT, 0);
	};

	aggregateMathFunction() {
	    return this.getTypedRuleContext(AggregateMathFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAggregateFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAggregateFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAggregateFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateMathFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_aggregateMathFunction;
    }

	SYM_MIN() {
	    return this.getToken(AqlParser.SYM_MIN, 0);
	};

	SYM_MAX() {
	    return this.getToken(AqlParser.SYM_MAX, 0);
	};

	SYM_SUM() {
	    return this.getToken(AqlParser.SYM_SUM, 0);
	};

	SYM_AVG() {
	    return this.getToken(AqlParser.SYM_AVG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAggregateMathFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAggregateMathFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAggregateMathFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TerminologyFunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_terminologyFunctionCall;
        this.operation = null;
        this.source = null;
    }

	SYM_TERMINOLOGY() {
	    return this.getToken(AqlParser.SYM_TERMINOLOGY, 0);
	};

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.STRING);
	    } else {
	        return this.getToken(AqlParser.STRING, i);
	    }
	};


	stringFunction() {
	    return this.getTypedRuleContext(StringFunctionContext,0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTerminologyFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTerminologyFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTerminologyFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BuiltInFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_builtInFunction;
    }

	stringFunction() {
	    return this.getTypedRuleContext(StringFunctionContext,0);
	};

	numericFunction() {
	    return this.getTypedRuleContext(NumericFunctionContext,0);
	};

	dateTimeFunction() {
	    return this.getTypedRuleContext(DateTimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterBuiltInFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitBuiltInFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitBuiltInFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_stringFunction;
    }

	SYM_LENGTH() {
	    return this.getToken(AqlParser.SYM_LENGTH, 0);
	};

	SYM_CONTAINS() {
	    return this.getToken(AqlParser.SYM_CONTAINS, 0);
	};

	SYM_POSITION() {
	    return this.getToken(AqlParser.SYM_POSITION, 0);
	};

	SYM_SUBSTRING() {
	    return this.getToken(AqlParser.SYM_SUBSTRING, 0);
	};

	SYM_CONCAT_WS() {
	    return this.getToken(AqlParser.SYM_CONCAT_WS, 0);
	};

	SYM_CONCAT() {
	    return this.getToken(AqlParser.SYM_CONCAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_numericFunction;
    }

	SYM_ABS() {
	    return this.getToken(AqlParser.SYM_ABS, 0);
	};

	SYM_MOD() {
	    return this.getToken(AqlParser.SYM_MOD, 0);
	};

	SYM_CEIL() {
	    return this.getToken(AqlParser.SYM_CEIL, 0);
	};

	SYM_FLOOR() {
	    return this.getToken(AqlParser.SYM_FLOOR, 0);
	};

	SYM_ROUND() {
	    return this.getToken(AqlParser.SYM_ROUND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterNumericFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitNumericFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitNumericFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeFunction;
    }

	SYM_NOW() {
	    return this.getToken(AqlParser.SYM_NOW, 0);
	};

	SYM_CURRENT_DATE_TIME() {
	    return this.getToken(AqlParser.SYM_CURRENT_DATE_TIME, 0);
	};

	SYM_CURRENT_DATE() {
	    return this.getToken(AqlParser.SYM_CURRENT_DATE, 0);
	};

	SYM_CURRENT_TIMEZONE() {
	    return this.getToken(AqlParser.SYM_CURRENT_TIMEZONE, 0);
	};

	SYM_CURRENT_TIME() {
	    return this.getToken(AqlParser.SYM_CURRENT_TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_comparisonOperator;
    }

	SYM_EQ() {
	    return this.getToken(AqlParser.SYM_EQ, 0);
	};

	SYM_NE() {
	    return this.getToken(AqlParser.SYM_NE, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_GE() {
	    return this.getToken(AqlParser.SYM_GE, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	SYM_LE() {
	    return this.getToken(AqlParser.SYM_LE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitComparisonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveLiteral;
    }

	STRING() {
	    return this.getToken(AqlParser.STRING, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	aqlDateTimeLiteral() {
	    return this.getTypedRuleContext(AqlDateTimeLiteralContext,0);
	};

	BOOLEAN() {
	    return this.getToken(AqlParser.BOOLEAN, 0);
	};

	SYM_NULL() {
	    return this.getToken(AqlParser.SYM_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_numericLiteral;
    }

	INTEGER() {
	    return this.getToken(AqlParser.INTEGER, 0);
	};

	REAL() {
	    return this.getToken(AqlParser.REAL, 0);
	};

	SCI_INTEGER() {
	    return this.getToken(AqlParser.SCI_INTEGER, 0);
	};

	SCI_REAL() {
	    return this.getToken(AqlParser.SCI_REAL, 0);
	};

	SYM_MINUS() {
	    return this.getToken(AqlParser.SYM_MINUS, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AqlDateTimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_aqlDateTimeLiteral;
    }

	DATE_STRING() {
	    return this.getToken(AqlParser.DATE_STRING, 0);
	};

	TIME_STRING() {
	    return this.getToken(AqlParser.TIME_STRING, 0);
	};

	DATE_TIME_STRING() {
	    return this.getToken(AqlParser.DATE_TIME_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAqlDateTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAqlDateTimeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAqlDateTimeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelSpecificPredicateShortcutContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelSpecificPredicateShortcut;
    }

	STRING() {
	    return this.getToken(AqlParser.STRING, 0);
	};

	idCode() {
	    return this.getTypedRuleContext(IdCodeContext,0);
	};

	QUALIFIED_TERM_CODE() {
	    return this.getToken(AqlParser.QUALIFIED_TERM_CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelSpecificPredicateShortcut(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelSpecificPredicateShortcut(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelSpecificPredicateShortcut(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_top;
        this.direction = null;
    }

	SYM_TOP() {
	    return this.getToken(AqlParser.SYM_TOP, 0);
	};

	INTEGER() {
	    return this.getToken(AqlParser.INTEGER, 0);
	};

	SYM_FORWARD() {
	    return this.getToken(AqlParser.SYM_FORWARD, 0);
	};

	SYM_BACKWARD() {
	    return this.getToken(AqlParser.SYM_BACKWARD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CComplexObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cComplexObject;
    }

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	nodeId() {
	    return this.getTypedRuleContext(NodeIdContext,0);
	};

	cOccurrences() {
	    return this.getTypedRuleContext(COccurrencesContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	cComplexObjectDef() {
	    return this.getTypedRuleContext(CComplexObjectDefContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCComplexObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCComplexObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCComplexObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CComplexObjectDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cComplexObjectDef;
    }

	cAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CAttributeContext);
	    } else {
	        return this.getTypedRuleContext(CAttributeContext,i);
	    }
	};

	SYM_ASTERISK() {
	    return this.getToken(AqlParser.SYM_ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCComplexObjectDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCComplexObjectDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCComplexObjectDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_nodeId;
    }

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	adl14_at_code() {
	    return this.getTypedRuleContext(Adl14_at_codeContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterNodeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitNodeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitNodeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cAttribute;
    }

	rmAttributeId() {
	    return this.getTypedRuleContext(RmAttributeIdContext,0);
	};

	cExistence() {
	    return this.getTypedRuleContext(CExistenceContext,0);
	};

	cCardinality() {
	    return this.getTypedRuleContext(CCardinalityContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	cAttributeDef() {
	    return this.getTypedRuleContext(CAttributeDefContext,0);
	};

	cInlinePrimitiveObject() {
	    return this.getTypedRuleContext(CInlinePrimitiveObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCAttribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CAttributeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cAttributeDef;
    }

	cRegularObject = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CRegularObjectContext);
	    } else {
	        return this.getTypedRuleContext(CRegularObjectContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCAttributeDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCAttributeDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCAttributeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CRegularObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cRegularObject;
    }

	cComplexObject() {
	    return this.getTypedRuleContext(CComplexObjectContext,0);
	};

	cArchetypeRoot() {
	    return this.getTypedRuleContext(CArchetypeRootContext,0);
	};

	cComplexObjectProxy() {
	    return this.getTypedRuleContext(CComplexObjectProxyContext,0);
	};

	archetypeSlot() {
	    return this.getTypedRuleContext(ArchetypeSlotContext,0);
	};

	cRegularPrimitiveObject() {
	    return this.getTypedRuleContext(CRegularPrimitiveObjectContext,0);
	};

	cOrdinal() {
	    return this.getTypedRuleContext(COrdinalContext,0);
	};

	domainSpecificExtension() {
	    return this.getTypedRuleContext(DomainSpecificExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCRegularObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCRegularObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCRegularObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CArchetypeRootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cArchetypeRoot;
    }

	SYM_USE_ARCHETYPE() {
	    return this.getToken(AqlParser.SYM_USE_ARCHETYPE, 0);
	};

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	adl14_at_code() {
	    return this.getTypedRuleContext(Adl14_at_codeContext,0);
	};

	SYM_COMMA() {
	    return this.getToken(AqlParser.SYM_COMMA, 0);
	};

	ARCHETYPE_REF() {
	    return this.getToken(AqlParser.ARCHETYPE_REF, 0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	cOccurrences() {
	    return this.getTypedRuleContext(COccurrencesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCArchetypeRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCArchetypeRoot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCArchetypeRoot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CComplexObjectProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cComplexObjectProxy;
    }

	SYM_USE_NODE() {
	    return this.getToken(AqlParser.SYM_USE_NODE, 0);
	};

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	adlPath() {
	    return this.getTypedRuleContext(AdlPathContext,0);
	};

	cOccurrences() {
	    return this.getTypedRuleContext(COccurrencesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCComplexObjectProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCComplexObjectProxy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCComplexObjectProxy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CRegularPrimitiveObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cRegularPrimitiveObject;
    }

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	nodeId() {
	    return this.getTypedRuleContext(NodeIdContext,0);
	};

	cOccurrences() {
	    return this.getTypedRuleContext(COccurrencesContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	cInlinePrimitiveObject() {
	    return this.getTypedRuleContext(CInlinePrimitiveObjectContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCRegularPrimitiveObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCRegularPrimitiveObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCRegularPrimitiveObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArchetypeSlotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_archetypeSlot;
    }

	SYM_ALLOW_ARCHETYPE() {
	    return this.getToken(AqlParser.SYM_ALLOW_ARCHETYPE, 0);
	};

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	nodeId() {
	    return this.getTypedRuleContext(NodeIdContext,0);
	};

	SYM_CLOSED() {
	    return this.getToken(AqlParser.SYM_CLOSED, 0);
	};

	cOccurrences() {
	    return this.getTypedRuleContext(COccurrencesContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	cIncludes() {
	    return this.getTypedRuleContext(CIncludesContext,0);
	};

	cExcludes() {
	    return this.getTypedRuleContext(CExcludesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArchetypeSlot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArchetypeSlot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArchetypeSlot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CIncludesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cIncludes;
    }

	SYM_INCLUDE() {
	    return this.getToken(AqlParser.SYM_INCLUDE, 0);
	};

	archetypeIdConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArchetypeIdConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ArchetypeIdConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCIncludes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCIncludes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCIncludes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CExcludesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cExcludes;
    }

	SYM_EXCLUDE() {
	    return this.getToken(AqlParser.SYM_EXCLUDE, 0);
	};

	archetypeIdConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArchetypeIdConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ArchetypeIdConstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCExcludes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCExcludes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCExcludes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArchetypeIdConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_archetypeIdConstraint;
    }

	archetypeIdPath() {
	    return this.getTypedRuleContext(ArchetypeIdPathContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	DELIMITED_REGEX() {
	    return this.getToken(AqlParser.DELIMITED_REGEX, 0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArchetypeIdConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArchetypeIdConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArchetypeIdConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArchetypeIdPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_archetypeIdPath;
    }

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	SYM_SLASH() {
	    return this.getToken(AqlParser.SYM_SLASH, 0);
	};

	adlPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdlPathContext);
	    } else {
	        return this.getTypedRuleContext(AdlPathContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArchetypeIdPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArchetypeIdPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArchetypeIdPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CExistenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cExistence;
    }

	SYM_EXISTENCE() {
	    return this.getToken(AqlParser.SYM_EXISTENCE, 0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	existence() {
	    return this.getTypedRuleContext(ExistenceContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCExistence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCExistence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCExistence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExistenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_existence;
    }

	INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.INTEGER);
	    } else {
	        return this.getToken(AqlParser.INTEGER, i);
	    }
	};


	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterExistence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitExistence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitExistence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CCardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cCardinality;
    }

	SYM_CARDINALITY() {
	    return this.getToken(AqlParser.SYM_CARDINALITY, 0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	cardinality() {
	    return this.getTypedRuleContext(CardinalityContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCCardinality(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCCardinality(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cardinality;
    }

	multiplicity() {
	    return this.getTypedRuleContext(MultiplicityContext,0);
	};

	multiplicityMod = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicityModContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicityModContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCardinality(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCardinality(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class COccurrencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cOccurrences;
    }

	SYM_OCCURRENCES() {
	    return this.getToken(AqlParser.SYM_OCCURRENCES, 0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	multiplicity() {
	    return this.getTypedRuleContext(MultiplicityContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCOccurrences(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCOccurrences(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCOccurrences(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiplicityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_multiplicity;
    }

	INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.INTEGER);
	    } else {
	        return this.getToken(AqlParser.INTEGER, i);
	    }
	};


	SYM_ASTERISK() {
	    return this.getToken(AqlParser.SYM_ASTERISK, 0);
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterMultiplicity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitMultiplicity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitMultiplicity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiplicityModContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_multiplicityMod;
    }

	orderingMod() {
	    return this.getTypedRuleContext(OrderingModContext,0);
	};

	uniqueMod() {
	    return this.getTypedRuleContext(UniqueModContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterMultiplicityMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitMultiplicityMod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitMultiplicityMod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderingModContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_orderingMod;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	SYM_ORDERED() {
	    return this.getToken(AqlParser.SYM_ORDERED, 0);
	};

	SYM_UNORDERED() {
	    return this.getToken(AqlParser.SYM_UNORDERED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOrderingMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOrderingMod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOrderingMod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UniqueModContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_uniqueMod;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	SYM_UNIQUE() {
	    return this.getToken(AqlParser.SYM_UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterUniqueMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitUniqueMod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitUniqueMod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class COrdinalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cOrdinal;
    }

	ordinalTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrdinalTermContext);
	    } else {
	        return this.getTypedRuleContext(OrdinalTermContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	ordinalValue() {
	    return this.getTypedRuleContext(OrdinalValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCOrdinal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCOrdinal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCOrdinal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrdinalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_ordinalValue;
    }

	integerValue() {
	    return this.getTypedRuleContext(IntegerValueContext,0);
	};

	realValue() {
	    return this.getTypedRuleContext(RealValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOrdinalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOrdinalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOrdinalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrdinalTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_ordinalTerm;
    }

	ordinalValue() {
	    return this.getTypedRuleContext(OrdinalValueContext,0);
	};

	SYM_IVL_DELIM() {
	    return this.getToken(AqlParser.SYM_IVL_DELIM, 0);
	};

	cTerminologyCode() {
	    return this.getTypedRuleContext(CTerminologyCodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOrdinalTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOrdinalTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOrdinalTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainSpecificExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_domainSpecificExtension;
    }

	ODIN14_BLOCK_START() {
	    return this.getToken(AqlParser.ODIN14_BLOCK_START, 0);
	};

	ODIN14_BLOCK_LINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.ODIN14_BLOCK_LINE);
	    } else {
	        return this.getToken(AqlParser.ODIN14_BLOCK_LINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDomainSpecificExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDomainSpecificExtension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDomainSpecificExtension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RmTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_rmTypeId;
    }

	UC_ID() {
	    return this.getToken(AqlParser.UC_ID, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	rmTypeId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RmTypeIdContext);
	    } else {
	        return this.getTypedRuleContext(RmTypeIdContext,i);
	    }
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRmTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRmTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRmTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RmAttributeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_rmAttributeId;
    }

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRmAttributeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRmAttributeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRmAttributeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CObjectMatcherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cObjectMatcher;
    }

	cComplexObjectMatcher() {
	    return this.getTypedRuleContext(CComplexObjectMatcherContext,0);
	};

	cInlinePrimitiveObject() {
	    return this.getTypedRuleContext(CInlinePrimitiveObjectContext,0);
	};

	domainSpecificExtension() {
	    return this.getTypedRuleContext(DomainSpecificExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCObjectMatcher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCObjectMatcher(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCObjectMatcher(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CComplexObjectMatcherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cComplexObjectMatcher;
    }

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	nodeId() {
	    return this.getTypedRuleContext(NodeIdContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	cComplexObjectMatcherDef() {
	    return this.getTypedRuleContext(CComplexObjectMatcherDefContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCComplexObjectMatcher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCComplexObjectMatcher(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCComplexObjectMatcher(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CComplexObjectMatcherDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cComplexObjectMatcherDef;
    }

	cAttributeMatcher = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CAttributeMatcherContext);
	    } else {
	        return this.getTypedRuleContext(CAttributeMatcherContext,i);
	    }
	};

	SYM_ASTERISK() {
	    return this.getToken(AqlParser.SYM_ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCComplexObjectMatcherDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCComplexObjectMatcherDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCComplexObjectMatcherDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CAttributeMatcherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cAttributeMatcher;
    }

	rmAttributeId() {
	    return this.getTypedRuleContext(RmAttributeIdContext,0);
	};

	SYM_MATCHES() {
	    return this.getToken(AqlParser.SYM_MATCHES, 0);
	};

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	cAttributeMatcherDef() {
	    return this.getTypedRuleContext(CAttributeMatcherDefContext,0);
	};

	cInlinePrimitiveObject() {
	    return this.getTypedRuleContext(CInlinePrimitiveObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCAttributeMatcher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCAttributeMatcher(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCAttributeMatcher(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CAttributeMatcherDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cAttributeMatcherDef;
    }

	cRegularObjectMatcher = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CRegularObjectMatcherContext);
	    } else {
	        return this.getTypedRuleContext(CRegularObjectMatcherContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCAttributeMatcherDef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCAttributeMatcherDef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCAttributeMatcherDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CRegularObjectMatcherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cRegularObjectMatcher;
    }

	cComplexObjectMatcher() {
	    return this.getTypedRuleContext(CComplexObjectMatcherContext,0);
	};

	cRegularPrimitiveObject() {
	    return this.getTypedRuleContext(CRegularPrimitiveObjectContext,0);
	};

	cOrdinal() {
	    return this.getTypedRuleContext(COrdinalContext,0);
	};

	domainSpecificExtension() {
	    return this.getTypedRuleContext(DomainSpecificExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCRegularObjectMatcher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCRegularObjectMatcher(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCRegularObjectMatcher(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CTerminologyCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cTerminologyCode;
    }

	terminologyLocalCode() {
	    return this.getTypedRuleContext(TerminologyLocalCodeContext,0);
	};

	valueSetCode() {
	    return this.getTypedRuleContext(ValueSetCodeContext,0);
	};

	cLocalTermCode() {
	    return this.getTypedRuleContext(CLocalTermCodeContext,0);
	};

	cExternalTermCode() {
	    return this.getTypedRuleContext(CExternalTermCodeContext,0);
	};

	QUALIFIED_TERM_CODE_REF() {
	    return this.getToken(AqlParser.QUALIFIED_TERM_CODE_REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCTerminologyCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCTerminologyCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCTerminologyCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TerminologyLocalCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_terminologyLocalCode;
    }

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	adl14_at_code() {
	    return this.getTypedRuleContext(Adl14_at_codeContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTerminologyLocalCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTerminologyLocalCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTerminologyLocalCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueSetCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_valueSetCode;
    }

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	adl14_ac_code() {
	    return this.getTypedRuleContext(Adl14_ac_codeContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	termCodeDefault() {
	    return this.getTypedRuleContext(TermCodeDefaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterValueSetCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitValueSetCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitValueSetCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermCodeDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_termCodeDefault;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	adl14_at_code() {
	    return this.getTypedRuleContext(Adl14_at_codeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTermCodeDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTermCodeDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTermCodeDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CLocalTermCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cLocalTermCode;
    }

	C_LOCAL_TERM_CODE_START() {
	    return this.getToken(AqlParser.C_LOCAL_TERM_CODE_START, 0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	localCodesList() {
	    return this.getTypedRuleContext(LocalCodesListContext,0);
	};

	termCodeDefault() {
	    return this.getTypedRuleContext(TermCodeDefaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCLocalTermCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCLocalTermCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCLocalTermCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalCodesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_localCodesList;
    }

	adl14_at_code() {
	    return this.getTypedRuleContext(Adl14_at_codeContext,0);
	};

	termCodeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermCodeItemContext);
	    } else {
	        return this.getTypedRuleContext(TermCodeItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterLocalCodesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitLocalCodesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitLocalCodesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermCodeItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_termCodeItem;
    }

	SYM_COMMA() {
	    return this.getToken(AqlParser.SYM_COMMA, 0);
	};

	adl14_at_code() {
	    return this.getTypedRuleContext(Adl14_at_codeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTermCodeItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTermCodeItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTermCodeItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CExternalTermCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cExternalTermCode;
    }

	C_EXTERNAL_TERM_CODE_START() {
	    return this.getToken(AqlParser.C_EXTERNAL_TERM_CODE_START, 0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	externalCodesList() {
	    return this.getTypedRuleContext(ExternalCodesListContext,0);
	};

	externalTermCodeDefault() {
	    return this.getTypedRuleContext(ExternalTermCodeDefaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCExternalTermCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCExternalTermCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCExternalTermCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternalCodesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_externalCodesList;
    }

	C_EXTERNAL_TERM_CODE_STRING() {
	    return this.getToken(AqlParser.C_EXTERNAL_TERM_CODE_STRING, 0);
	};

	externalTermCodeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExternalTermCodeItemContext);
	    } else {
	        return this.getTypedRuleContext(ExternalTermCodeItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterExternalCodesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitExternalCodesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitExternalCodesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternalTermCodeItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_externalTermCodeItem;
    }

	SYM_COMMA() {
	    return this.getToken(AqlParser.SYM_COMMA, 0);
	};

	C_EXTERNAL_TERM_CODE_STRING() {
	    return this.getToken(AqlParser.C_EXTERNAL_TERM_CODE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterExternalTermCodeItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitExternalTermCodeItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitExternalTermCodeItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExternalTermCodeDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_externalTermCodeDefault;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	C_EXTERNAL_TERM_CODE_STRING() {
	    return this.getToken(AqlParser.C_EXTERNAL_TERM_CODE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterExternalTermCodeDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitExternalTermCodeDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitExternalTermCodeDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Adl14_at_codeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_adl14_at_code;
    }

	ADL14_AT_CODE() {
	    return this.getToken(AqlParser.ADL14_AT_CODE, 0);
	};

	AT_CODE() {
	    return this.getToken(AqlParser.AT_CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAdl14_at_code(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAdl14_at_code(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAdl14_at_code(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Adl14_ac_codeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_adl14_ac_code;
    }

	ADL14_AC_CODE() {
	    return this.getToken(AqlParser.ADL14_AC_CODE, 0);
	};

	AC_CODE() {
	    return this.getToken(AqlParser.AC_CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAdl14_ac_code(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAdl14_ac_code(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAdl14_ac_code(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CInlinePrimitiveObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cInlinePrimitiveObject;
    }

	cInlineOrderedObject() {
	    return this.getTypedRuleContext(CInlineOrderedObjectContext,0);
	};

	cString() {
	    return this.getTypedRuleContext(CStringContext,0);
	};

	cTerminologyCode() {
	    return this.getTypedRuleContext(CTerminologyCodeContext,0);
	};

	cBoolean() {
	    return this.getTypedRuleContext(CBooleanContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCInlinePrimitiveObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCInlinePrimitiveObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCInlinePrimitiveObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CInlineOrderedObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cInlineOrderedObject;
    }

	cInteger() {
	    return this.getTypedRuleContext(CIntegerContext,0);
	};

	cReal() {
	    return this.getTypedRuleContext(CRealContext,0);
	};

	cInlineDTemporalObject() {
	    return this.getTypedRuleContext(CInlineDTemporalObjectContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCInlineOrderedObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCInlineOrderedObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCInlineOrderedObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CInlineDTemporalObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cInlineDTemporalObject;
    }

	cDate() {
	    return this.getTypedRuleContext(CDateContext,0);
	};

	cTime() {
	    return this.getTypedRuleContext(CTimeContext,0);
	};

	cDateTime() {
	    return this.getTypedRuleContext(CDateTimeContext,0);
	};

	cDuration() {
	    return this.getTypedRuleContext(CDurationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCInlineDTemporalObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCInlineDTemporalObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCInlineDTemporalObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CBooleanContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cBoolean;
    }

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	booleanValues() {
	    return this.getTypedRuleContext(BooleanValuesContext,0);
	};

	assumedBooleanValue() {
	    return this.getTypedRuleContext(AssumedBooleanValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCBoolean(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCBoolean(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCBoolean(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedBooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedBooleanValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedBooleanValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedBooleanValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CIntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cInteger;
    }

	integerValue() {
	    return this.getTypedRuleContext(IntegerValueContext,0);
	};

	integerValues() {
	    return this.getTypedRuleContext(IntegerValuesContext,0);
	};

	integerInterval() {
	    return this.getTypedRuleContext(IntegerIntervalContext,0);
	};

	integerIntervals() {
	    return this.getTypedRuleContext(IntegerIntervalsContext,0);
	};

	assumedIntegerValue() {
	    return this.getTypedRuleContext(AssumedIntegerValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCInteger(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCInteger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedIntegerValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedIntegerValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	integerValue() {
	    return this.getTypedRuleContext(IntegerValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedIntegerValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedIntegerValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedIntegerValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CRealContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cReal;
    }

	realValue() {
	    return this.getTypedRuleContext(RealValueContext,0);
	};

	realValues() {
	    return this.getTypedRuleContext(RealValuesContext,0);
	};

	realInterval() {
	    return this.getTypedRuleContext(RealIntervalContext,0);
	};

	realIntervals() {
	    return this.getTypedRuleContext(RealIntervalsContext,0);
	};

	assumedRealValue() {
	    return this.getTypedRuleContext(AssumedRealValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCReal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCReal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCReal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedRealValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedRealValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	realValue() {
	    return this.getTypedRuleContext(RealValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedRealValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedRealValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedRealValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CDateTimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cDateTime;
    }

	DATE_TIME_CONSTRAINT_PATTERN() {
	    return this.getToken(AqlParser.DATE_TIME_CONSTRAINT_PATTERN, 0);
	};

	dateTimeValue() {
	    return this.getTypedRuleContext(DateTimeValueContext,0);
	};

	dateTimeValues() {
	    return this.getTypedRuleContext(DateTimeValuesContext,0);
	};

	dateTimeInterval() {
	    return this.getTypedRuleContext(DateTimeIntervalContext,0);
	};

	dateTimeIntervals() {
	    return this.getTypedRuleContext(DateTimeIntervalsContext,0);
	};

	assumedDateTimeValue() {
	    return this.getTypedRuleContext(AssumedDateTimeValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCDateTime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCDateTime(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCDateTime(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedDateTimeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedDateTimeValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	dateTimeValue() {
	    return this.getTypedRuleContext(DateTimeValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedDateTimeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedDateTimeValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedDateTimeValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CDateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cDate;
    }

	DATE_CONSTRAINT_PATTERN() {
	    return this.getToken(AqlParser.DATE_CONSTRAINT_PATTERN, 0);
	};

	dateValue() {
	    return this.getTypedRuleContext(DateValueContext,0);
	};

	dateValues() {
	    return this.getTypedRuleContext(DateValuesContext,0);
	};

	dateInterval() {
	    return this.getTypedRuleContext(DateIntervalContext,0);
	};

	dateIntervals() {
	    return this.getTypedRuleContext(DateIntervalsContext,0);
	};

	assumedDateValue() {
	    return this.getTypedRuleContext(AssumedDateValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCDate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCDate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCDate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedDateValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedDateValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	dateValue() {
	    return this.getTypedRuleContext(DateValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedDateValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedDateValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedDateValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CTimeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cTime;
    }

	TIME_CONSTRAINT_PATTERN() {
	    return this.getToken(AqlParser.TIME_CONSTRAINT_PATTERN, 0);
	};

	timeValue() {
	    return this.getTypedRuleContext(TimeValueContext,0);
	};

	timeValues() {
	    return this.getTypedRuleContext(TimeValuesContext,0);
	};

	timeInterval() {
	    return this.getTypedRuleContext(TimeIntervalContext,0);
	};

	timeIntervals() {
	    return this.getTypedRuleContext(TimeIntervalsContext,0);
	};

	assumedTimeValue() {
	    return this.getTypedRuleContext(AssumedTimeValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCTime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCTime(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCTime(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedTimeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedTimeValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	timeValue() {
	    return this.getTypedRuleContext(TimeValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedTimeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedTimeValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedTimeValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CDurationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cDuration;
    }

	DURATION_CONSTRAINT_PATTERN() {
	    return this.getToken(AqlParser.DURATION_CONSTRAINT_PATTERN, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	durationValues() {
	    return this.getTypedRuleContext(DurationValuesContext,0);
	};

	durationInterval() {
	    return this.getTypedRuleContext(DurationIntervalContext,0);
	};

	durationIntervals() {
	    return this.getTypedRuleContext(DurationIntervalsContext,0);
	};

	assumedDurationValue() {
	    return this.getTypedRuleContext(AssumedDurationValueContext,0);
	};

	SYM_SLASH() {
	    return this.getToken(AqlParser.SYM_SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCDuration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCDuration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCDuration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedDurationValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedDurationValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedDurationValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedDurationValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedDurationValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_cString;
    }

	stringValue() {
	    return this.getTypedRuleContext(StringValueContext,0);
	};

	stringValues() {
	    return this.getTypedRuleContext(StringValuesContext,0);
	};

	DELIMITED_REGEX() {
	    return this.getToken(AqlParser.DELIMITED_REGEX, 0);
	};

	assumedStringValue() {
	    return this.getTypedRuleContext(AssumedStringValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssumedStringValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_assumedStringValue;
    }

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	stringValue() {
	    return this.getTypedRuleContext(StringValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAssumedStringValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAssumedStringValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAssumedStringValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveObject;
    }

	primitiveValue() {
	    return this.getTypedRuleContext(PrimitiveValueContext,0);
	};

	primitiveList() {
	    return this.getTypedRuleContext(PrimitiveListContext,0);
	};

	primitiveArray() {
	    return this.getTypedRuleContext(PrimitiveArrayContext,0);
	};

	primitiveSet() {
	    return this.getTypedRuleContext(PrimitiveSetContext,0);
	};

	primitiveInterval() {
	    return this.getTypedRuleContext(PrimitiveIntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveValue;
    }

	stringValue() {
	    return this.getTypedRuleContext(StringValueContext,0);
	};

	integerValue() {
	    return this.getTypedRuleContext(IntegerValueContext,0);
	};

	realValue() {
	    return this.getTypedRuleContext(RealValueContext,0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	characterValue() {
	    return this.getTypedRuleContext(CharacterValueContext,0);
	};

	termCodeValue() {
	    return this.getTypedRuleContext(TermCodeValueContext,0);
	};

	dateValue() {
	    return this.getTypedRuleContext(DateValueContext,0);
	};

	timeValue() {
	    return this.getTypedRuleContext(TimeValueContext,0);
	};

	dateTimeValue() {
	    return this.getTypedRuleContext(DateTimeValueContext,0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveList;
    }

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	primitiveValues() {
	    return this.getTypedRuleContext(PrimitiveValuesContext,0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveArray;
    }

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	primitiveValues() {
	    return this.getTypedRuleContext(PrimitiveValuesContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveArray(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveArray(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveSet;
    }

	SYM_LCURLY() {
	    return this.getToken(AqlParser.SYM_LCURLY, 0);
	};

	primitiveValues() {
	    return this.getTypedRuleContext(PrimitiveValuesContext,0);
	};

	SYM_RCURLY() {
	    return this.getToken(AqlParser.SYM_RCURLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveValues;
    }

	stringValues() {
	    return this.getTypedRuleContext(StringValuesContext,0);
	};

	integerValues() {
	    return this.getTypedRuleContext(IntegerValuesContext,0);
	};

	realValues() {
	    return this.getTypedRuleContext(RealValuesContext,0);
	};

	booleanValues() {
	    return this.getTypedRuleContext(BooleanValuesContext,0);
	};

	characterValues() {
	    return this.getTypedRuleContext(CharacterValuesContext,0);
	};

	termCodeListValue() {
	    return this.getTypedRuleContext(TermCodeListValueContext,0);
	};

	dateValues() {
	    return this.getTypedRuleContext(DateValuesContext,0);
	};

	timeValues() {
	    return this.getTypedRuleContext(TimeValuesContext,0);
	};

	dateTimeValues() {
	    return this.getTypedRuleContext(DateTimeValuesContext,0);
	};

	durationValues() {
	    return this.getTypedRuleContext(DurationValuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveInterval;
    }

	integerInterval() {
	    return this.getTypedRuleContext(IntegerIntervalContext,0);
	};

	realInterval() {
	    return this.getTypedRuleContext(RealIntervalContext,0);
	};

	dateInterval() {
	    return this.getTypedRuleContext(DateIntervalContext,0);
	};

	timeInterval() {
	    return this.getTypedRuleContext(TimeIntervalContext,0);
	};

	dateTimeInterval() {
	    return this.getTypedRuleContext(DateTimeIntervalContext,0);
	};

	durationInterval() {
	    return this.getTypedRuleContext(DurationIntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_stringValue;
    }

	STRING() {
	    return this.getToken(AqlParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterStringValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitStringValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitStringValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_stringValues;
    }

	stringValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringValueContext);
	    } else {
	        return this.getTypedRuleContext(StringValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterStringValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitStringValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitStringValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerValue;
    }

	INTEGER() {
	    return this.getToken(AqlParser.INTEGER, 0);
	};

	SCI_INTEGER() {
	    return this.getToken(AqlParser.SCI_INTEGER, 0);
	};

	SYM_PLUS() {
	    return this.getToken(AqlParser.SYM_PLUS, 0);
	};

	SYM_MINUS() {
	    return this.getToken(AqlParser.SYM_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerValues;
    }

	integerValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerValueContext);
	    } else {
	        return this.getTypedRuleContext(IntegerValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerInterval;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	integerIntervalRange() {
	    return this.getTypedRuleContext(IntegerIntervalRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerIntervalRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerIntervalRange;
    }

	integerValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerValueContext);
	    } else {
	        return this.getTypedRuleContext(IntegerValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerIntervalRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerIntervalRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerIntervalRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerIntervalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerIntervals;
    }

	integerInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerIntervalContext);
	    } else {
	        return this.getTypedRuleContext(IntegerIntervalContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerIntervals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerIntervals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerIntervals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realValue;
    }

	REAL() {
	    return this.getToken(AqlParser.REAL, 0);
	};

	SCI_REAL() {
	    return this.getToken(AqlParser.SCI_REAL, 0);
	};

	REAL_PERCENT() {
	    return this.getToken(AqlParser.REAL_PERCENT, 0);
	};

	SYM_PLUS() {
	    return this.getToken(AqlParser.SYM_PLUS, 0);
	};

	SYM_MINUS() {
	    return this.getToken(AqlParser.SYM_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realValues;
    }

	realValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RealValueContext);
	    } else {
	        return this.getTypedRuleContext(RealValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realInterval;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	realIntervalRange() {
	    return this.getTypedRuleContext(RealIntervalRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealIntervalRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realIntervalRange;
    }

	realValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RealValueContext);
	    } else {
	        return this.getTypedRuleContext(RealValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealIntervalRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealIntervalRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealIntervalRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealIntervalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realIntervals;
    }

	realInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RealIntervalContext);
	    } else {
	        return this.getTypedRuleContext(RealIntervalContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealIntervals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealIntervals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealIntervals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_booleanValue;
    }

	SYM_TRUE() {
	    return this.getToken(AqlParser.SYM_TRUE, 0);
	};

	SYM_FALSE() {
	    return this.getToken(AqlParser.SYM_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitBooleanValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitBooleanValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_booleanValues;
    }

	booleanValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanValueContext);
	    } else {
	        return this.getTypedRuleContext(BooleanValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterBooleanValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitBooleanValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitBooleanValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacterValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_characterValue;
    }

	CHARACTER() {
	    return this.getToken(AqlParser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCharacterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCharacterValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCharacterValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacterValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_characterValues;
    }

	characterValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacterValueContext);
	    } else {
	        return this.getTypedRuleContext(CharacterValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCharacterValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCharacterValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCharacterValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateValue;
    }

	ISO8601_DATE_AUGMENTED() {
	    return this.getToken(AqlParser.ISO8601_DATE_AUGMENTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateValues;
    }

	dateValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateValueContext);
	    } else {
	        return this.getTypedRuleContext(DateValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateInterval;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	dateIntervalRange() {
	    return this.getTypedRuleContext(DateIntervalRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateIntervalRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateIntervalRange;
    }

	dateValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateValueContext);
	    } else {
	        return this.getTypedRuleContext(DateValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateIntervalRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateIntervalRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateIntervalRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateIntervalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateIntervals;
    }

	dateInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateIntervalContext);
	    } else {
	        return this.getTypedRuleContext(DateIntervalContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateIntervals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateIntervals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateIntervals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeValue;
    }

	ISO8601_TIME_AUGMENTED() {
	    return this.getToken(AqlParser.ISO8601_TIME_AUGMENTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeValues;
    }

	timeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeValueContext);
	    } else {
	        return this.getTypedRuleContext(TimeValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeInterval;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	timeIntervalRange() {
	    return this.getTypedRuleContext(TimeIntervalRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeIntervalRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeIntervalRange;
    }

	timeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeValueContext);
	    } else {
	        return this.getTypedRuleContext(TimeValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeIntervalRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeIntervalRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeIntervalRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeIntervalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeIntervals;
    }

	timeInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeIntervalContext);
	    } else {
	        return this.getTypedRuleContext(TimeIntervalContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeIntervals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeIntervals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeIntervals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeValue;
    }

	ISO8601_DATE_TIME_AUGMENTED() {
	    return this.getToken(AqlParser.ISO8601_DATE_TIME_AUGMENTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeValues;
    }

	dateTimeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeValueContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeInterval;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	dateTimeIntervalRange() {
	    return this.getTypedRuleContext(DateTimeIntervalRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeIntervalRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeIntervalRange;
    }

	dateTimeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeValueContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeIntervalRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeIntervalRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeIntervalRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeIntervalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeIntervals;
    }

	dateTimeInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeIntervalContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeIntervalContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeIntervals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeIntervals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeIntervals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationValue;
    }

	ISO8601_DURATION() {
	    return this.getToken(AqlParser.ISO8601_DURATION, 0);
	};

	SYM_PLUS() {
	    return this.getToken(AqlParser.SYM_PLUS, 0);
	};

	SYM_MINUS() {
	    return this.getToken(AqlParser.SYM_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationValues;
    }

	durationValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationValueContext);
	    } else {
	        return this.getTypedRuleContext(DurationValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationInterval;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	durationIntervalRange() {
	    return this.getTypedRuleContext(DurationIntervalRangeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationIntervalRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationIntervalRange;
    }

	durationValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationValueContext);
	    } else {
	        return this.getTypedRuleContext(DurationValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationIntervalRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationIntervalRange(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationIntervalRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationIntervalsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationIntervals;
    }

	durationInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationIntervalContext);
	    } else {
	        return this.getTypedRuleContext(DurationIntervalContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationIntervals(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationIntervals(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationIntervals(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermCodeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_termCodeValue;
    }

	QUALIFIED_TERM_CODE_ID() {
	    return this.getToken(AqlParser.QUALIFIED_TERM_CODE_ID, 0);
	};

	LOCAL_TERM_CODE_ID() {
	    return this.getToken(AqlParser.LOCAL_TERM_CODE_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTermCodeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTermCodeValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTermCodeValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermCodeListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_termCodeListValue;
    }

	termCodeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermCodeValueContext);
	    } else {
	        return this.getTypedRuleContext(TermCodeValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTermCodeListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTermCodeListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTermCodeListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_relop;
    }

	SYM_LE() {
	    return this.getToken(AqlParser.SYM_LE, 0);
	};

	SYM_GE() {
	    return this.getToken(AqlParser.SYM_GE, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRelop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRelop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRelop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_adlPath;
    }

	SYM_SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_SLASH);
	    } else {
	        return this.getToken(AqlParser.SYM_SLASH, i);
	    }
	};


	adlPathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdlPathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(AdlPathSegmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAdlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAdlPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAdlPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdlPathSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_adlPathSegment;
    }

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	adlPathPredicate() {
	    return this.getTypedRuleContext(AdlPathPredicateContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAdlPathSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAdlPathSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAdlPathSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdlPathPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_adlPathPredicate;
    }

	archetypeIdPredicate() {
	    return this.getTypedRuleContext(ArchetypeIdPredicateContext,0);
	};

	idCode() {
	    return this.getTypedRuleContext(IdCodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAdlPathPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAdlPathPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAdlPathPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArchetypeIdPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_archetypeIdPredicate;
    }

	ARCHETYPE_REF() {
	    return this.getToken(AqlParser.ARCHETYPE_REF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterArchetypeIdPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitArchetypeIdPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitArchetypeIdPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdCodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_idCode;
    }

	AT_CODE() {
	    return this.getToken(AqlParser.AT_CODE, 0);
	};

	ADL14_AT_CODE() {
	    return this.getToken(AqlParser.ADL14_AT_CODE, 0);
	};

	ID_CODE() {
	    return this.getToken(AqlParser.ID_CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIdCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIdCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIdCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AugmentedAdlPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_augmentedAdlPath;
        this.varName = null;
    }

	adlPath() {
	    return this.getTypedRuleContext(AdlPathContext,0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	modelSubPath() {
	    return this.getTypedRuleContext(ModelSubPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterAugmentedAdlPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitAugmentedAdlPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitAugmentedAdlPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelPath;
        this.varName = null;
    }

	modelSubPath() {
	    return this.getTypedRuleContext(ModelSubPathContext,0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelSubPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelSubPath;
    }

	modelPathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModelPathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(ModelPathSegmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelSubPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelSubPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelSubPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelPathSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_modelPathSegment;
        this.attributeId = null;
    }

	SYM_SLASH() {
	    return this.getToken(AqlParser.SYM_SLASH, 0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterModelPathSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitModelPathSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitModelPathSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinObject;
    }

	odinObjectValueBlock() {
	    return this.getTypedRuleContext(OdinObjectValueBlockContext,0);
	};

	EOF() {
	    return this.getToken(AqlParser.EOF, 0);
	};

	odinAttrVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OdinAttrValContext);
	    } else {
	        return this.getTypedRuleContext(OdinAttrValContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinAttrValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinAttrVal;
    }

	odinAttrName() {
	    return this.getTypedRuleContext(OdinAttrNameContext,0);
	};

	SYM_EQ() {
	    return this.getToken(AqlParser.SYM_EQ, 0);
	};

	odinObjectBlock() {
	    return this.getTypedRuleContext(OdinObjectBlockContext,0);
	};

	SYM_SEMI_COLON() {
	    return this.getToken(AqlParser.SYM_SEMI_COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinAttrVal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinAttrVal(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinAttrVal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinAttrNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinAttrName;
    }

	UC_ID() {
	    return this.getToken(AqlParser.UC_ID, 0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinAttrName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinAttrName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinAttrName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinObjectBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinObjectBlock;
    }

	odinObjectValueBlock() {
	    return this.getTypedRuleContext(OdinObjectValueBlockContext,0);
	};

	odinObjectReferenceBlock() {
	    return this.getTypedRuleContext(OdinObjectReferenceBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinObjectBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinObjectBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinObjectBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinObjectValueBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinObjectValueBlock;
    }

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	rmTypeSpec() {
	    return this.getTypedRuleContext(RmTypeSpecContext,0);
	};

	primitiveObject() {
	    return this.getTypedRuleContext(PrimitiveObjectContext,0);
	};

	ODIN_URI() {
	    return this.getToken(AqlParser.ODIN_URI, 0);
	};

	odinAttrVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OdinAttrValContext);
	    } else {
	        return this.getTypedRuleContext(OdinAttrValContext,i);
	    }
	};

	odinKeyedObject = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OdinKeyedObjectContext);
	    } else {
	        return this.getTypedRuleContext(OdinKeyedObjectContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinObjectValueBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinObjectValueBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinObjectValueBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RmTypeSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_rmTypeSpec;
    }

	SYM_LPAREN() {
	    return this.getToken(AqlParser.SYM_LPAREN, 0);
	};

	rmTypeId() {
	    return this.getTypedRuleContext(RmTypeIdContext,0);
	};

	SYM_RPAREN() {
	    return this.getToken(AqlParser.SYM_RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRmTypeSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRmTypeSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRmTypeSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinKeyedObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinKeyedObject;
    }

	odinKeySpec() {
	    return this.getTypedRuleContext(OdinKeySpecContext,0);
	};

	SYM_EQ() {
	    return this.getToken(AqlParser.SYM_EQ, 0);
	};

	odinObjectBlock() {
	    return this.getTypedRuleContext(OdinObjectBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinKeyedObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinKeyedObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinKeyedObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinKeySpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinKeySpec;
    }

	SYM_LBRACKET() {
	    return this.getToken(AqlParser.SYM_LBRACKET, 0);
	};

	primitiveValue() {
	    return this.getTypedRuleContext(PrimitiveValueContext,0);
	};

	SYM_RBRACKET() {
	    return this.getToken(AqlParser.SYM_RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinKeySpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinKeySpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinKeySpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinObjectReferenceBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinObjectReferenceBlock;
    }

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	odinPathList() {
	    return this.getTypedRuleContext(OdinPathListContext,0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinObjectReferenceBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinObjectReferenceBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinObjectReferenceBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinPathListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinPathList;
    }

	odinPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OdinPathContext);
	    } else {
	        return this.getTypedRuleContext(OdinPathContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinPathList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinPathList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinPathList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinPath;
    }

	odinKeySpec() {
	    return this.getTypedRuleContext(OdinKeySpecContext,0);
	};

	odinPathSegment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OdinPathSegmentContext);
	    } else {
	        return this.getTypedRuleContext(OdinPathSegmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OdinPathSegmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_odinPathSegment;
    }

	SYM_SLASH() {
	    return this.getToken(AqlParser.SYM_SLASH, 0);
	};

	LC_ID() {
	    return this.getToken(AqlParser.LC_ID, 0);
	};

	odinKeySpec() {
	    return this.getTypedRuleContext(OdinKeySpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterOdinPathSegment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitOdinPathSegment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitOdinPathSegment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveListValue;
    }

	stringListValue() {
	    return this.getTypedRuleContext(StringListValueContext,0);
	};

	integerListValue() {
	    return this.getTypedRuleContext(IntegerListValueContext,0);
	};

	realListValue() {
	    return this.getTypedRuleContext(RealListValueContext,0);
	};

	booleanListValue() {
	    return this.getTypedRuleContext(BooleanListValueContext,0);
	};

	characterListValue() {
	    return this.getTypedRuleContext(CharacterListValueContext,0);
	};

	termCodeListValue() {
	    return this.getTypedRuleContext(TermCodeListValueContext,0);
	};

	dateListValue() {
	    return this.getTypedRuleContext(DateListValueContext,0);
	};

	timeListValue() {
	    return this.getTypedRuleContext(TimeListValueContext,0);
	};

	dateTimeListValue() {
	    return this.getTypedRuleContext(DateTimeListValueContext,0);
	};

	durationListValue() {
	    return this.getTypedRuleContext(DurationListValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_primitiveIntervalValue;
    }

	integerIntervalValue() {
	    return this.getTypedRuleContext(IntegerIntervalValueContext,0);
	};

	realIntervalValue() {
	    return this.getTypedRuleContext(RealIntervalValueContext,0);
	};

	dateIntervalValue() {
	    return this.getTypedRuleContext(DateIntervalValueContext,0);
	};

	timeIntervalValue() {
	    return this.getTypedRuleContext(TimeIntervalValueContext,0);
	};

	dateTimeIntervalValue() {
	    return this.getTypedRuleContext(DateTimeIntervalValueContext,0);
	};

	durationIntervalValue() {
	    return this.getTypedRuleContext(DurationIntervalValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterPrimitiveIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitPrimitiveIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitPrimitiveIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_stringListValue;
    }

	stringValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringValueContext);
	    } else {
	        return this.getTypedRuleContext(StringValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterStringListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitStringListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitStringListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerListValue;
    }

	integerValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerValueContext);
	    } else {
	        return this.getTypedRuleContext(IntegerValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerIntervalValue;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	integerValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerValueContext);
	    } else {
	        return this.getTypedRuleContext(IntegerValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegerIntervalListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_integerIntervalListValue;
    }

	integerIntervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntegerIntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(IntegerIntervalValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterIntegerIntervalListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitIntegerIntervalListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitIntegerIntervalListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realListValue;
    }

	realValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RealValueContext);
	    } else {
	        return this.getTypedRuleContext(RealValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realIntervalValue;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	realValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RealValueContext);
	    } else {
	        return this.getTypedRuleContext(RealValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealIntervalListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_realIntervalListValue;
    }

	realIntervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RealIntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(RealIntervalValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterRealIntervalListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitRealIntervalListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitRealIntervalListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_booleanListValue;
    }

	booleanValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanValueContext);
	    } else {
	        return this.getTypedRuleContext(BooleanValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterBooleanListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitBooleanListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitBooleanListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacterListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_characterListValue;
    }

	characterValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacterValueContext);
	    } else {
	        return this.getTypedRuleContext(CharacterValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterCharacterListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitCharacterListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitCharacterListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateListValue;
    }

	dateValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateValueContext);
	    } else {
	        return this.getTypedRuleContext(DateValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateIntervalValue;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	dateValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateValueContext);
	    } else {
	        return this.getTypedRuleContext(DateValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateIntervalListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateIntervalListValue;
    }

	dateIntervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateIntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(DateIntervalValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateIntervalListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateIntervalListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateIntervalListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeListValue;
    }

	timeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeValueContext);
	    } else {
	        return this.getTypedRuleContext(TimeValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeIntervalValue;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	timeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeValueContext);
	    } else {
	        return this.getTypedRuleContext(TimeValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeIntervalListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_timeIntervalListValue;
    }

	timeIntervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeIntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(TimeIntervalValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterTimeIntervalListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitTimeIntervalListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitTimeIntervalListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeListValue;
    }

	dateTimeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeValueContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeIntervalValue;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	dateTimeValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeValueContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	durationValue() {
	    return this.getTypedRuleContext(DurationValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeIntervalListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_dateTimeIntervalListValue;
    }

	dateTimeIntervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateTimeIntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(DateTimeIntervalValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDateTimeIntervalListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDateTimeIntervalListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDateTimeIntervalListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationListValue;
    }

	durationValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationValueContext);
	    } else {
	        return this.getTypedRuleContext(DurationValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationIntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationIntervalValue;
    }

	SYM_IVL_DELIM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_IVL_DELIM);
	    } else {
	        return this.getToken(AqlParser.SYM_IVL_DELIM, i);
	    }
	};


	durationValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationValueContext);
	    } else {
	        return this.getTypedRuleContext(DurationValueContext,i);
	    }
	};

	SYM_IVL_SEP() {
	    return this.getToken(AqlParser.SYM_IVL_SEP, 0);
	};

	SYM_GT() {
	    return this.getToken(AqlParser.SYM_GT, 0);
	};

	SYM_LT() {
	    return this.getToken(AqlParser.SYM_LT, 0);
	};

	relop() {
	    return this.getTypedRuleContext(RelopContext,0);
	};

	SYM_PLUS_OR_MINUS() {
	    return this.getToken(AqlParser.SYM_PLUS_OR_MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationIntervalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationIntervalValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationIntervalListValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = AqlParser.RULE_durationIntervalListValue;
    }

	durationIntervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationIntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(DurationIntervalValueContext,i);
	    }
	};

	SYM_COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(AqlParser.SYM_COMMA);
	    } else {
	        return this.getToken(AqlParser.SYM_COMMA, i);
	    }
	};


	SYM_LIST_CONTINUE() {
	    return this.getToken(AqlParser.SYM_LIST_CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.enterDurationIntervalListValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof AqlParserListener ) {
	        listener.exitDurationIntervalListValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof AqlParserVisitor ) {
	        return visitor.visitDurationIntervalListValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




AqlParser.AqlQueryContext = AqlQueryContext; 
AqlParser.SelectClauseContext = SelectClauseContext; 
AqlParser.FromClauseContext = FromClauseContext; 
AqlParser.WhereClauseContext = WhereClauseContext; 
AqlParser.OrderByClauseContext = OrderByClauseContext; 
AqlParser.LimitClauseContext = LimitClauseContext; 
AqlParser.ResultTableContext = ResultTableContext; 
AqlParser.ColumnSpecContext = ColumnSpecContext; 
AqlParser.ColumnAliasContext = ColumnAliasContext; 
AqlParser.ColumnValueContext = ColumnValueContext; 
AqlParser.OrderByExprContext = OrderByExprContext; 
AqlParser.ModelTypeConstraintContext = ModelTypeConstraintContext; 
AqlParser.ModelTypeChainContext = ModelTypeChainContext; 
AqlParser.ModelTypeSubChainContext = ModelTypeSubChainContext; 
AqlParser.ModelTypeExprContext = ModelTypeExprContext; 
AqlParser.ModelTypeContext = ModelTypeContext; 
AqlParser.WhereExprContext = WhereExprContext; 
AqlParser.WhereBooleanLeafContext = WhereBooleanLeafContext; 
AqlParser.ComparisonOperandContext = ComparisonOperandContext; 
AqlParser.ValueContext = ValueContext; 
AqlParser.LikeOperandContext = LikeOperandContext; 
AqlParser.MatchesOperandContext = MatchesOperandContext; 
AqlParser.MatchesConstraintContext = MatchesConstraintContext; 
AqlParser.ArithmeticExprContext = ArithmeticExprContext; 
AqlParser.ArithmeticLeafContext = ArithmeticLeafContext; 
AqlParser.ArithmeticLiteralContext = ArithmeticLiteralContext; 
AqlParser.DataMatchPathContext = DataMatchPathContext; 
AqlParser.DataMatchPathSegmentContext = DataMatchPathSegmentContext; 
AqlParser.DataMatchPathPredicateContext = DataMatchPathPredicateContext; 
AqlParser.DataMatchPathValuePredicateContext = DataMatchPathValuePredicateContext; 
AqlParser.ModelPathComparatorValueContext = ModelPathComparatorValueContext; 
AqlParser.VersionPredicateContext = VersionPredicateContext; 
AqlParser.FunctionCallContext = FunctionCallContext; 
AqlParser.FunctionArgsContext = FunctionArgsContext; 
AqlParser.AggregateFunctionCallContext = AggregateFunctionCallContext; 
AqlParser.AggregateMathFunctionContext = AggregateMathFunctionContext; 
AqlParser.TerminologyFunctionCallContext = TerminologyFunctionCallContext; 
AqlParser.BuiltInFunctionContext = BuiltInFunctionContext; 
AqlParser.StringFunctionContext = StringFunctionContext; 
AqlParser.NumericFunctionContext = NumericFunctionContext; 
AqlParser.DateTimeFunctionContext = DateTimeFunctionContext; 
AqlParser.ComparisonOperatorContext = ComparisonOperatorContext; 
AqlParser.PrimitiveLiteralContext = PrimitiveLiteralContext; 
AqlParser.NumericLiteralContext = NumericLiteralContext; 
AqlParser.AqlDateTimeLiteralContext = AqlDateTimeLiteralContext; 
AqlParser.ModelSpecificPredicateShortcutContext = ModelSpecificPredicateShortcutContext; 
AqlParser.TopContext = TopContext; 
AqlParser.CComplexObjectContext = CComplexObjectContext; 
AqlParser.CComplexObjectDefContext = CComplexObjectDefContext; 
AqlParser.NodeIdContext = NodeIdContext; 
AqlParser.CAttributeContext = CAttributeContext; 
AqlParser.CAttributeDefContext = CAttributeDefContext; 
AqlParser.CRegularObjectContext = CRegularObjectContext; 
AqlParser.CArchetypeRootContext = CArchetypeRootContext; 
AqlParser.CComplexObjectProxyContext = CComplexObjectProxyContext; 
AqlParser.CRegularPrimitiveObjectContext = CRegularPrimitiveObjectContext; 
AqlParser.ArchetypeSlotContext = ArchetypeSlotContext; 
AqlParser.CIncludesContext = CIncludesContext; 
AqlParser.CExcludesContext = CExcludesContext; 
AqlParser.ArchetypeIdConstraintContext = ArchetypeIdConstraintContext; 
AqlParser.ArchetypeIdPathContext = ArchetypeIdPathContext; 
AqlParser.CExistenceContext = CExistenceContext; 
AqlParser.ExistenceContext = ExistenceContext; 
AqlParser.CCardinalityContext = CCardinalityContext; 
AqlParser.CardinalityContext = CardinalityContext; 
AqlParser.COccurrencesContext = COccurrencesContext; 
AqlParser.MultiplicityContext = MultiplicityContext; 
AqlParser.MultiplicityModContext = MultiplicityModContext; 
AqlParser.OrderingModContext = OrderingModContext; 
AqlParser.UniqueModContext = UniqueModContext; 
AqlParser.COrdinalContext = COrdinalContext; 
AqlParser.OrdinalValueContext = OrdinalValueContext; 
AqlParser.OrdinalTermContext = OrdinalTermContext; 
AqlParser.DomainSpecificExtensionContext = DomainSpecificExtensionContext; 
AqlParser.RmTypeIdContext = RmTypeIdContext; 
AqlParser.RmAttributeIdContext = RmAttributeIdContext; 
AqlParser.CObjectMatcherContext = CObjectMatcherContext; 
AqlParser.CComplexObjectMatcherContext = CComplexObjectMatcherContext; 
AqlParser.CComplexObjectMatcherDefContext = CComplexObjectMatcherDefContext; 
AqlParser.CAttributeMatcherContext = CAttributeMatcherContext; 
AqlParser.CAttributeMatcherDefContext = CAttributeMatcherDefContext; 
AqlParser.CRegularObjectMatcherContext = CRegularObjectMatcherContext; 
AqlParser.CTerminologyCodeContext = CTerminologyCodeContext; 
AqlParser.TerminologyLocalCodeContext = TerminologyLocalCodeContext; 
AqlParser.ValueSetCodeContext = ValueSetCodeContext; 
AqlParser.TermCodeDefaultContext = TermCodeDefaultContext; 
AqlParser.CLocalTermCodeContext = CLocalTermCodeContext; 
AqlParser.LocalCodesListContext = LocalCodesListContext; 
AqlParser.TermCodeItemContext = TermCodeItemContext; 
AqlParser.CExternalTermCodeContext = CExternalTermCodeContext; 
AqlParser.ExternalCodesListContext = ExternalCodesListContext; 
AqlParser.ExternalTermCodeItemContext = ExternalTermCodeItemContext; 
AqlParser.ExternalTermCodeDefaultContext = ExternalTermCodeDefaultContext; 
AqlParser.Adl14_at_codeContext = Adl14_at_codeContext; 
AqlParser.Adl14_ac_codeContext = Adl14_ac_codeContext; 
AqlParser.CInlinePrimitiveObjectContext = CInlinePrimitiveObjectContext; 
AqlParser.CInlineOrderedObjectContext = CInlineOrderedObjectContext; 
AqlParser.CInlineDTemporalObjectContext = CInlineDTemporalObjectContext; 
AqlParser.CBooleanContext = CBooleanContext; 
AqlParser.AssumedBooleanValueContext = AssumedBooleanValueContext; 
AqlParser.CIntegerContext = CIntegerContext; 
AqlParser.AssumedIntegerValueContext = AssumedIntegerValueContext; 
AqlParser.CRealContext = CRealContext; 
AqlParser.AssumedRealValueContext = AssumedRealValueContext; 
AqlParser.CDateTimeContext = CDateTimeContext; 
AqlParser.AssumedDateTimeValueContext = AssumedDateTimeValueContext; 
AqlParser.CDateContext = CDateContext; 
AqlParser.AssumedDateValueContext = AssumedDateValueContext; 
AqlParser.CTimeContext = CTimeContext; 
AqlParser.AssumedTimeValueContext = AssumedTimeValueContext; 
AqlParser.CDurationContext = CDurationContext; 
AqlParser.AssumedDurationValueContext = AssumedDurationValueContext; 
AqlParser.CStringContext = CStringContext; 
AqlParser.AssumedStringValueContext = AssumedStringValueContext; 
AqlParser.PrimitiveObjectContext = PrimitiveObjectContext; 
AqlParser.PrimitiveValueContext = PrimitiveValueContext; 
AqlParser.PrimitiveListContext = PrimitiveListContext; 
AqlParser.PrimitiveArrayContext = PrimitiveArrayContext; 
AqlParser.PrimitiveSetContext = PrimitiveSetContext; 
AqlParser.PrimitiveValuesContext = PrimitiveValuesContext; 
AqlParser.PrimitiveIntervalContext = PrimitiveIntervalContext; 
AqlParser.StringValueContext = StringValueContext; 
AqlParser.StringValuesContext = StringValuesContext; 
AqlParser.IntegerValueContext = IntegerValueContext; 
AqlParser.IntegerValuesContext = IntegerValuesContext; 
AqlParser.IntegerIntervalContext = IntegerIntervalContext; 
AqlParser.IntegerIntervalRangeContext = IntegerIntervalRangeContext; 
AqlParser.IntegerIntervalsContext = IntegerIntervalsContext; 
AqlParser.RealValueContext = RealValueContext; 
AqlParser.RealValuesContext = RealValuesContext; 
AqlParser.RealIntervalContext = RealIntervalContext; 
AqlParser.RealIntervalRangeContext = RealIntervalRangeContext; 
AqlParser.RealIntervalsContext = RealIntervalsContext; 
AqlParser.BooleanValueContext = BooleanValueContext; 
AqlParser.BooleanValuesContext = BooleanValuesContext; 
AqlParser.CharacterValueContext = CharacterValueContext; 
AqlParser.CharacterValuesContext = CharacterValuesContext; 
AqlParser.DateValueContext = DateValueContext; 
AqlParser.DateValuesContext = DateValuesContext; 
AqlParser.DateIntervalContext = DateIntervalContext; 
AqlParser.DateIntervalRangeContext = DateIntervalRangeContext; 
AqlParser.DateIntervalsContext = DateIntervalsContext; 
AqlParser.TimeValueContext = TimeValueContext; 
AqlParser.TimeValuesContext = TimeValuesContext; 
AqlParser.TimeIntervalContext = TimeIntervalContext; 
AqlParser.TimeIntervalRangeContext = TimeIntervalRangeContext; 
AqlParser.TimeIntervalsContext = TimeIntervalsContext; 
AqlParser.DateTimeValueContext = DateTimeValueContext; 
AqlParser.DateTimeValuesContext = DateTimeValuesContext; 
AqlParser.DateTimeIntervalContext = DateTimeIntervalContext; 
AqlParser.DateTimeIntervalRangeContext = DateTimeIntervalRangeContext; 
AqlParser.DateTimeIntervalsContext = DateTimeIntervalsContext; 
AqlParser.DurationValueContext = DurationValueContext; 
AqlParser.DurationValuesContext = DurationValuesContext; 
AqlParser.DurationIntervalContext = DurationIntervalContext; 
AqlParser.DurationIntervalRangeContext = DurationIntervalRangeContext; 
AqlParser.DurationIntervalsContext = DurationIntervalsContext; 
AqlParser.TermCodeValueContext = TermCodeValueContext; 
AqlParser.TermCodeListValueContext = TermCodeListValueContext; 
AqlParser.RelopContext = RelopContext; 
AqlParser.AdlPathContext = AdlPathContext; 
AqlParser.AdlPathSegmentContext = AdlPathSegmentContext; 
AqlParser.AdlPathPredicateContext = AdlPathPredicateContext; 
AqlParser.ArchetypeIdPredicateContext = ArchetypeIdPredicateContext; 
AqlParser.IdCodeContext = IdCodeContext; 
AqlParser.AugmentedAdlPathContext = AugmentedAdlPathContext; 
AqlParser.ModelPathContext = ModelPathContext; 
AqlParser.ModelSubPathContext = ModelSubPathContext; 
AqlParser.ModelPathSegmentContext = ModelPathSegmentContext; 
AqlParser.OdinObjectContext = OdinObjectContext; 
AqlParser.OdinAttrValContext = OdinAttrValContext; 
AqlParser.OdinAttrNameContext = OdinAttrNameContext; 
AqlParser.OdinObjectBlockContext = OdinObjectBlockContext; 
AqlParser.OdinObjectValueBlockContext = OdinObjectValueBlockContext; 
AqlParser.RmTypeSpecContext = RmTypeSpecContext; 
AqlParser.OdinKeyedObjectContext = OdinKeyedObjectContext; 
AqlParser.OdinKeySpecContext = OdinKeySpecContext; 
AqlParser.OdinObjectReferenceBlockContext = OdinObjectReferenceBlockContext; 
AqlParser.OdinPathListContext = OdinPathListContext; 
AqlParser.OdinPathContext = OdinPathContext; 
AqlParser.OdinPathSegmentContext = OdinPathSegmentContext; 
AqlParser.PrimitiveListValueContext = PrimitiveListValueContext; 
AqlParser.PrimitiveIntervalValueContext = PrimitiveIntervalValueContext; 
AqlParser.StringListValueContext = StringListValueContext; 
AqlParser.IntegerListValueContext = IntegerListValueContext; 
AqlParser.IntegerIntervalValueContext = IntegerIntervalValueContext; 
AqlParser.IntegerIntervalListValueContext = IntegerIntervalListValueContext; 
AqlParser.RealListValueContext = RealListValueContext; 
AqlParser.RealIntervalValueContext = RealIntervalValueContext; 
AqlParser.RealIntervalListValueContext = RealIntervalListValueContext; 
AqlParser.BooleanListValueContext = BooleanListValueContext; 
AqlParser.CharacterListValueContext = CharacterListValueContext; 
AqlParser.DateListValueContext = DateListValueContext; 
AqlParser.DateIntervalValueContext = DateIntervalValueContext; 
AqlParser.DateIntervalListValueContext = DateIntervalListValueContext; 
AqlParser.TimeListValueContext = TimeListValueContext; 
AqlParser.TimeIntervalValueContext = TimeIntervalValueContext; 
AqlParser.TimeIntervalListValueContext = TimeIntervalListValueContext; 
AqlParser.DateTimeListValueContext = DateTimeListValueContext; 
AqlParser.DateTimeIntervalValueContext = DateTimeIntervalValueContext; 
AqlParser.DateTimeIntervalListValueContext = DateTimeIntervalListValueContext; 
AqlParser.DurationListValueContext = DurationListValueContext; 
AqlParser.DurationIntervalValueContext = DurationIntervalValueContext; 
AqlParser.DurationIntervalListValueContext = DurationIntervalListValueContext; 
